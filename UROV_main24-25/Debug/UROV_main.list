
UROV_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800c860  0800c860  0000d860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca10  0800ca10  0000e1a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca10  0800ca10  0000da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca18  0800ca18  0000e1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca18  0800ca18  0000da18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca1c  0800ca1c  0000da1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  0800ca20  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1a0  2**0
                  CONTENTS
 10 .bss          00002994  200001a0  200001a0  0000e1a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002b34  20002b34  0000e1a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b15d  00000000  00000000  0000e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b87  00000000  00000000  0002932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000146f  00000000  00000000  0002f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002749e  00000000  00000000  00030ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025633  00000000  00000000  0005827d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d580e  00000000  00000000  0007d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001530be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c38  00000000  00000000  00153104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0015ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c844 	.word	0x0800c844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800c844 	.word	0x0800c844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96a 	b.w	8000e84 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	460c      	mov	r4, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d14e      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	458c      	cmp	ip, r1
 8000bd8:	4686      	mov	lr, r0
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	d962      	bls.n	8000ca6 <__udivmoddi4+0xde>
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0320 	rsb	r3, r2, #32
 8000be6:	4091      	lsls	r1, r2
 8000be8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f f68c 	uxth.w	r6, ip
 8000bfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb07 1114 	mls	r1, r7, r4, r1
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	fb04 f106 	mul.w	r1, r4, r6
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1e:	f080 8112 	bcs.w	8000e46 <__udivmoddi4+0x27e>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 810f 	bls.w	8000e46 <__udivmoddi4+0x27e>
 8000c28:	3c02      	subs	r4, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a59      	subs	r1, r3, r1
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c36:	fb07 1110 	mls	r1, r7, r0, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f606 	mul.w	r6, r0, r6
 8000c42:	429e      	cmp	r6, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x94>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4e:	f080 80fc 	bcs.w	8000e4a <__udivmoddi4+0x282>
 8000c52:	429e      	cmp	r6, r3
 8000c54:	f240 80f9 	bls.w	8000e4a <__udivmoddi4+0x282>
 8000c58:	4463      	add	r3, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11d      	cbz	r5, 8000c6e <__udivmoddi4+0xa6>
 8000c66:	40d3      	lsrs	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d905      	bls.n	8000c82 <__udivmoddi4+0xba>
 8000c76:	b10d      	cbz	r5, 8000c7c <__udivmoddi4+0xb4>
 8000c78:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e7f5      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000c82:	fab3 f183 	clz	r1, r3
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d146      	bne.n	8000d18 <__udivmoddi4+0x150>
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xcc>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f0c0 80f0 	bcc.w	8000e74 <__udivmoddi4+0x2ac>
 8000c94:	1a86      	subs	r6, r0, r2
 8000c96:	eb64 0303 	sbc.w	r3, r4, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d0e6      	beq.n	8000c6e <__udivmoddi4+0xa6>
 8000ca0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca4:	e7e3      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x204>
 8000cac:	eba1 040c 	sub.w	r4, r1, ip
 8000cb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb07 f006 	mul.w	r0, r7, r6
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x11c>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x11a>
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000ce2:	4626      	mov	r6, r4
 8000ce4:	1a1c      	subs	r4, r3, r0
 8000ce6:	fa1f f38e 	uxth.w	r3, lr
 8000cea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cee:	fb08 4410 	mls	r4, r8, r0, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb00 f707 	mul.w	r7, r0, r7
 8000cfa:	429f      	cmp	r7, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x148>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x146>
 8000d08:	429f      	cmp	r7, r3
 8000d0a:	f200 80b0 	bhi.w	8000e6e <__udivmoddi4+0x2a6>
 8000d0e:	4620      	mov	r0, r4
 8000d10:	1bdb      	subs	r3, r3, r7
 8000d12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d16:	e7a5      	b.n	8000c64 <__udivmoddi4+0x9c>
 8000d18:	f1c1 0620 	rsb	r6, r1, #32
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d22:	431f      	orrs	r7, r3
 8000d24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d28:	fa04 f301 	lsl.w	r3, r4, r1
 8000d2c:	ea43 030c 	orr.w	r3, r3, ip
 8000d30:	40f4      	lsrs	r4, r6
 8000d32:	fa00 f801 	lsl.w	r8, r0, r1
 8000d36:	0c38      	lsrs	r0, r7, #16
 8000d38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d40:	fa1f fc87 	uxth.w	ip, r7
 8000d44:	fb00 441e 	mls	r4, r0, lr, r4
 8000d48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	fa02 f201 	lsl.w	r2, r2, r1
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x1a6>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5e:	f080 8084 	bcs.w	8000e6a <__udivmoddi4+0x2a2>
 8000d62:	45a1      	cmp	r9, r4
 8000d64:	f240 8081 	bls.w	8000e6a <__udivmoddi4+0x2a2>
 8000d68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	eba4 0409 	sub.w	r4, r4, r9
 8000d72:	fa1f f983 	uxth.w	r9, r3
 8000d76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x1d2>
 8000d8a:	193c      	adds	r4, r7, r4
 8000d8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d90:	d267      	bcs.n	8000e62 <__udivmoddi4+0x29a>
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d965      	bls.n	8000e62 <__udivmoddi4+0x29a>
 8000d96:	3b02      	subs	r3, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	429c      	cmp	r4, r3
 8000da8:	46ce      	mov	lr, r9
 8000daa:	469c      	mov	ip, r3
 8000dac:	d351      	bcc.n	8000e52 <__udivmoddi4+0x28a>
 8000dae:	d04e      	beq.n	8000e4e <__udivmoddi4+0x286>
 8000db0:	b155      	cbz	r5, 8000dc8 <__udivmoddi4+0x200>
 8000db2:	ebb8 030e 	subs.w	r3, r8, lr
 8000db6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dba:	fa04 f606 	lsl.w	r6, r4, r6
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e750      	b.n	8000c6e <__udivmoddi4+0xa6>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	430c      	orrs	r4, r1
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3110 	mls	r1, r8, r0, r3
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f107 	mul.w	r1, r0, r7
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x24c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e0a:	d22c      	bcs.n	8000e66 <__udivmoddi4+0x29e>
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d92a      	bls.n	8000e66 <__udivmoddi4+0x29e>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e24:	fb01 f307 	mul.w	r3, r1, r7
 8000e28:	42a3      	cmp	r3, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x276>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e34:	d213      	bcs.n	8000e5e <__udivmoddi4+0x296>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d911      	bls.n	8000e5e <__udivmoddi4+0x296>
 8000e3a:	3902      	subs	r1, #2
 8000e3c:	4464      	add	r4, ip
 8000e3e:	1ae4      	subs	r4, r4, r3
 8000e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e44:	e739      	b.n	8000cba <__udivmoddi4+0xf2>
 8000e46:	4604      	mov	r4, r0
 8000e48:	e6f0      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e706      	b.n	8000c5c <__udivmoddi4+0x94>
 8000e4e:	45c8      	cmp	r8, r9
 8000e50:	d2ae      	bcs.n	8000db0 <__udivmoddi4+0x1e8>
 8000e52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7a8      	b.n	8000db0 <__udivmoddi4+0x1e8>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	e7ed      	b.n	8000e3e <__udivmoddi4+0x276>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e799      	b.n	8000d9a <__udivmoddi4+0x1d2>
 8000e66:	4630      	mov	r0, r6
 8000e68:	e7d4      	b.n	8000e14 <__udivmoddi4+0x24c>
 8000e6a:	46d6      	mov	lr, sl
 8000e6c:	e77f      	b.n	8000d6e <__udivmoddi4+0x1a6>
 8000e6e:	4463      	add	r3, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e74d      	b.n	8000d10 <__udivmoddi4+0x148>
 8000e74:	4606      	mov	r6, r0
 8000e76:	4623      	mov	r3, r4
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e70f      	b.n	8000c9c <__udivmoddi4+0xd4>
 8000e7c:	3e02      	subs	r6, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	e730      	b.n	8000ce4 <__udivmoddi4+0x11c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <BNO080_GPIO_Initialization>:
int16_t magnetometer_Q1 = 4;

extern SPI_HandleTypeDef hspi2;

void BNO080_GPIO_Initialization(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	/* Peripheral clock enable */
	//LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
	
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <BNO080_GPIO_Initialization+0x8c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <BNO080_GPIO_Initialization+0x8c>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <BNO080_GPIO_Initialization+0x8c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN | BNO080_PS0_WAKE_PIN | BNO080_RST_PIN;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <BNO080_GPIO_Initialization+0x90>)
 8000ece:	f002 f9c7 	bl	8003260 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <BNO080_GPIO_Initialization+0x90>)
 8000ee8:	f002 f9ba 	bl	8003260 <HAL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);


	*/
	CHIP_DESELECT(BNO080);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <BNO080_GPIO_Initialization+0x90>)
 8000ef2:	f002 fb69 	bl	80035c8 <HAL_GPIO_WritePin>
	WAKE_HIGH();
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <BNO080_GPIO_Initialization+0x90>)
 8000efc:	f002 fb64 	bl	80035c8 <HAL_GPIO_WritePin>
	RESET_HIGH();
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <BNO080_GPIO_Initialization+0x90>)
 8000f06:	f002 fb5f 	bl	80035c8 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40021000 	.word	0x40021000

08000f1c <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af02      	add	r7, sp, #8
	BNO080_GPIO_Initialization();
 8000f22:	f7ff ffb1 	bl	8000e88 <BNO080_GPIO_Initialization>
	
	printf("Checking BNO080...");
 8000f26:	482e      	ldr	r0, [pc, #184]	@ (8000fe0 <BNO080_Initialization+0xc4>)
 8000f28:	f009 fa8a 	bl	800a440 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2101      	movs	r1, #1
 8000f30:	482c      	ldr	r0, [pc, #176]	@ (8000fe4 <BNO080_Initialization+0xc8>)
 8000f32:	f002 fb49 	bl	80035c8 <HAL_GPIO_WritePin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8000f36:	2201      	movs	r2, #1
 8000f38:	2102      	movs	r1, #2
 8000f3a:	482a      	ldr	r0, [pc, #168]	@ (8000fe4 <BNO080_Initialization+0xc8>)
 8000f3c:	f002 fb44 	bl	80035c8 <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO080
 8000f40:	2200      	movs	r2, #0
 8000f42:	2104      	movs	r1, #4
 8000f44:	4827      	ldr	r0, [pc, #156]	@ (8000fe4 <BNO080_Initialization+0xc8>)
 8000f46:	f002 fb3f 	bl	80035c8 <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8000f4a:	20c8      	movs	r0, #200	@ 0xc8
 8000f4c:	f002 f852 	bl	8002ff4 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8000f50:	2201      	movs	r2, #1
 8000f52:	2104      	movs	r1, #4
 8000f54:	4823      	ldr	r0, [pc, #140]	@ (8000fe4 <BNO080_Initialization+0xc8>)
 8000f56:	f002 fb37 	bl	80035c8 <HAL_GPIO_WritePin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8000f5a:	f000 fc31 	bl	80017c0 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8000f5e:	f000 fc2f 	bl	80017c0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000f62:	f000 fc4f 	bl	8001804 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8000f66:	f000 fc2b 	bl	80017c0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000f6a:	f000 fc4b 	bl	8001804 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <BNO080_Initialization+0xcc>)
 8000f70:	22f9      	movs	r2, #249	@ 0xf9
 8000f72:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8000f74:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <BNO080_Initialization+0xcc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f000 fcaf 	bl	80018e0 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8000f82:	f000 fc1d 	bl	80017c0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8000f86:	f000 fc3d 	bl	8001804 <BNO080_receivePacket>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d11b      	bne.n	8000fc8 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <BNO080_Initialization+0xd0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <BNO080_Initialization+0xd0>)
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <BNO080_Initialization+0xd0>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <BNO080_Initialization+0xd0>)
 8000fa4:	78db      	ldrb	r3, [r3, #3]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <BNO080_Initialization+0xd4>)
 8000fac:	f009 fa48 	bl	800a440 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <BNO080_Initialization+0xcc>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2bf8      	cmp	r3, #248	@ 0xf8
 8000fb6:	d107      	bne.n	8000fc8 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <BNO080_Initialization+0xcc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <BNO080_Initialization+0xd8>)
 8000fc0:	f009 fa3e 	bl	800a440 <iprintf>
			return (0);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e007      	b.n	8000fd8 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <BNO080_Initialization+0xcc>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	22f8      	movs	r2, #248	@ 0xf8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <BNO080_Initialization+0xdc>)
 8000fd2:	f009 fa35 	bl	800a440 <iprintf>
	return (1); //Something went wrong
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800c860 	.word	0x0800c860
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	200001c0 	.word	0x200001c0
 8000fec:	200001bc 	.word	0x200001bc
 8000ff0:	0800c874 	.word	0x0800c874
 8000ff4:	0800c88c 	.word	0x0800c88c
 8000ff8:	0800c8ac 	.word	0x0800c8ac

08000ffc <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	unsigned char receive = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi2, &data, &receive, 1, 10);
 800100a:	f107 020f 	add.w	r2, r7, #15
 800100e:	1df9      	adds	r1, r7, #7
 8001010:	230a      	movs	r3, #10
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	4804      	ldr	r0, [pc, #16]	@ (8001028 <SPI2_SendByte+0x2c>)
 8001018:	f004 fbad 	bl	8005776 <HAL_SPI_TransmitReceive>
	return receive;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000b3c 	.word	0x20000b3c

0800102c <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001030:	2108      	movs	r1, #8
 8001032:	4812      	ldr	r0, [pc, #72]	@ (800107c <BNO080_dataAvailable+0x50>)
 8001034:	f002 fab0 	bl	8003598 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <BNO080_dataAvailable+0x16>
		return (0);
 800103e:	2300      	movs	r3, #0
 8001040:	e019      	b.n	8001076 <BNO080_dataAvailable+0x4a>

	if (BNO080_receivePacket() == 1)
 8001042:	f000 fbdf 	bl	8001804 <BNO080_receivePacket>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d113      	bne.n	8001074 <BNO080_dataAvailable+0x48>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <BNO080_dataAvailable+0x54>)
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d107      	bne.n	8001064 <BNO080_dataAvailable+0x38>
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <BNO080_dataAvailable+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2bfb      	cmp	r3, #251	@ 0xfb
 800105a:	d103      	bne.n	8001064 <BNO080_dataAvailable+0x38>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800105c:	f000 f830 	bl	80010c0 <BNO080_parseInputReport>
			return (1);
 8001060:	2301      	movs	r3, #1
 8001062:	e008      	b.n	8001076 <BNO080_dataAvailable+0x4a>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <BNO080_dataAvailable+0x54>)
 8001066:	789b      	ldrb	r3, [r3, #2]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d103      	bne.n	8001074 <BNO080_dataAvailable+0x48>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800106c:	f000 f80c 	bl	8001088 <BNO080_parseCommandReport>
			return (1);
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <BNO080_dataAvailable+0x4a>
		}
	}
	return (0);
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	200001bc 	.word	0x200001bc
 8001084:	200001c0 	.word	0x200001c0

08001088 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <BNO080_parseCommandReport+0x30>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2bf1      	cmp	r3, #241	@ 0xf1
 8001094:	d109      	bne.n	80010aa <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <BNO080_parseCommandReport+0x30>)
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d103      	bne.n	80010aa <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80010a2:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <BNO080_parseCommandReport+0x30>)
 80010a4:	795a      	ldrb	r2, [r3, #5]
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <BNO080_parseCommandReport+0x34>)
 80010a8:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200001c0 	.word	0x200001c0
 80010bc:	20000284 	.word	0x20000284

080010c0 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80010c6:	4b98      	ldr	r3, [pc, #608]	@ (8001328 <BNO080_parseInputReport+0x268>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b96      	ldr	r3, [pc, #600]	@ (8001328 <BNO080_parseInputReport+0x268>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80010d8:	8a3b      	ldrh	r3, [r7, #16]
 80010da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010de:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80010e0:	8a3b      	ldrh	r3, [r7, #16]
 80010e2:	3b04      	subs	r3, #4
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80010e8:	4b90      	ldr	r3, [pc, #576]	@ (800132c <BNO080_parseInputReport+0x26c>)
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	061a      	lsls	r2, r3, #24
 80010ee:	4b8f      	ldr	r3, [pc, #572]	@ (800132c <BNO080_parseInputReport+0x26c>)
 80010f0:	78db      	ldrb	r3, [r3, #3]
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	431a      	orrs	r2, r3
 80010f6:	4b8d      	ldr	r3, [pc, #564]	@ (800132c <BNO080_parseInputReport+0x26c>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	4313      	orrs	r3, r2
 80010fe:	4a8b      	ldr	r2, [pc, #556]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001100:	7852      	ldrb	r2, [r2, #1]
 8001102:	4313      	orrs	r3, r2
 8001104:	4a8a      	ldr	r2, [pc, #552]	@ (8001330 <BNO080_parseInputReport+0x270>)
 8001106:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001108:	4b88      	ldr	r3, [pc, #544]	@ (800132c <BNO080_parseInputReport+0x26c>)
 800110a:	79db      	ldrb	r3, [r3, #7]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001112:	4b86      	ldr	r3, [pc, #536]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001114:	7a9b      	ldrb	r3, [r3, #10]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b84      	ldr	r3, [pc, #528]	@ (800132c <BNO080_parseInputReport+0x26c>)
 800111c:	7a5b      	ldrb	r3, [r3, #9]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001126:	4b81      	ldr	r3, [pc, #516]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001128:	7b1b      	ldrb	r3, [r3, #12]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b7f      	ldr	r3, [pc, #508]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001130:	7adb      	ldrb	r3, [r3, #11]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800113a:	4b7c      	ldr	r3, [pc, #496]	@ (800132c <BNO080_parseInputReport+0x26c>)
 800113c:	7b9b      	ldrb	r3, [r3, #14]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b7a      	ldr	r3, [pc, #488]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001144:	7b5b      	ldrb	r3, [r3, #13]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21b      	sxth	r3, r3
 800114c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001156:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800115a:	2b0e      	cmp	r3, #14
 800115c:	dd09      	ble.n	8001172 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800115e:	4b73      	ldr	r3, [pc, #460]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001160:	7c1b      	ldrb	r3, [r3, #16]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b71      	ldr	r3, [pc, #452]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001168:	7bdb      	ldrb	r3, [r3, #15]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001172:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001176:	2b10      	cmp	r3, #16
 8001178:	dd09      	ble.n	800118e <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800117a:	4b6c      	ldr	r3, [pc, #432]	@ (800132c <BNO080_parseInputReport+0x26c>)
 800117c:	7c9b      	ldrb	r3, [r3, #18]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b6a      	ldr	r3, [pc, #424]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001184:	7c5b      	ldrb	r3, [r3, #17]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21b      	sxth	r3, r3
 800118c:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800118e:	4b67      	ldr	r3, [pc, #412]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	2b1e      	cmp	r3, #30
 8001194:	dc46      	bgt.n	8001224 <BNO080_parseInputReport+0x164>
 8001196:	2b00      	cmp	r3, #0
 8001198:	f340 80bf 	ble.w	800131a <BNO080_parseInputReport+0x25a>
 800119c:	3b01      	subs	r3, #1
 800119e:	2b1d      	cmp	r3, #29
 80011a0:	f200 80bb 	bhi.w	800131a <BNO080_parseInputReport+0x25a>
 80011a4:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <BNO080_parseInputReport+0xec>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	0800122b 	.word	0x0800122b
 80011b0:	08001263 	.word	0x08001263
 80011b4:	0800127f 	.word	0x0800127f
 80011b8:	08001247 	.word	0x08001247
 80011bc:	0800129b 	.word	0x0800129b
 80011c0:	0800131b 	.word	0x0800131b
 80011c4:	0800131b 	.word	0x0800131b
 80011c8:	0800129b 	.word	0x0800129b
 80011cc:	0800131b 	.word	0x0800131b
 80011d0:	0800131b 	.word	0x0800131b
 80011d4:	0800131b 	.word	0x0800131b
 80011d8:	0800131b 	.word	0x0800131b
 80011dc:	0800131b 	.word	0x0800131b
 80011e0:	0800131b 	.word	0x0800131b
 80011e4:	0800131b 	.word	0x0800131b
 80011e8:	0800131b 	.word	0x0800131b
 80011ec:	080012c3 	.word	0x080012c3
 80011f0:	0800131b 	.word	0x0800131b
 80011f4:	080012cb 	.word	0x080012cb
 80011f8:	0800131b 	.word	0x0800131b
 80011fc:	0800131b 	.word	0x0800131b
 8001200:	0800131b 	.word	0x0800131b
 8001204:	0800131b 	.word	0x0800131b
 8001208:	0800131b 	.word	0x0800131b
 800120c:	0800131b 	.word	0x0800131b
 8001210:	0800131b 	.word	0x0800131b
 8001214:	0800131b 	.word	0x0800131b
 8001218:	0800131b 	.word	0x0800131b
 800121c:	0800131b 	.word	0x0800131b
 8001220:	080012d5 	.word	0x080012d5
 8001224:	2bf1      	cmp	r3, #241	@ 0xf1
 8001226:	d06d      	beq.n	8001304 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001228:	e077      	b.n	800131a <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <BNO080_parseInputReport+0x274>)
 8001230:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001232:	4a41      	ldr	r2, [pc, #260]	@ (8001338 <BNO080_parseInputReport+0x278>)
 8001234:	89bb      	ldrh	r3, [r7, #12]
 8001236:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001238:	4a40      	ldr	r2, [pc, #256]	@ (800133c <BNO080_parseInputReport+0x27c>)
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800123e:	4a40      	ldr	r2, [pc, #256]	@ (8001340 <BNO080_parseInputReport+0x280>)
 8001240:	893b      	ldrh	r3, [r7, #8]
 8001242:	8013      	strh	r3, [r2, #0]
			break;
 8001244:	e069      	b.n	800131a <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b3e      	ldr	r3, [pc, #248]	@ (8001344 <BNO080_parseInputReport+0x284>)
 800124c:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800124e:	4a3e      	ldr	r2, [pc, #248]	@ (8001348 <BNO080_parseInputReport+0x288>)
 8001250:	89bb      	ldrh	r3, [r7, #12]
 8001252:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001254:	4a3d      	ldr	r2, [pc, #244]	@ (800134c <BNO080_parseInputReport+0x28c>)
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800125a:	4a3d      	ldr	r2, [pc, #244]	@ (8001350 <BNO080_parseInputReport+0x290>)
 800125c:	893b      	ldrh	r3, [r7, #8]
 800125e:	8013      	strh	r3, [r2, #0]
			break;
 8001260:	e05b      	b.n	800131a <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <BNO080_parseInputReport+0x294>)
 8001268:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800126a:	4a3b      	ldr	r2, [pc, #236]	@ (8001358 <BNO080_parseInputReport+0x298>)
 800126c:	89bb      	ldrh	r3, [r7, #12]
 800126e:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001270:	4a3a      	ldr	r2, [pc, #232]	@ (800135c <BNO080_parseInputReport+0x29c>)
 8001272:	897b      	ldrh	r3, [r7, #10]
 8001274:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001276:	4a3a      	ldr	r2, [pc, #232]	@ (8001360 <BNO080_parseInputReport+0x2a0>)
 8001278:	893b      	ldrh	r3, [r7, #8]
 800127a:	8013      	strh	r3, [r2, #0]
			break;
 800127c:	e04d      	b.n	800131a <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b38      	ldr	r3, [pc, #224]	@ (8001364 <BNO080_parseInputReport+0x2a4>)
 8001284:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001286:	4a38      	ldr	r2, [pc, #224]	@ (8001368 <BNO080_parseInputReport+0x2a8>)
 8001288:	89bb      	ldrh	r3, [r7, #12]
 800128a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 800128c:	4a37      	ldr	r2, [pc, #220]	@ (800136c <BNO080_parseInputReport+0x2ac>)
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001292:	4a37      	ldr	r2, [pc, #220]	@ (8001370 <BNO080_parseInputReport+0x2b0>)
 8001294:	893b      	ldrh	r3, [r7, #8]
 8001296:	8013      	strh	r3, [r2, #0]
			break;
 8001298:	e03f      	b.n	800131a <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <BNO080_parseInputReport+0x2b4>)
 80012a0:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80012a2:	4a35      	ldr	r2, [pc, #212]	@ (8001378 <BNO080_parseInputReport+0x2b8>)
 80012a4:	89bb      	ldrh	r3, [r7, #12]
 80012a6:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80012a8:	4a34      	ldr	r2, [pc, #208]	@ (800137c <BNO080_parseInputReport+0x2bc>)
 80012aa:	897b      	ldrh	r3, [r7, #10]
 80012ac:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80012ae:	4a34      	ldr	r2, [pc, #208]	@ (8001380 <BNO080_parseInputReport+0x2c0>)
 80012b0:	893b      	ldrh	r3, [r7, #8]
 80012b2:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80012b4:	4a33      	ldr	r2, [pc, #204]	@ (8001384 <BNO080_parseInputReport+0x2c4>)
 80012b6:	8afb      	ldrh	r3, [r7, #22]
 80012b8:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80012ba:	4a33      	ldr	r2, [pc, #204]	@ (8001388 <BNO080_parseInputReport+0x2c8>)
 80012bc:	8abb      	ldrh	r3, [r7, #20]
 80012be:	8013      	strh	r3, [r2, #0]
			break;
 80012c0:	e02b      	b.n	800131a <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 80012c2:	4a32      	ldr	r2, [pc, #200]	@ (800138c <BNO080_parseInputReport+0x2cc>)
 80012c4:	893b      	ldrh	r3, [r7, #8]
 80012c6:	8013      	strh	r3, [r2, #0]
			break;
 80012c8:	e027      	b.n	800131a <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <BNO080_parseInputReport+0x26c>)
 80012cc:	7a5a      	ldrb	r2, [r3, #9]
 80012ce:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <BNO080_parseInputReport+0x2d0>)
 80012d0:	701a      	strb	r2, [r3, #0]
			break;
 80012d2:	e022      	b.n	800131a <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <BNO080_parseInputReport+0x26c>)
 80012d6:	7a9a      	ldrb	r2, [r3, #10]
 80012d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <BNO080_parseInputReport+0x2d4>)
 80012da:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80012dc:	2300      	movs	r3, #0
 80012de:	74fb      	strb	r3, [r7, #19]
 80012e0:	e00c      	b.n	80012fc <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80012e2:	7cfb      	ldrb	r3, [r7, #19]
 80012e4:	f103 020b 	add.w	r2, r3, #11
 80012e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <BNO080_parseInputReport+0x2d8>)
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	7cfb      	ldrb	r3, [r7, #19]
 80012ee:	440b      	add	r3, r1
 80012f0:	490e      	ldr	r1, [pc, #56]	@ (800132c <BNO080_parseInputReport+0x26c>)
 80012f2:	5c8a      	ldrb	r2, [r1, r2]
 80012f4:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	3301      	adds	r3, #1
 80012fa:	74fb      	strb	r3, [r7, #19]
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d9ef      	bls.n	80012e2 <BNO080_parseInputReport+0x222>
			break;
 8001302:	e00a      	b.n	800131a <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001306:	79db      	ldrb	r3, [r3, #7]
 8001308:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d103      	bne.n	8001318 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <BNO080_parseInputReport+0x26c>)
 8001312:	7a9a      	ldrb	r2, [r3, #10]
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <BNO080_parseInputReport+0x2dc>)
 8001316:	701a      	strb	r2, [r3, #0]
			break;
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200001bc 	.word	0x200001bc
 800132c:	200001c0 	.word	0x200001c0
 8001330:	20000278 	.word	0x20000278
 8001334:	2000024e 	.word	0x2000024e
 8001338:	20000248 	.word	0x20000248
 800133c:	2000024a 	.word	0x2000024a
 8001340:	2000024c 	.word	0x2000024c
 8001344:	20000256 	.word	0x20000256
 8001348:	20000250 	.word	0x20000250
 800134c:	20000252 	.word	0x20000252
 8001350:	20000254 	.word	0x20000254
 8001354:	2000025e 	.word	0x2000025e
 8001358:	20000258 	.word	0x20000258
 800135c:	2000025a 	.word	0x2000025a
 8001360:	2000025c 	.word	0x2000025c
 8001364:	20000266 	.word	0x20000266
 8001368:	20000260 	.word	0x20000260
 800136c:	20000262 	.word	0x20000262
 8001370:	20000264 	.word	0x20000264
 8001374:	20000272 	.word	0x20000272
 8001378:	20000268 	.word	0x20000268
 800137c:	2000026a 	.word	0x2000026a
 8001380:	2000026c 	.word	0x2000026c
 8001384:	2000026e 	.word	0x2000026e
 8001388:	20000270 	.word	0x20000270
 800138c:	20000274 	.word	0x20000274
 8001390:	2000027c 	.word	0x2000027c
 8001394:	2000027d 	.word	0x2000027d
 8001398:	20000280 	.word	0x20000280
 800139c:	20000284 	.word	0x20000284

080013a0 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <BNO080_getQuatI+0x24>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <BNO080_getQuatI+0x28>)
 80013ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f8e7 	bl	8001588 <BNO080_qToFloat>
 80013ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000268 	.word	0x20000268
 80013c8:	20000000 	.word	0x20000000

080013cc <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <BNO080_getQuatJ+0x24>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <BNO080_getQuatJ+0x28>)
 80013d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f8d1 	bl	8001588 <BNO080_qToFloat>
 80013e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000026a 	.word	0x2000026a
 80013f4:	20000000 	.word	0x20000000

080013f8 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <BNO080_getQuatK+0x24>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <BNO080_getQuatK+0x28>)
 8001404:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f8bb 	bl	8001588 <BNO080_qToFloat>
 8001412:	eef0 7a40 	vmov.f32	s15, s0
}
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000026c 	.word	0x2000026c
 8001420:	20000000 	.word	0x20000000

08001424 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <BNO080_getQuatReal+0x24>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4a07      	ldr	r2, [pc, #28]	@ (800144c <BNO080_getQuatReal+0x28>)
 8001430:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f8a5 	bl	8001588 <BNO080_qToFloat>
 800143e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000026e 	.word	0x2000026e
 800144c:	20000000 	.word	0x20000000

08001450 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <BNO080_getQuatRadianAccuracy+0x24>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b21b      	sxth	r3, r3
 800145a:	4a07      	ldr	r2, [pc, #28]	@ (8001478 <BNO080_getQuatRadianAccuracy+0x28>)
 800145c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f88f 	bl	8001588 <BNO080_qToFloat>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
}
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000270 	.word	0x20000270
 8001478:	20000000 	.word	0x20000000

0800147c <BNO080_getLinAccelX>:

// linear acceleration, i.e. minus gravity

//Return the acceleration component
float BNO080_getLinAccelX()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawLinAccelX, linear_accelerometer_Q1);
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <BNO080_getLinAccelX+0x24>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <BNO080_getLinAccelX+0x28>)
 8001488:	f9b2 2000 	ldrsh.w	r2, [r2]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f879 	bl	8001588 <BNO080_qToFloat>
 8001496:	eef0 7a40 	vmov.f32	s15, s0
}
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000250 	.word	0x20000250
 80014a4:	20000002 	.word	0x20000002

080014a8 <BNO080_getLinAccelY>:

//Return the acceleration component
float BNO080_getLinAccelY()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawLinAccelY, linear_accelerometer_Q1);
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <BNO080_getLinAccelY+0x24>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <BNO080_getLinAccelY+0x28>)
 80014b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f863 	bl	8001588 <BNO080_qToFloat>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000252 	.word	0x20000252
 80014d0:	20000002 	.word	0x20000002

080014d4 <BNO080_getLinAccelZ>:

//Return the acceleration component
float BNO080_getLinAccelZ()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawLinAccelZ, linear_accelerometer_Q1);
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <BNO080_getLinAccelZ+0x24>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <BNO080_getLinAccelZ+0x28>)
 80014e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84d 	bl	8001588 <BNO080_qToFloat>
 80014ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000254 	.word	0x20000254
 80014fc:	20000002 	.word	0x20000002

08001500 <BNO080_getLinAccelAccuracy>:

//Return the acceleration component
uint8_t BNO080_getLinAccelAccuracy()
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	return (accelLinAccuracy);
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <BNO080_getLinAccelAccuracy+0x14>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000256 	.word	0x20000256

08001518 <BNO080_getGyroX>:

//Return the gyro component
float BNO080_getGyroX()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawGyroX, gyro_Q1);
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <BNO080_getGyroX+0x24>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <BNO080_getGyroX+0x28>)
 8001524:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f82b 	bl	8001588 <BNO080_qToFloat>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000258 	.word	0x20000258
 8001540:	20000004 	.word	0x20000004

08001544 <BNO080_getGyroY>:

//Return the gyro component
float BNO080_getGyroY()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawGyroY, gyro_Q1);
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <BNO080_getGyroY+0x24>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4a07      	ldr	r2, [pc, #28]	@ (800156c <BNO080_getGyroY+0x28>)
 8001550:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f815 	bl	8001588 <BNO080_qToFloat>
 800155e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000025a 	.word	0x2000025a
 800156c:	20000004 	.word	0x20000004

08001570 <BNO080_getGyroAccuracy>:
	return BNO080_qToFloat(rawGyroZ, gyro_Q1);
}

//Return the gyro component
uint8_t BNO080_getGyroAccuracy()
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	return (gyroAccuracy);
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <BNO080_getGyroAccuracy+0x14>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	2000025e 	.word	0x2000025e

08001588 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	ed2d 8b02 	vpush	{d8}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	4613      	mov	r3, r2
 800159a:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 800159c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80015a8:	797b      	ldrb	r3, [r7, #5]
 80015aa:	425b      	negs	r3, r3
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	eef0 0a67 	vmov.f32	s1, s15
 80015b8:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80015bc:	f009 fe8a 	bl	800b2d4 <powf>
 80015c0:	eef0 7a40 	vmov.f32	s15, s0
 80015c4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	ecbd 8b02 	vpop	{d8}
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	2005      	movs	r0, #5
 80015e8:	f000 f830 	bl	800164c <BNO080_setFeatureCommand>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <BNO080_enableLinearAccelerometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ACCELEROMETER, timeBetweenReports, 0);
}

//Sends the packet to enable the accelerometer
void BNO080_enableLinearAccelerometer(uint16_t timeBetweenReports)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_LINEAR_ACCELERATION, timeBetweenReports, 0);
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	2004      	movs	r0, #4
 8001606:	f000 f821 	bl	800164c <BNO080_setFeatureCommand>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <BNO080_enableGyro>:

//Sends the packet to enable the gyro
void BNO080_enableGyro(uint16_t timeBetweenReports)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	2002      	movs	r0, #2
 8001624:	f000 f812 	bl	800164c <BNO080_setFeatureCommand>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001634:	2004      	movs	r0, #4
 8001636:	f000 f87b 	bl	8001730 <BNO080_sendCalibrateCommand>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}

0800163e <BNO080_endCalibration>:

void BNO080_endCalibration()
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_STOP); //Disables all calibrations
 8001642:	2005      	movs	r0, #5
 8001644:	f000 f874 	bl	8001730 <BNO080_sendCalibrateCommand>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 800165c:	22fd      	movs	r2, #253	@ 0xfd
 800165e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001660:	4a22      	ldr	r2, [pc, #136]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 8001668:	2200      	movs	r2, #0
 800166a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 800166e:	2200      	movs	r2, #0
 8001670:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 800167e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 8001688:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 8001692:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	0e1b      	lsrs	r3, r3, #24
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 800169c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016bc:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016c6:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016d0:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0e1b      	lsrs	r3, r3, #24
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <BNO080_setFeatureCommand+0xa0>)
 80016da:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 80016dc:	2111      	movs	r1, #17
 80016de:	2002      	movs	r0, #2
 80016e0:	f000 f8fe 	bl	80018e0 <BNO080_sendPacket>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200001c0 	.word	0x200001c0

080016f0 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <BNO080_sendCommand+0x38>)
 80016fc:	22f2      	movs	r2, #242	@ 0xf2
 80016fe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <BNO080_sendCommand+0x3c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	b2d1      	uxtb	r1, r2
 8001708:	4a08      	ldr	r2, [pc, #32]	@ (800172c <BNO080_sendCommand+0x3c>)
 800170a:	7011      	strb	r1, [r2, #0]
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <BNO080_sendCommand+0x38>)
 800170e:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001710:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <BNO080_sendCommand+0x38>)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001716:	210c      	movs	r1, #12
 8001718:	2002      	movs	r0, #2
 800171a:	f000 f8e1 	bl	80018e0 <BNO080_sendPacket>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001c0 	.word	0x200001c0
 800172c:	20000246 	.word	0x20000246

08001730 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 800173a:	2303      	movs	r3, #3
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e006      	b.n	800174e <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 8001744:	2100      	movs	r1, #0
 8001746:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3301      	adds	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b0b      	cmp	r3, #11
 8001752:	d9f5      	bls.n	8001740 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 800175a:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 800175c:	2201      	movs	r2, #1
 800175e:	70da      	strb	r2, [r3, #3]
 8001760:	e020      	b.n	80017a4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d103      	bne.n	8001770 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 800176a:	2201      	movs	r2, #1
 800176c:	711a      	strb	r2, [r3, #4]
 800176e:	e019      	b.n	80017a4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d103      	bne.n	800177e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 8001778:	2201      	movs	r2, #1
 800177a:	715a      	strb	r2, [r3, #5]
 800177c:	e012      	b.n	80017a4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d103      	bne.n	800178c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 8001786:	2201      	movs	r2, #1
 8001788:	71da      	strb	r2, [r3, #7]
 800178a:	e00b      	b.n	80017a4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d108      	bne.n	80017a4 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 8001794:	2201      	movs	r2, #1
 8001796:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 800179a:	2201      	movs	r2, #1
 800179c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <BNO080_sendCalibrateCommand+0x88>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <BNO080_sendCalibrateCommand+0x8c>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 80017aa:	2007      	movs	r0, #7
 80017ac:	f7ff ffa0 	bl	80016f0 <BNO080_sendCommand>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200001c0 	.word	0x200001c0
 80017bc:	20000284 	.word	0x20000284

080017c0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	e00b      	b.n	80017e4 <BNO080_waitForSPI+0x24>
	{
		if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80017cc:	2108      	movs	r1, #8
 80017ce:	480b      	ldr	r0, [pc, #44]	@ (80017fc <BNO080_waitForSPI+0x3c>)
 80017d0:	f001 fee2 	bl	8003598 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <BNO080_waitForSPI+0x1e>
		{
			//printf("\nData available\n");
			return (1);
 80017da:	2301      	movs	r3, #1
 80017dc:	e00a      	b.n	80017f4 <BNO080_waitForSPI+0x34>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ea:	d1ef      	bne.n	80017cc <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <BNO080_waitForSPI+0x40>)
 80017ee:	f008 fe8f 	bl	800a510 <puts>
	return (0);
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	0800c8f8 	.word	0x0800c8f8

08001804 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800180a:	2108      	movs	r1, #8
 800180c:	4831      	ldr	r0, [pc, #196]	@ (80018d4 <BNO080_receivePacket+0xd0>)
 800180e:	f001 fec3 	bl	8003598 <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <BNO080_receivePacket+0x18>
		return (0); //Data is not available
 8001818:	2300      	movs	r3, #0
 800181a:	e056      	b.n	80018ca <BNO080_receivePacket+0xc6>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800181c:	2200      	movs	r2, #0
 800181e:	2101      	movs	r1, #1
 8001820:	482c      	ldr	r0, [pc, #176]	@ (80018d4 <BNO080_receivePacket+0xd0>)
 8001822:	f001 fed1 	bl	80035c8 <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fbe8 	bl	8000ffc <SPI2_SendByte>
 800182c:	4603      	mov	r3, r0
 800182e:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fbe3 	bl	8000ffc <SPI2_SendByte>
 8001836:	4603      	mov	r3, r0
 8001838:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fbde 	bl	8000ffc <SPI2_SendByte>
 8001840:	4603      	mov	r3, r0
 8001842:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fbd9 	bl	8000ffc <SPI2_SendByte>
 800184a:	4603      	mov	r3, r0
 800184c:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 800184e:	4a22      	ldr	r2, [pc, #136]	@ (80018d8 <BNO080_receivePacket+0xd4>)
 8001850:	7b7b      	ldrb	r3, [r7, #13]
 8001852:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001854:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <BNO080_receivePacket+0xd4>)
 8001856:	7b3b      	ldrb	r3, [r7, #12]
 8001858:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 800185a:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <BNO080_receivePacket+0xd4>)
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001860:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <BNO080_receivePacket+0xd4>)
 8001862:	7abb      	ldrb	r3, [r7, #10]
 8001864:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001866:	7b3b      	ldrb	r3, [r7, #12]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b21a      	sxth	r2, r3
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001874:	893b      	ldrh	r3, [r7, #8]
 8001876:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800187a:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800187c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <BNO080_receivePacket+0x84>
	{
		//Packet is empty
		return (0); //All done
 8001884:	2300      	movs	r3, #0
 8001886:	e020      	b.n	80018ca <BNO080_receivePacket+0xc6>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	3b04      	subs	r3, #4
 800188c:	b29b      	uxth	r3, r3
 800188e:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001890:	2300      	movs	r3, #0
 8001892:	81fb      	strh	r3, [r7, #14]
 8001894:	e00e      	b.n	80018b4 <BNO080_receivePacket+0xb0>
	{
		incoming = SPI2_SendByte(0xFF);
 8001896:	20ff      	movs	r0, #255	@ 0xff
 8001898:	f7ff fbb0 	bl	8000ffc <SPI2_SendByte>
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80018a4:	d803      	bhi.n	80018ae <BNO080_receivePacket+0xaa>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	490c      	ldr	r1, [pc, #48]	@ (80018dc <BNO080_receivePacket+0xd8>)
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	3301      	adds	r3, #1
 80018b2:	81fb      	strh	r3, [r7, #14]
 80018b4:	89fa      	ldrh	r2, [r7, #14]
 80018b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbeb      	blt.n	8001896 <BNO080_receivePacket+0x92>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80018be:	2201      	movs	r2, #1
 80018c0:	2101      	movs	r1, #1
 80018c2:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <BNO080_receivePacket+0xd0>)
 80018c4:	f001 fe80 	bl	80035c8 <HAL_GPIO_WritePin>
	return (1); //We're done!
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	200001bc 	.word	0x200001bc
 80018dc:	200001c0 	.word	0x200001c0

080018e0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	460a      	mov	r2, r1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	4613      	mov	r3, r2
 80018ee:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	3304      	adds	r3, #4
 80018f4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80018f6:	f7ff ff63 	bl	80017c0 <BNO080_waitForSPI>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001900:	2300      	movs	r3, #0
 8001902:	e032      	b.n	800196a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001904:	2200      	movs	r2, #0
 8001906:	2101      	movs	r1, #1
 8001908:	481a      	ldr	r0, [pc, #104]	@ (8001974 <BNO080_sendPacket+0x94>)
 800190a:	f001 fe5d 	bl	80035c8 <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fb73 	bl	8000ffc <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	121b      	asrs	r3, r3, #8
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb6d 	bl	8000ffc <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb69 	bl	8000ffc <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <BNO080_sendPacket+0x98>)
 800192e:	5cd2      	ldrb	r2, [r2, r3]
 8001930:	1c51      	adds	r1, r2, #1
 8001932:	b2c8      	uxtb	r0, r1
 8001934:	4910      	ldr	r1, [pc, #64]	@ (8001978 <BNO080_sendPacket+0x98>)
 8001936:	54c8      	strb	r0, [r1, r3]
 8001938:	4610      	mov	r0, r2
 800193a:	f7ff fb5f 	bl	8000ffc <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
 8001942:	e008      	b.n	8001956 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <BNO080_sendPacket+0x9c>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fb56 	bl	8000ffc <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	429a      	cmp	r2, r3
 800195c:	d3f2      	bcc.n	8001944 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4804      	ldr	r0, [pc, #16]	@ (8001974 <BNO080_sendPacket+0x94>)
 8001964:	f001 fe30 	bl	80035c8 <HAL_GPIO_WritePin>

	return (1);
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	20000240 	.word	0x20000240
 800197c:	200001c0 	.word	0x200001c0

08001980 <IMU_Init>:
 *  Created on: Apr 20, 2025
 *      Author: robot
 */
#include "IMU.h"

void IMU_Init(){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	BNO080_Initialization();
 8001984:	f7ff faca 	bl	8000f1c <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 8001988:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800198c:	f7ff fe23 	bl	80015d6 <BNO080_enableRotationVector>
	BNO080_enableLinearAccelerometer(2500);
 8001990:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001994:	f7ff fe2e 	bl	80015f4 <BNO080_enableLinearAccelerometer>
	BNO080_enableGyro(2500);
 8001998:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800199c:	f7ff fe39 	bl	8001612 <BNO080_enableGyro>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <IMU_Run>:

float data[10] = {10,1,2,3,4,5,6,7,8,9};

uint32_t lasttime2 = 0;
void IMU_Run(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - lasttime2 >= 10) {
 80019aa:	f001 fb17 	bl	8002fdc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <IMU_Run+0xc0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b09      	cmp	r3, #9
 80019b8:	d950      	bls.n	8001a5c <IMU_Run+0xb8>

			lasttime2 = HAL_GetTick();
 80019ba:	f001 fb0f 	bl	8002fdc <HAL_GetTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <IMU_Run+0xc0>)
 80019c2:	6013      	str	r3, [r2, #0]
			int avail = BNO080_dataAvailable();
 80019c4:	f7ff fb32 	bl	800102c <BNO080_dataAvailable>
 80019c8:	6078      	str	r0, [r7, #4]
			if(avail == 1){
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d145      	bne.n	8001a5c <IMU_Run+0xb8>
				  //Quats
				  data[0] = BNO080_getQuatReal();
 80019d0:	f7ff fd28 	bl	8001424 <BNO080_getQuatReal>
 80019d4:	eef0 7a40 	vmov.f32	s15, s0
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <IMU_Run+0xc4>)
 80019da:	edc3 7a00 	vstr	s15, [r3]
				  data[1] = BNO080_getQuatI();
 80019de:	f7ff fcdf 	bl	80013a0 <BNO080_getQuatI>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <IMU_Run+0xc4>)
 80019e8:	edc3 7a01 	vstr	s15, [r3, #4]
				  data[2] = BNO080_getQuatJ();
 80019ec:	f7ff fcee 	bl	80013cc <BNO080_getQuatJ>
 80019f0:	eef0 7a40 	vmov.f32	s15, s0
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <IMU_Run+0xc4>)
 80019f6:	edc3 7a02 	vstr	s15, [r3, #8]
				  data[3] = BNO080_getQuatK();
 80019fa:	f7ff fcfd 	bl	80013f8 <BNO080_getQuatK>
 80019fe:	eef0 7a40 	vmov.f32	s15, s0
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <IMU_Run+0xc4>)
 8001a04:	edc3 7a03 	vstr	s15, [r3, #12]
				  //Linear Accels
				  data[4] = BNO080_getLinAccelX();
 8001a08:	f7ff fd38 	bl	800147c <BNO080_getLinAccelX>
 8001a0c:	eef0 7a40 	vmov.f32	s15, s0
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <IMU_Run+0xc4>)
 8001a12:	edc3 7a04 	vstr	s15, [r3, #16]
				  data[5] = BNO080_getLinAccelY();
 8001a16:	f7ff fd47 	bl	80014a8 <BNO080_getLinAccelY>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <IMU_Run+0xc4>)
 8001a20:	edc3 7a05 	vstr	s15, [r3, #20]
				  data[6] = BNO080_getLinAccelZ();
 8001a24:	f7ff fd56 	bl	80014d4 <BNO080_getLinAccelZ>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <IMU_Run+0xc4>)
 8001a2e:	edc3 7a06 	vstr	s15, [r3, #24]
				  //Angular Velocities
				  data[7] = BNO080_getGyroX();
 8001a32:	f7ff fd71 	bl	8001518 <BNO080_getGyroX>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <IMU_Run+0xc4>)
 8001a3c:	edc3 7a07 	vstr	s15, [r3, #28]
				  data[8] = BNO080_getGyroY();
 8001a40:	f7ff fd80 	bl	8001544 <BNO080_getGyroY>
 8001a44:	eef0 7a40 	vmov.f32	s15, s0
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <IMU_Run+0xc4>)
 8001a4a:	edc3 7a08 	vstr	s15, [r3, #32]
				  data[9] = BNO080_getGyroY();
 8001a4e:	f7ff fd79 	bl	8001544 <BNO080_getGyroY>
 8001a52:	eef0 7a40 	vmov.f32	s15, s0
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <IMU_Run+0xc4>)
 8001a58:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			}
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000288 	.word	0x20000288
 8001a68:	20000008 	.word	0x20000008

08001a6c <IMU_GetData>:

float* IMU_GetData(float* imu_data){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++){
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00c      	b.n	8001a94 <IMU_GetData+0x28>
		imu_data[i] = data[i];
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4909      	ldr	r1, [pc, #36]	@ (8001aa8 <IMU_GetData+0x3c>)
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	440a      	add	r2, r1
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++){
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b09      	cmp	r3, #9
 8001a98:	ddef      	ble.n	8001a7a <IMU_GetData+0xe>
	}
	return imu_data;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	20000008 	.word	0x20000008

08001aac <IMU_StartCalibration>:

void IMU_StartCalibration(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	BNO080_calibrateAll();
 8001ab0:	f7ff fdbe 	bl	8001630 <BNO080_calibrateAll>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <IMU_CalibrationStatus>:

uint32_t*IMU_CalibrationStatus(uint32_t* buff){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	buff[0] = (uint32_t)(BNO080_getQuatRadianAccuracy()*100);
 8001ac0:	f7ff fcc6 	bl	8001450 <BNO080_getQuatRadianAccuracy>
 8001ac4:	eef0 7a40 	vmov.f32	s15, s0
 8001ac8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001b04 <IMU_CalibrationStatus+0x4c>
 8001acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad4:	ee17 2a90 	vmov	r2, s15
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
	buff[1] = BNO080_getLinAccelAccuracy();
 8001adc:	f7ff fd10 	bl	8001500 <BNO080_getLinAccelAccuracy>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	601a      	str	r2, [r3, #0]
	buff[2] = BNO080_getGyroAccuracy();
 8001aea:	f7ff fd41 	bl	8001570 <BNO080_getGyroAccuracy>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3308      	adds	r3, #8
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	42c80000 	.word	0x42c80000

08001b08 <IMU_EndCalibration>:

void IMU_EndCalibration(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	BNO080_endCalibration();
 8001b0c:	f7ff fd97 	bl	800163e <BNO080_endCalibration>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <PHT_GetPressure>:

	PHT_Pressure = (((DIGITAL_PRESSURE * sens) / 2097152) - offset) / 32768;
}

int32_t PHT_GetPressure(void)// pressure in millibars
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	return PHT_Pressure;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <PHT_GetPressure+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000290 	.word	0x20000290

08001b2c <PHT_GetTemperature>:

int32_t PHT_GetTemperature(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	return PHT_Temperature;
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <PHT_GetTemperature+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000028c 	.word	0x2000028c
 8001b44:	00000000 	.word	0x00000000

08001b48 <calc_temp>:
	TIM2 -> PSC = 41U;


}

void calc_temp(){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
	uint16_t t = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	82fb      	strh	r3, [r7, #22]
	double temp_d;

	read = read >> 1;
 8001b52:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <calc_temp+0xa0>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <calc_temp+0xa0>)
 8001b5c:	801a      	strh	r2, [r3, #0]
	t = read << 5;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <calc_temp+0xa0>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	82fb      	strh	r3, [r7, #22]

	for (int i = 6; i > -5; i--) {
 8001b66:	2306      	movs	r3, #6
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	e01e      	b.n	8001baa <calc_temp+0x62>
		if ((t & 0x8000) == 0x8000){
 8001b6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da14      	bge.n	8001b9e <calc_temp+0x56>
			temp_d += pow(2,i);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7fe fccd 	bl	8000514 <__aeabi_i2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	ec43 2b11 	vmov	d1, r2, r3
 8001b82:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001be0 <calc_temp+0x98>
 8001b86:	f009 fb35 	bl	800b1f4 <pow>
 8001b8a:	ec53 2b10 	vmov	r2, r3, d0
 8001b8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b92:	f7fe fb73 	bl	800027c <__adddf3>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		t <<= 1;
 8001b9e:	8afb      	ldrh	r3, [r7, #22]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	82fb      	strh	r3, [r7, #22]
	for (int i = 6; i > -5; i--) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f113 0f04 	cmn.w	r3, #4
 8001bb0:	dadc      	bge.n	8001b6c <calc_temp+0x24>
	}

	temp_final = (int)(temp_d * 100);
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <calc_temp+0xa4>)
 8001bb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bbc:	f7fe fd14 	bl	80005e8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ffbe 	bl	8000b48 <__aeabi_d2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <calc_temp+0xa8>)
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40000000 	.word	0x40000000
 8001be8:	20000298 	.word	0x20000298
 8001bec:	40590000 	.word	0x40590000
 8001bf0:	20000294 	.word	0x20000294

08001bf4 <switch_state>:

void switch_state(TempProbe_STATE ns){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	TIM2->CR1 &= 0xFFFE; //PAUSES COUNTER
 8001bfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c08:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
	TIM2->CNT = (int32_t)0; //RESET COUNT
 8001c10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM2->DIER &= -1U ^ 7U; //DISABLES ALL INTERRUPT FLAGS
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c22:	f023 0307 	bic.w	r3, r3, #7
 8001c26:	60d3      	str	r3, [r2, #12]
	TIM2->CCER &= -1 ^ 1U; //DISABLE CCR1
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= -1 ^ 16U;	//DISABLE CCR2
 8001c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c42:	f023 0310 	bic.w	r3, r3, #16
 8001c46:	6213      	str	r3, [r2, #32]

	TIM2->CCR1 = 0x0; //DISABLE CCR1 COUUNT
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0x0; //DISABLE CCR2 COUNT
 8001c50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c54:	2200      	movs	r2, #0
 8001c56:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->ARR = 0x1; //DISABLE ARR
 8001c58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

	switch (ns) {
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	f200 80b0 	bhi.w	8001dc8 <switch_state+0x1d4>
 8001c68:	a201      	add	r2, pc, #4	@ (adr r2, 8001c70 <switch_state+0x7c>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c8d 	.word	0x08001c8d
 8001c74:	08001ce7 	.word	0x08001ce7
 8001c78:	08001da5 	.word	0x08001da5
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001d27 	.word	0x08001d27
 8001c84:	08001d67 	.word	0x08001d67
 8001c88:	08001dc9 	.word	0x08001dc9
	    case s_CONV_RESET:
		case s_READ_RESET:
			TIM2->ARR = 1000;
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
			TIM2->CCR1 = 500;
 8001c96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c9a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c9e:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->CCR2 = 575;
 8001ca0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ca4:	f240 223f 	movw	r2, #575	@ 0x23f
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38

			TIM2->DIER |= 7U; //ENABLE ALL INTERRUPTS
 8001caa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cb4:	f043 0307 	orr.w	r3, r3, #7
 8001cb8:	60d3      	str	r3, [r2, #12]
			TIM2->CCER |= 1U; //ENABLE CCR1
 8001cba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
			TIM2->CCER |= 16U; //ENABLE CCR2
 8001cca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6213      	str	r3, [r2, #32]

			HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2180      	movs	r1, #128	@ 0x80
 8001cde:	4842      	ldr	r0, [pc, #264]	@ (8001de8 <switch_state+0x1f4>)
 8001ce0:	f001 fc72 	bl	80035c8 <HAL_GPIO_WritePin>
			break;
 8001ce4:	e070      	b.n	8001dc8 <switch_state+0x1d4>

		case s_CONV_WRITE:
			TIM2->ARR = 100;
 8001ce6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cea:	2264      	movs	r2, #100	@ 0x64
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
			TIM2->CCR1 = 60;
 8001cee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cf2:	223c      	movs	r2, #60	@ 0x3c
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->DIER |= 3U; //ENABLE ARR & CCR1
 8001cf6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d00:	f043 0303 	orr.w	r3, r3, #3
 8001d04:	60d3      	str	r3, [r2, #12]
			TIM2->CCER |= 1U; //ENABLE CCR1
 8001d06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]

			//SET WRITE ARRAY
			write_index = 0;
 8001d16:	4b35      	ldr	r3, [pc, #212]	@ (8001dec <switch_state+0x1f8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
			to_write = command_CONVERT_T;
 8001d1c:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <switch_state+0x1fc>)
 8001d1e:	f244 42cc 	movw	r2, #17612	@ 0x44cc
 8001d22:	801a      	strh	r2, [r3, #0]
			break;
 8001d24:	e050      	b.n	8001dc8 <switch_state+0x1d4>

		case s_READ_WRITE:
			TIM2->ARR = 100;
 8001d26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d2a:	2264      	movs	r2, #100	@ 0x64
 8001d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
			TIM2->CCR1 = 60;
 8001d2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d32:	223c      	movs	r2, #60	@ 0x3c
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->DIER |= 3U; //ENABLE ARR &CCR1
 8001d36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d40:	f043 0303 	orr.w	r3, r3, #3
 8001d44:	60d3      	str	r3, [r2, #12]
			TIM2->CCER |= 1U; //ENABLE CCR1
 8001d46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]

			//SET WRITE ARRAY
			write_index = 0;
 8001d56:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <switch_state+0x1f8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
			to_write = command_READ_SPAD;
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <switch_state+0x1fc>)
 8001d5e:	f64b 62cc 	movw	r2, #48844	@ 0xbecc
 8001d62:	801a      	strh	r2, [r3, #0]
			break;
 8001d64:	e030      	b.n	8001dc8 <switch_state+0x1d4>

		case s_READ:
			TIM2->ARR = 100;
 8001d66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d6a:	2264      	movs	r2, #100	@ 0x64
 8001d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
			TIM2->CCR1 = 15;
 8001d6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d72:	220f      	movs	r2, #15
 8001d74:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM2->DIER |= 3U; // ENABLE ARR & CCR1
 8001d76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d80:	f043 0303 	orr.w	r3, r3, #3
 8001d84:	60d3      	str	r3, [r2, #12]
			TIM2->CCER |= 1U; //ENABLE CCR1
 8001d86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]

			read_index = 0;
 8001d96:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <switch_state+0x200>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
			read = 0;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <switch_state+0x204>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	801a      	strh	r2, [r3, #0]
			break;
 8001da2:	e011      	b.n	8001dc8 <switch_state+0x1d4>

		case s_CONVERT:
			TIM2->ARR = 1000000;
 8001da4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <switch_state+0x208>)
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
			TIM2->DIER |= 1U; // ENABLE ARR
 8001dac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	60d3      	str	r3, [r2, #12]

			conv_skip_1_arr = 0;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <switch_state+0x20c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			calc_temp();
 8001dc2:	f7ff fec1 	bl	8001b48 <calc_temp>
			break;
 8001dc6:	bf00      	nop

		case s_STOP:
			break;
		}

	state = ns;
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <switch_state+0x210>)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	7013      	strb	r3, [r2, #0]
	TIM2->CR1 |= 1U; //ENABLE TIMER
 8001dce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	200002a4 	.word	0x200002a4
 8001df0:	20000032 	.word	0x20000032
 8001df4:	2000029c 	.word	0x2000029c
 8001df8:	20000298 	.word	0x20000298
 8001dfc:	000f4240 	.word	0x000f4240
 8001e00:	200002a8 	.word	0x200002a8
 8001e04:	20000030 	.word	0x20000030

08001e08 <s_Reset>:

void s_Reset(int iflag, TempProbe_STATE ns){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
	switch(iflag & 7U){
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d019      	beq.n	8001e52 <s_Reset+0x4a>
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d823      	bhi.n	8001e6a <s_Reset+0x62>
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d002      	beq.n	8001e2c <s_Reset+0x24>
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d00d      	beq.n	8001e46 <s_Reset+0x3e>

		case 0x4: //CCR2
			response = 1U ^ HAL_GPIO_ReadPin(TEMPPROBE_PORT, TEMPPROBE_PIN);
			break;
	}
}
 8001e2a:	e01e      	b.n	8001e6a <s_Reset+0x62>
			if(response){
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <s_Reset+0x6c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <s_Reset+0x36>
				switch_state(ns);
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fedc 	bl	8001bf4 <switch_state>
			break;
 8001e3c:	e015      	b.n	8001e6a <s_Reset+0x62>
				switch_state(s_CONV_RESET);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff fed8 	bl	8001bf4 <switch_state>
			break;
 8001e44:	e011      	b.n	8001e6a <s_Reset+0x62>
			HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 1);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	480b      	ldr	r0, [pc, #44]	@ (8001e78 <s_Reset+0x70>)
 8001e4c:	f001 fbbc 	bl	80035c8 <HAL_GPIO_WritePin>
			break;
 8001e50:	e00b      	b.n	8001e6a <s_Reset+0x62>
			response = 1U ^ HAL_GPIO_ReadPin(TEMPPROBE_PORT, TEMPPROBE_PIN);
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	4808      	ldr	r0, [pc, #32]	@ (8001e78 <s_Reset+0x70>)
 8001e56:	f001 fb9f 	bl	8003598 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f083 0301 	eor.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <s_Reset+0x6c>)
 8001e66:	601a      	str	r2, [r3, #0]
			break;
 8001e68:	bf00      	nop
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200002a0 	.word	0x200002a0
 8001e78:	40021000 	.word	0x40021000

08001e7c <s_Write>:

void s_Write(int iflag, TempProbe_STATE ns){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
	switch(iflag & 3U){
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d002      	beq.n	8001e98 <s_Write+0x1c>
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d027      	beq.n	8001ee6 <s_Write+0x6a>

		case 0x2: //CCR1
			HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 1);
			break;
	}
}
 8001e96:	e02c      	b.n	8001ef2 <s_Write+0x76>
			if(write_index != 16){
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <s_Write+0x80>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d01d      	beq.n	8001edc <s_Write+0x60>
				int bit = to_write & 1U;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <s_Write+0x84>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
				HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	4815      	ldr	r0, [pc, #84]	@ (8001f04 <s_Write+0x88>)
 8001eb0:	f001 fb8a 	bl	80035c8 <HAL_GPIO_WritePin>
				if(bit){
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <s_Write+0x48>
					HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 1);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	4811      	ldr	r0, [pc, #68]	@ (8001f04 <s_Write+0x88>)
 8001ec0:	f001 fb82 	bl	80035c8 <HAL_GPIO_WritePin>
				to_write = to_write >> 1;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <s_Write+0x84>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <s_Write+0x84>)
 8001ece:	801a      	strh	r2, [r3, #0]
				write_index++;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <s_Write+0x80>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <s_Write+0x80>)
 8001ed8:	6013      	str	r3, [r2, #0]
			break;
 8001eda:	e00a      	b.n	8001ef2 <s_Write+0x76>
				switch_state(ns);
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe88 	bl	8001bf4 <switch_state>
			break;
 8001ee4:	e005      	b.n	8001ef2 <s_Write+0x76>
			HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 1);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2180      	movs	r1, #128	@ 0x80
 8001eea:	4806      	ldr	r0, [pc, #24]	@ (8001f04 <s_Write+0x88>)
 8001eec:	f001 fb6c 	bl	80035c8 <HAL_GPIO_WritePin>
			break;
 8001ef0:	bf00      	nop
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002a4 	.word	0x200002a4
 8001f00:	20000032 	.word	0x20000032
 8001f04:	40021000 	.word	0x40021000

08001f08 <s_Read>:

void s_Read(int iflag){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	switch(iflag & 3U){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d002      	beq.n	8001f20 <s_Read+0x18>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d013      	beq.n	8001f46 <s_Read+0x3e>
			read = read >> 1;
			read |= read_bit << 15;
			read_index++;
			break;
	}
}
 8001f1e:	e02f      	b.n	8001f80 <s_Read+0x78>
			if(read_index != 16){
 8001f20:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <s_Read+0x80>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d00a      	beq.n	8001f3e <s_Read+0x36>
					HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	4817      	ldr	r0, [pc, #92]	@ (8001f8c <s_Read+0x84>)
 8001f2e:	f001 fb4b 	bl	80035c8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TEMPPROBE_PORT, TEMPPROBE_PIN, 1);
 8001f32:	2201      	movs	r2, #1
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	4815      	ldr	r0, [pc, #84]	@ (8001f8c <s_Read+0x84>)
 8001f38:	f001 fb46 	bl	80035c8 <HAL_GPIO_WritePin>
			break;
 8001f3c:	e020      	b.n	8001f80 <s_Read+0x78>
					switch_state(s_CONV_RESET);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fe58 	bl	8001bf4 <switch_state>
			break;
 8001f44:	e01c      	b.n	8001f80 <s_Read+0x78>
			int read_bit = HAL_GPIO_ReadPin(TEMPPROBE_PORT, TEMPPROBE_PIN);
 8001f46:	2180      	movs	r1, #128	@ 0x80
 8001f48:	4810      	ldr	r0, [pc, #64]	@ (8001f8c <s_Read+0x84>)
 8001f4a:	f001 fb25 	bl	8003598 <HAL_GPIO_ReadPin>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	60fb      	str	r3, [r7, #12]
			read = read >> 1;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <s_Read+0x88>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <s_Read+0x88>)
 8001f5c:	801a      	strh	r2, [r3, #0]
			read |= read_bit << 15;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	03db      	lsls	r3, r3, #15
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <s_Read+0x88>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <s_Read+0x88>)
 8001f72:	801a      	strh	r2, [r3, #0]
			read_index++;
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <s_Read+0x80>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <s_Read+0x80>)
 8001f7c:	6013      	str	r3, [r2, #0]
			break;
 8001f7e:	bf00      	nop
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000029c 	.word	0x2000029c
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	20000298 	.word	0x20000298

08001f94 <s_Convert>:

void s_Convert(int iflag){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	if(conv_skip_1_arr){
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <s_Convert+0x28>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <s_Convert+0x18>
		switch_state(s_READ_RESET);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f7ff fe25 	bl	8001bf4 <switch_state>
	}
	else{
		conv_skip_1_arr  = 1;
	}
}
 8001faa:	e002      	b.n	8001fb2 <s_Convert+0x1e>
		conv_skip_1_arr  = 1;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <s_Convert+0x28>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200002a8 	.word	0x200002a8

08001fc0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
	uint16_t iflag = TIM2 -> SR;
 8001fc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	80fb      	strh	r3, [r7, #6]

	switch (state) {
 8001fce:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <TIM2_IRQHandler+0x98>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d832      	bhi.n	800203c <TIM2_IRQHandler+0x7c>
 8001fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <TIM2_IRQHandler+0x1c>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08001ff9 	.word	0x08001ff9
 8001fe0:	08002005 	.word	0x08002005
 8001fe4:	08002011 	.word	0x08002011
 8001fe8:	0800201b 	.word	0x0800201b
 8001fec:	08002027 	.word	0x08002027
 8001ff0:	08002033 	.word	0x08002033
 8001ff4:	0800203d 	.word	0x0800203d
		case s_CONV_RESET:
			s_Reset(iflag, s_CONV_WRITE);
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff03 	bl	8001e08 <s_Reset>
			break;
 8002002:	e01b      	b.n	800203c <TIM2_IRQHandler+0x7c>

		case s_CONV_WRITE:
			s_Write(iflag, s_CONVERT);
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	2102      	movs	r1, #2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff37 	bl	8001e7c <s_Write>
			break;
 800200e:	e015      	b.n	800203c <TIM2_IRQHandler+0x7c>

		case s_CONVERT:
			s_Convert(iflag);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffbe 	bl	8001f94 <s_Convert>
			break;
 8002018:	e010      	b.n	800203c <TIM2_IRQHandler+0x7c>

		case s_READ_RESET:
			s_Reset(iflag, s_READ_WRITE);
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	2104      	movs	r1, #4
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fef2 	bl	8001e08 <s_Reset>
			break;
 8002024:	e00a      	b.n	800203c <TIM2_IRQHandler+0x7c>

		case s_READ_WRITE:
			s_Write(iflag, s_READ);
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	2105      	movs	r1, #5
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff26 	bl	8001e7c <s_Write>
			break;
 8002030:	e004      	b.n	800203c <TIM2_IRQHandler+0x7c>

		case s_READ:
			s_Read(iflag);
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff67 	bl	8001f08 <s_Read>
			break;
 800203a:	bf00      	nop

		case s_STOP:
			break;
		}

	TIM2 -> SR &= 0xFFF8; //Clear Interrupt Flags
 800203c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002046:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 800204a:	4013      	ands	r3, r2
 800204c:	610b      	str	r3, [r1, #16]
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000030 	.word	0x20000030

0800205c <TempProbe_GetConn>:

void TempProbe_Stop(){
	switch_state(s_STOP);
}

TempProbe_Connection TempProbe_GetConn(){
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
	if(response){
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <TempProbe_GetConn+0x1c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <TempProbe_GetConn+0x10>
		return TempProbe_OK;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <TempProbe_GetConn+0x12>
	}
	return TempProbe_DC;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	200002a0 	.word	0x200002a0

0800207c <TempProbe_GetTemp>:

int TempProbe_GetTemp(){
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	return temp_final;
 8002080:	4b03      	ldr	r3, [pc, #12]	@ (8002090 <TempProbe_GetTemp+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000294 	.word	0x20000294

08002094 <mpininit>:
}

//configure multiple pins the same way
void mpininit(GPIO_TypeDef *port, uint32_t *pins, uint32_t pincount,
				uint32_t mode, uint32_t type, uint32_t speed, uint32_t pupd,
				AFSEL_t afsel){
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < pincount; i++){
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e0bb      	b.n	8002220 <mpininit+0x18c>
		port->MODER &= ~(MSK2B << (pins[i] << 1));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	440a      	add	r2, r1
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	0052      	lsls	r2, r2, #1
 80020b8:	2103      	movs	r1, #3
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	43d2      	mvns	r2, r2
 80020c0:	401a      	ands	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	601a      	str	r2, [r3, #0]
		port->MODER |= (mode << (pins[i] << 1));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	440b      	add	r3, r1
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	601a      	str	r2, [r3, #0]

		port->OTYPER &= ~(MSK1B << pins[i]);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	440a      	add	r2, r1
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	43d2      	mvns	r2, r2
 80020f8:	401a      	ands	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]
		port->OTYPER |= (type << pins[i]);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	440b      	add	r3, r1
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a39      	ldr	r1, [r7, #32]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]

		port->OSPEEDR &= ~(MSK2B << (pins[i] << 1));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	440a      	add	r2, r1
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	0052      	lsls	r2, r2, #1
 8002128:	2103      	movs	r1, #3
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	43d2      	mvns	r2, r2
 8002130:	401a      	ands	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	609a      	str	r2, [r3, #8]
		port->OSPEEDR |= (speed << (pins[i] << 1));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	440b      	add	r3, r1
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	609a      	str	r2, [r3, #8]

		port->PUPDR &= ~(MSK2B << (pins[i] << 1));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	440a      	add	r2, r1
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	0052      	lsls	r2, r2, #1
 8002162:	2103      	movs	r1, #3
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	43d2      	mvns	r2, r2
 800216a:	401a      	ands	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	60da      	str	r2, [r3, #12]
		port->PUPDR |= ~(pupd << (pins[i] << 1));
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	440b      	add	r3, r1
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	60da      	str	r2, [r3, #12]

		if(pins[i] > 7){
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4413      	add	r3, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b07      	cmp	r3, #7
 800219a:	d920      	bls.n	80021de <mpininit+0x14a>
			port->AFR[1] &= ~(MSK4B << ((pins[i]-8) << 2));
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	440a      	add	r2, r1
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	3a08      	subs	r2, #8
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	210f      	movs	r1, #15
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	43d2      	mvns	r2, r2
 80021b6:	401a      	ands	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
			port->AFR[1] |= (afsel << ((pins[i]-8) << 2));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	4402      	add	r2, r0
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	3a08      	subs	r2, #8
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	fa01 f202 	lsl.w	r2, r1, r2
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24
 80021dc:	e01d      	b.n	800221a <mpininit+0x186>
		}
		else{
			port->AFR[0] &= ~(MSK4B << (pins[i] << 2));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	440a      	add	r2, r1
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	210f      	movs	r1, #15
 80021f0:	fa01 f202 	lsl.w	r2, r1, r2
 80021f4:	43d2      	mvns	r2, r2
 80021f6:	401a      	ands	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	621a      	str	r2, [r3, #32]
			port->AFR[0] |= (afsel << (pins[i] << 2));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	68b8      	ldr	r0, [r7, #8]
 800220a:	4402      	add	r2, r0
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	621a      	str	r2, [r3, #32]
	for(int i = 0; i < pincount; i++){
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	f63f af3f 	bhi.w	80020a8 <mpininit+0x14>
		}
	}

}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <MX_GPIO_Init+0x84>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <MX_GPIO_Init+0x84>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_GPIO_Init+0x84>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <MX_GPIO_Init+0x84>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <MX_GPIO_Init+0x84>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]

}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022c4:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	@ (8002314 <MX_I2C2_Init+0x54>)
 80022c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022ca:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022cc:	4a12      	ldr	r2, [pc, #72]	@ (8002318 <MX_I2C2_Init+0x58>)
 80022ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	@ (8002310 <MX_I2C2_Init+0x50>)
 80022fe:	f001 f997 	bl	8003630 <HAL_I2C_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002308:	f000 f8e0 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200002ac 	.word	0x200002ac
 8002314:	40005800 	.word	0x40005800
 8002318:	000186a0 	.word	0x000186a0

0800231c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <HAL_I2C_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_I2C_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_I2C_MspInit+0x88>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_I2C_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800235a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002360:	2312      	movs	r3, #18
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800236c:	2304      	movs	r3, #4
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <HAL_I2C_MspInit+0x8c>)
 8002378:	f000 ff72 	bl	8003260 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <HAL_I2C_MspInit+0x88>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <HAL_I2C_MspInit+0x88>)
 8002386:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800238a:	6413      	str	r3, [r2, #64]	@ 0x40
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_I2C_MspInit+0x88>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	@ 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40005800 	.word	0x40005800
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020400 	.word	0x40020400

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b2:	f000 fdad 	bl	8002f10 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <main+0x48>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <main+0x48>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <main+0x48>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d2:	f000 f811 	bl	80023f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d6:	f7ff ff2f 	bl	8002238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80023da:	f007 fa43 	bl	8009864 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 80023de:	f7ff ff6f 	bl	80022c0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80023e2:	f000 fa0b 	bl	80027fc <MX_SPI2_Init>
  MX_TIM1_Init();
 80023e6:	f000 fcf7 	bl	8002dd8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sw_test_main();
 80023ea:	f000 f9cd 	bl	8002788 <sw_test_main>
  while (1)
 80023ee:	bf00      	nop
 80023f0:	e7fd      	b.n	80023ee <main+0x42>
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	@ 0x50
 80023fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	2230      	movs	r2, #48	@ 0x30
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f008 f962 	bl	800a6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <SystemClock_Config+0xcc>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	4a27      	ldr	r2, [pc, #156]	@ (80024c4 <SystemClock_Config+0xcc>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	@ 0x40
 800242c:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <SystemClock_Config+0xcc>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <SystemClock_Config+0xd0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <SystemClock_Config+0xd0>)
 8002442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <SystemClock_Config+0xd0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002454:	2301      	movs	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245e:	2302      	movs	r3, #2
 8002460:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002462:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002468:	2304      	movs	r3, #4
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800246c:	23a8      	movs	r3, #168	@ 0xa8
 800246e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002470:	2302      	movs	r3, #2
 8002472:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002474:	2307      	movs	r3, #7
 8002476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002478:	f107 0320 	add.w	r3, r7, #32
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fc6d 	bl	8004d5c <HAL_RCC_OscConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002488:	f000 f820 	bl	80024cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800248c:	230f      	movs	r3, #15
 800248e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002490:	2302      	movs	r3, #2
 8002492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002498:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800249c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800249e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80024a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2105      	movs	r1, #5
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fece 	bl	800524c <HAL_RCC_ClockConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024b6:	f000 f809 	bl	80024cc <Error_Handler>
  }
}
 80024ba:	bf00      	nop
 80024bc:	3750      	adds	r7, #80	@ 0x50
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <Error_Handler+0x8>

080024d8 <not_implemented>:
uint32_t com_size[255];

//sensor statuses


int not_implemented(uint32_t size, uint8_t *args){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(args, size);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f007 fa8b 	bl	8009a04 <CDC_Transmit_FS>
	return 2;
 80024ee:	2302      	movs	r3, #2
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <terminate>:

/*
 * Empty the buffer and await new commands
 */
int terminate(uint32_t size, uint8_t *args)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
	new = 0;
 8002502:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <terminate+0x20>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000341 	.word	0x20000341

0800251c <blink>:
 * Blink an LED
 * Debug command
 * args [command, N/A, N/A]
 */
int blink(uint32_t size, uint8_t *args)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002526:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800252a:	4807      	ldr	r0, [pc, #28]	@ (8002548 <blink+0x2c>)
 800252c:	f001 f865 	bl	80035fa <HAL_GPIO_TogglePin>
	CDC_Transmit_FS(args, size);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	6838      	ldr	r0, [r7, #0]
 8002538:	f007 fa64 	bl	8009a04 <CDC_Transmit_FS>
	return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020c00 	.word	0x40020c00

0800254c <motor>:
 * 
 * if index 8-11, sets an individual servo
 * args [command, index, value]
 */
int motor(uint32_t size, uint8_t *args)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	if(args[1] < 8)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d809      	bhi.n	8002574 <motor+0x28>
	{
		set_thruster(args[1], args[2]);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3302      	adds	r3, #2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f000 fbe4 	bl	8002d3c <set_thruster>
	}
	
	if(args[1] >= 8 && args[1] <= 11)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b07      	cmp	r3, #7
	{
		//Servo_SetAngle(args[1] - 8, args[2]);
	}
	
	CDC_Transmit_FS(args, size);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	6838      	ldr	r0, [r7, #0]
 8002584:	f007 fa3e 	bl	8009a04 <CDC_Transmit_FS>
	return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <sensor>:

/*
 * Read a sensor
 */
int sensor(uint32_t size, uint8_t *args)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b094      	sub	sp, #80	@ 0x50
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	uint8_t* transmit = args;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t t_size = size;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	64bb      	str	r3, [r7, #72]	@ 0x48

	uint32_t external_temp;
	switch (args[1]) {
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d04f      	beq.n	8002650 <sensor+0xbc>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	dc77      	bgt.n	80026a4 <sensor+0x110>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <sensor+0x2a>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d02a      	beq.n	8002612 <sensor+0x7e>
 80025bc:	e072      	b.n	80026a4 <sensor+0x110>
	case 0: //IMU
		switch(args[2]){
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3302      	adds	r3, #2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d86a      	bhi.n	800269e <sensor+0x10a>
 80025c8:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <sensor+0x3c>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	080025e1 	.word	0x080025e1
 80025d4:	080025f3 	.word	0x080025f3
 80025d8:	080025f9 	.word	0x080025f9
 80025dc:	0800260b 	.word	0x0800260b
		case 0: //Data request
			float imu_data[10];
			transmit = (uint8_t*)IMU_GetData(imu_data);
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fa41 	bl	8001a6c <IMU_GetData>
 80025ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
			t_size = 40;
 80025ec:	2328      	movs	r3, #40	@ 0x28
 80025ee:	64bb      	str	r3, [r7, #72]	@ 0x48
			break;
 80025f0:	e00e      	b.n	8002610 <sensor+0x7c>

		case 1: //Begin Callibration
			IMU_StartCalibration();
 80025f2:	f7ff fa5b 	bl	8001aac <IMU_StartCalibration>
			break;
 80025f6:	e00b      	b.n	8002610 <sensor+0x7c>

		case 2: //read calibration status
			uint32_t calibration_data[3];
			transmit = (uint8_t*)IMU_CalibrationStatus(calibration_data);
 80025f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fa5b 	bl	8001ab8 <IMU_CalibrationStatus>
 8002602:	64f8      	str	r0, [r7, #76]	@ 0x4c
			t_size = 12;
 8002604:	230c      	movs	r3, #12
 8002606:	64bb      	str	r3, [r7, #72]	@ 0x48
			break;
 8002608:	e002      	b.n	8002610 <sensor+0x7c>

		case 3:
			IMU_EndCalibration();
 800260a:	f7ff fa7d 	bl	8001b08 <IMU_EndCalibration>
			break;
 800260e:	bf00      	nop
		}
		break;
 8002610:	e045      	b.n	800269e <sensor+0x10a>

	case 1: //External Temp
			if (args[2] == 0) {
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3302      	adds	r3, #2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <sensor+0x98>
				external_temp = TempProbe_GetTemp();
 800261c:	f7ff fd2e 	bl	800207c <TempProbe_GetTemp>
 8002620:	4603      	mov	r3, r0
 8002622:	647b      	str	r3, [r7, #68]	@ 0x44
				transmit = (uint8_t*)(&external_temp);
 8002624:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800262a:	e011      	b.n	8002650 <sensor+0xbc>
			}
			else if (args[2] == 1) {
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3302      	adds	r3, #2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10c      	bne.n	8002650 <sensor+0xbc>
				if (TempProbe_GetConn()) {
 8002636:	f7ff fd11 	bl	800205c <TempProbe_GetConn>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <sensor+0xb2>
					transmit = (uint8_t*)"OK";
 8002640:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <sensor+0x128>)
 8002642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002644:	e001      	b.n	800264a <sensor+0xb6>
				}
				else {
					transmit = (uint8_t*)"DC";
 8002646:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <sensor+0x12c>)
 8002648:	64fb      	str	r3, [r7, #76]	@ 0x4c
				}
			t_size = 4;
 800264a:	2304      	movs	r3, #4
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
			break;
 800264e:	e029      	b.n	80026a4 <sensor+0x110>
			}

	case 2: //Internal Temp
		if (args[2] == 0) {
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	3302      	adds	r3, #2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <sensor+0xdc>
			uint32_t int_temp = PHT_GetTemperature();
 800265a:	f7ff fa67 	bl	8001b2c <PHT_GetTemperature>
 800265e:	4603      	mov	r3, r0
 8002660:	637b      	str	r3, [r7, #52]	@ 0x34
			transmit = (uint8_t*)(&int_temp);
 8002662:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
			t_size = 4;
 8002668:	2304      	movs	r3, #4
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
			return 0;
 800266c:	2300      	movs	r3, #0
 800266e:	e020      	b.n	80026b2 <sensor+0x11e>
		}
		else if (args[2] == 1) {
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	3302      	adds	r3, #2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d10a      	bne.n	8002690 <sensor+0xfc>
			uint32_t int_press = PHT_GetPressure();
 800267a:	f7ff fa4b 	bl	8001b14 <PHT_GetPressure>
 800267e:	4603      	mov	r3, r0
 8002680:	633b      	str	r3, [r7, #48]	@ 0x30
			transmit = (uint8_t*)(&int_press);
 8002682:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
			t_size = 4;
 8002688:	2304      	movs	r3, #4
 800268a:	64bb      	str	r3, [r7, #72]	@ 0x48
			return 0;
 800268c:	2300      	movs	r3, #0
 800268e:	e010      	b.n	80026b2 <sensor+0x11e>
		}
		else if (args[2] == 2) {
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3302      	adds	r3, #2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d103      	bne.n	80026a2 <sensor+0x10e>
			//get humidity
			return 0;
 800269a:	2300      	movs	r3, #0
 800269c:	e009      	b.n	80026b2 <sensor+0x11e>
		break;
 800269e:	bf00      	nop
 80026a0:	e000      	b.n	80026a4 <sensor+0x110>
		}
		break;
 80026a2:	bf00      	nop
	}

	CDC_Transmit_FS(transmit, t_size);
 80026a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80026ac:	f007 f9aa 	bl	8009a04 <CDC_Transmit_FS>
	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3750      	adds	r7, #80	@ 0x50
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	0800c90c 	.word	0x0800c90c
 80026c0:	0800c910 	.word	0x0800c910

080026c4 <thrusters_cmd>:
/*
 * Set all thrusters in one command
 * args [command, val0, val1, val2, val3, val4, val5, val6, val7]
 */
int thrusters_cmd(uint32_t size, uint8_t *args)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	set_all_thrusters(&args[1]);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3301      	adds	r3, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fb56 	bl	8002d84 <set_all_thrusters>
	CDC_Transmit_FS(args, size);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f007 f990 	bl	8009a04 <CDC_Transmit_FS>
	return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <init>:

int init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	 * 0x53	(S)ensor read	(3 bytes)
	 * 0x54 (T)hrusters set (9 bytes) //set all thruster motors
	 *
	 */
	//set both arrays to 0
	memset(commands, (uint32_t) not_implemented, 255*sizeof(command));
 80026f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <init+0x78>)
 80026f6:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 80026fa:	4619      	mov	r1, r3
 80026fc:	481b      	ldr	r0, [pc, #108]	@ (800276c <init+0x7c>)
 80026fe:	f007 ffe7 	bl	800a6d0 <memset>
	memset(com_size, CMD_SIZE_NONE, 255*sizeof(uint32_t));
 8002702:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8002706:	2101      	movs	r1, #1
 8002708:	4819      	ldr	r0, [pc, #100]	@ (8002770 <init+0x80>)
 800270a:	f007 ffe1 	bl	800a6d0 <memset>

	commands[0x00] = terminate;
 800270e:	4b17      	ldr	r3, [pc, #92]	@ (800276c <init+0x7c>)
 8002710:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <init+0x84>)
 8002712:	601a      	str	r2, [r3, #0]
	com_size[0x00] = CMD_SIZE_NONE;
 8002714:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <init+0x80>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

	commands['B'] = blink;
 800271a:	4b14      	ldr	r3, [pc, #80]	@ (800276c <init+0x7c>)
 800271c:	4a16      	ldr	r2, [pc, #88]	@ (8002778 <init+0x88>)
 800271e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	com_size['B'] = CMD_SIZE_3BYTE;
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <init+0x80>)
 8002724:	2203      	movs	r2, #3
 8002726:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

	commands['M'] = motor;
 800272a:	4b10      	ldr	r3, [pc, #64]	@ (800276c <init+0x7c>)
 800272c:	4a13      	ldr	r2, [pc, #76]	@ (800277c <init+0x8c>)
 800272e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	com_size['M'] = CMD_SIZE_3BYTE;
 8002732:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <init+0x80>)
 8002734:	2203      	movs	r2, #3
 8002736:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	commands['S'] = sensor;
 800273a:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <init+0x7c>)
 800273c:	4a10      	ldr	r2, [pc, #64]	@ (8002780 <init+0x90>)
 800273e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	com_size['S'] = CMD_SIZE_3BYTE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <init+0x80>)
 8002744:	2203      	movs	r2, #3
 8002746:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

	commands['T'] = thrusters_cmd;
 800274a:	4b08      	ldr	r3, [pc, #32]	@ (800276c <init+0x7c>)
 800274c:	4a0d      	ldr	r2, [pc, #52]	@ (8002784 <init+0x94>)
 800274e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
	com_size['T'] = CMD_SIZE_9BYTE;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <init+0x80>)
 8002754:	2209      	movs	r2, #9
 8002756:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

	/*
	 * Initialize thrusters
	 */
	init_thrusters();
 800275a:	f000 fa05 	bl	8002b68 <init_thrusters>
	//PHT_Init();

	//TempProbe_Init();
	//TempProbe_Start();

	IMU_Init();
 800275e:	f7ff f90f 	bl	8001980 <IMU_Init>

	return 0;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	080024d9 	.word	0x080024d9
 800276c:	20000344 	.word	0x20000344
 8002770:	20000740 	.word	0x20000740
 8002774:	080024f9 	.word	0x080024f9
 8002778:	0800251d 	.word	0x0800251d
 800277c:	0800254d 	.word	0x0800254d
 8002780:	08002595 	.word	0x08002595
 8002784:	080026c5 	.word	0x080026c5

08002788 <sw_test_main>:

int sw_test_main(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
	init();
 800278e:	f7ff ffaf 	bl	80026f0 <init>
	uint32_t rbuffind = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
	uint32_t size = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
	uint8_t command = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		rbuffind = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
		 * at high clock rates, PHT_run makes the code run extremely slow
		 * probably due to generating too many interrupts or something
		 * probably just need to increase some values
		 */
		//PHT_Run();
		IMU_Run();
 80027a2:	f7ff f8ff 	bl	80019a4 <IMU_Run>
		}*/

		//buffer is null terminated by the receive code
		//loop exits if the size would make the next command go out of bounds or if
		//it hits a null byte as the next command (0x00 command sets new = 0)
		while(new){
 80027a6:	e01b      	b.n	80027e0 <sw_test_main+0x58>
			size = com_size[recv_buff[rbuffind]];
 80027a8:	4a10      	ldr	r2, [pc, #64]	@ (80027ec <sw_test_main+0x64>)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <sw_test_main+0x68>)
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	60bb      	str	r3, [r7, #8]
			command = recv_buff[rbuffind];
 80027ba:	4a0c      	ldr	r2, [pc, #48]	@ (80027ec <sw_test_main+0x64>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]

			commands[command](size, &recv_buff[rbuffind]);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <sw_test_main+0x6c>)
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4907      	ldr	r1, [pc, #28]	@ (80027ec <sw_test_main+0x64>)
 80027d0:	440a      	add	r2, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	68b8      	ldr	r0, [r7, #8]
 80027d6:	4798      	blx	r3

			//go to next command
			rbuffind += size;
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4413      	add	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
		while(new){
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <sw_test_main+0x70>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1df      	bne.n	80027a8 <sw_test_main+0x20>
		rbuffind = 0;
 80027e8:	e7d9      	b.n	800279e <sw_test_main+0x16>
 80027ea:	bf00      	nop
 80027ec:	20000300 	.word	0x20000300
 80027f0:	20000740 	.word	0x20000740
 80027f4:	20000344 	.word	0x20000344
 80027f8:	20000341 	.word	0x20000341

080027fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002800:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002802:	4a18      	ldr	r2, [pc, #96]	@ (8002864 <MX_SPI2_Init+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002806:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800280c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800280e:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002814:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800281a:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <MX_SPI2_Init+0x64>)
 800281c:	2202      	movs	r2, #2
 800281e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002826:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800282c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800282e:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002830:	2218      	movs	r2, #24
 8002832:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002834:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800283a:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <MX_SPI2_Init+0x64>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <MX_SPI2_Init+0x64>)
 8002848:	220a      	movs	r2, #10
 800284a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800284c:	4804      	ldr	r0, [pc, #16]	@ (8002860 <MX_SPI2_Init+0x64>)
 800284e:	f002 ff09 	bl	8005664 <HAL_SPI_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002858:	f7ff fe38 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000b3c 	.word	0x20000b3c
 8002864:	40003800 	.word	0x40003800

08002868 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	@ 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a28      	ldr	r2, [pc, #160]	@ (8002928 <HAL_SPI_MspInit+0xc0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d14a      	bne.n	8002920 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b27      	ldr	r3, [pc, #156]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a26      	ldr	r2, [pc, #152]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b20      	ldr	r3, [pc, #128]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	4a18      	ldr	r2, [pc, #96]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <HAL_SPI_MspInit+0xc4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028de:	230c      	movs	r3, #12
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ee:	2305      	movs	r3, #5
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	480d      	ldr	r0, [pc, #52]	@ (8002930 <HAL_SPI_MspInit+0xc8>)
 80028fa:	f000 fcb1 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002910:	2305      	movs	r3, #5
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	4806      	ldr	r0, [pc, #24]	@ (8002934 <HAL_SPI_MspInit+0xcc>)
 800291c:	f000 fca0 	bl	8003260 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	@ 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40003800 	.word	0x40003800
 800292c:	40023800 	.word	0x40023800
 8002930:	40020800 	.word	0x40020800
 8002934:	40020400 	.word	0x40020400

08002938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_MspInit+0x4c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	4a0f      	ldr	r2, [pc, #60]	@ (8002984 <HAL_MspInit+0x4c>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800294c:	6453      	str	r3, [r2, #68]	@ 0x44
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <HAL_MspInit+0x4c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_MspInit+0x4c>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <HAL_MspInit+0x4c>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_MspInit+0x4c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <NMI_Handler+0x4>

08002990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <MemManage_Handler+0x4>

080029a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <BusFault_Handler+0x4>

080029a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <UsageFault_Handler+0x4>

080029b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029de:	f000 fae9 	bl	8002fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <OTG_FS_IRQHandler+0x10>)
 80029ee:	f001 f8a7 	bl	8003b40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200022e4 	.word	0x200022e4

080029fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
  }

  return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e009      	b.n	8002a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf1      	blt.n	8002a48 <_write+0x12>
  }
  return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_close>:

int _close(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a96:	605a      	str	r2, [r3, #4]
  return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_isatty>:

int _isatty(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f007 fe30 	bl	800a76c <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20020000 	.word	0x20020000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	20000b94 	.word	0x20000b94
 8002b40:	20002b38 	.word	0x20002b38

08002b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <init_thrusters>:

//pointers to CCRs
__IO uint32_t* thrusters[8];

int init_thrusters(void)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b091      	sub	sp, #68	@ 0x44
 8002b6c:	af04      	add	r7, sp, #16
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN; //turn on gpio ports enable port d for TIM4
 8002b6e:	4b62      	ldr	r3, [pc, #392]	@ (8002cf8 <init_thrusters+0x190>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a61      	ldr	r2, [pc, #388]	@ (8002cf8 <init_thrusters+0x190>)
 8002b74:	f043 0305 	orr.w	r3, r3, #5
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= clk_enable(UPPER_TIM_n) | clk_enable(LOWER_TIM_n); //turn on timers
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf8 <init_thrusters+0x190>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf8 <init_thrusters+0x190>)
 8002b80:	f043 030a 	orr.w	r3, r3, #10
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40

	mpininit(GPIOA, (uint32_t[]){0,1,2,3}, 4, MAF, OTPUSHPULL, OSLOW, PUPDNONE, AF2);//pins for TIM5
 8002b86:	4b5d      	ldr	r3, [pc, #372]	@ (8002cfc <init_thrusters+0x194>)
 8002b88:	f107 0418 	add.w	r4, r7, #24
 8002b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b92:	f107 0118 	add.w	r1, r7, #24
 8002b96:	2302      	movs	r3, #2
 8002b98:	9303      	str	r3, [sp, #12]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9302      	str	r3, [sp, #8]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	2204      	movs	r2, #4
 8002baa:	4855      	ldr	r0, [pc, #340]	@ (8002d00 <init_thrusters+0x198>)
 8002bac:	f7ff fa72 	bl	8002094 <mpininit>
	mpininit(GPIOC, (uint32_t[]){6,7,8,9}, 4, MAF, OTPUSHPULL, OSLOW, PUPDNONE, AF2);//pins for TIM3
 8002bb0:	4b54      	ldr	r3, [pc, #336]	@ (8002d04 <init_thrusters+0x19c>)
 8002bb2:	f107 0408 	add.w	r4, r7, #8
 8002bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bbc:	f107 0108 	add.w	r1, r7, #8
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	9303      	str	r3, [sp, #12]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	484c      	ldr	r0, [pc, #304]	@ (8002d08 <init_thrusters+0x1a0>)
 8002bd6:	f7ff fa5d 	bl	8002094 <mpininit>


	UPPER_TIMER->ARR = ARR_VALUE;
 8002bda:	4b4c      	ldr	r3, [pc, #304]	@ (8002d0c <init_thrusters+0x1a4>)
 8002bdc:	f64c 5214 	movw	r2, #52500	@ 0xcd14
 8002be0:	62da      	str	r2, [r3, #44]	@ 0x2c
	LOWER_TIMER->ARR = ARR_VALUE;
 8002be2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d10 <init_thrusters+0x1a8>)
 8002be4:	f64c 5214 	movw	r2, #52500	@ 0xcd14
 8002be8:	62da      	str	r2, [r3, #44]	@ 0x2c
	UPPER_TIMER->PSC = PRESCALE;
 8002bea:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <init_thrusters+0x1a4>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28
	LOWER_TIMER->PSC = PRESCALE;
 8002bf0:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <init_thrusters+0x1a8>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28

	UPPER_TIMER->CCMR1 = CCMR_CFG;
 8002bf6:	4b45      	ldr	r3, [pc, #276]	@ (8002d0c <init_thrusters+0x1a4>)
 8002bf8:	f646 0268 	movw	r2, #26728	@ 0x6868
 8002bfc:	619a      	str	r2, [r3, #24]
	UPPER_TIMER->CCMR2 = CCMR_CFG;
 8002bfe:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <init_thrusters+0x1a4>)
 8002c00:	f646 0268 	movw	r2, #26728	@ 0x6868
 8002c04:	61da      	str	r2, [r3, #28]
	LOWER_TIMER->CCMR1 = CCMR_CFG;
 8002c06:	4b42      	ldr	r3, [pc, #264]	@ (8002d10 <init_thrusters+0x1a8>)
 8002c08:	f646 0268 	movw	r2, #26728	@ 0x6868
 8002c0c:	619a      	str	r2, [r3, #24]
	LOWER_TIMER->CCMR2 = CCMR_CFG;
 8002c0e:	4b40      	ldr	r3, [pc, #256]	@ (8002d10 <init_thrusters+0x1a8>)
 8002c10:	f646 0268 	movw	r2, #26728	@ 0x6868
 8002c14:	61da      	str	r2, [r3, #28]

	UPPER_TIMER->CCER |= CCEN_ENABLE_ALL;
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <init_thrusters+0x1a4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d0c <init_thrusters+0x1a4>)
 8002c1c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8002c20:	f043 0311 	orr.w	r3, r3, #17
 8002c24:	6213      	str	r3, [r2, #32]
	LOWER_TIMER->CCER |= CCEN_ENABLE_ALL;
 8002c26:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <init_thrusters+0x1a8>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a39      	ldr	r2, [pc, #228]	@ (8002d10 <init_thrusters+0x1a8>)
 8002c2c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8002c30:	f043 0311 	orr.w	r3, r3, #17
 8002c34:	6213      	str	r3, [r2, #32]

	//generate LUT for throttle values
	for(int i = 0; i < 255; i++){
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3a:	e010      	b.n	8002c5e <init_thrusters+0xf6>
		ccr_vals[i] = (MAX_THROTTLE - MIN_THROTTLE)/255 * i + MIN_THROTTLE;
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	0192      	lsls	r2, r2, #6
 8002c44:	4413      	add	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f503 43b4 	add.w	r3, r3, #23040	@ 0x5a00
 8002c4c:	333c      	adds	r3, #60	@ 0x3c
 8002c4e:	b299      	uxth	r1, r3
 8002c50:	4a30      	ldr	r2, [pc, #192]	@ (8002d14 <init_thrusters+0x1ac>)
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 255; i++){
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	2bfe      	cmp	r3, #254	@ 0xfe
 8002c62:	ddeb      	ble.n	8002c3c <init_thrusters+0xd4>
	}

	thrusters[0] = &UPPER_TIMER->CCR1;
 8002c64:	4b2c      	ldr	r3, [pc, #176]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c66:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <init_thrusters+0x1b4>)
 8002c68:	601a      	str	r2, [r3, #0]
	thrusters[1] = &UPPER_TIMER->CCR2;
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <init_thrusters+0x1b8>)
 8002c6e:	605a      	str	r2, [r3, #4]
	thrusters[2] = &UPPER_TIMER->CCR3;
 8002c70:	4b29      	ldr	r3, [pc, #164]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c72:	4a2c      	ldr	r2, [pc, #176]	@ (8002d24 <init_thrusters+0x1bc>)
 8002c74:	609a      	str	r2, [r3, #8]
	thrusters[3] = &UPPER_TIMER->CCR4;
 8002c76:	4b28      	ldr	r3, [pc, #160]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c78:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <init_thrusters+0x1c0>)
 8002c7a:	60da      	str	r2, [r3, #12]
	thrusters[4] = &LOWER_TIMER->CCR1;
 8002c7c:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d2c <init_thrusters+0x1c4>)
 8002c80:	611a      	str	r2, [r3, #16]
	thrusters[5] = &LOWER_TIMER->CCR2;
 8002c82:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c84:	4a2a      	ldr	r2, [pc, #168]	@ (8002d30 <init_thrusters+0x1c8>)
 8002c86:	615a      	str	r2, [r3, #20]
	thrusters[6] = &LOWER_TIMER->CCR3;
 8002c88:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d34 <init_thrusters+0x1cc>)
 8002c8c:	619a      	str	r2, [r3, #24]
	thrusters[7] = &LOWER_TIMER->CCR4;
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <init_thrusters+0x1b0>)
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <init_thrusters+0x1d0>)
 8002c92:	61da      	str	r2, [r3, #28]

	//enable timers
	UPPER_TIMER->CR1 |= CR1_ENABLE_TIMER;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <init_thrusters+0x1a4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	@ (8002d0c <init_thrusters+0x1a4>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6013      	str	r3, [r2, #0]
	LOWER_TIMER->CR1 |= CR1_ENABLE_TIMER;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <init_thrusters+0x1a8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <init_thrusters+0x1a8>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6013      	str	r3, [r2, #0]

	//calibration routine
	uint8_t calibration_vals[8];
	for(int i = 255; i > 0; i--){
 8002cac:	23ff      	movs	r3, #255	@ 0xff
 8002cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cb0:	e00f      	b.n	8002cd2 <init_thrusters+0x16a>
		memset(calibration_vals, i, 8);
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f007 fd09 	bl	800a6d0 <memset>
		set_all_thrusters(calibration_vals);
 8002cbe:	463b      	mov	r3, r7
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f85f 	bl	8002d84 <set_all_thrusters>
		HAL_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 f994 	bl	8002ff4 <HAL_Delay>
	for(int i = 255; i > 0; i--){
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	dcec      	bgt.n	8002cb2 <init_thrusters+0x14a>
	}

	//zero out thrust
	memset(calibration_vals, 127, 8);
 8002cd8:	463b      	mov	r3, r7
 8002cda:	2208      	movs	r2, #8
 8002cdc:	217f      	movs	r1, #127	@ 0x7f
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f007 fcf6 	bl	800a6d0 <memset>
	set_all_thrusters(calibration_vals);
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f84c 	bl	8002d84 <set_all_thrusters>

	return 0;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3734      	adds	r7, #52	@ 0x34
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	0800c914 	.word	0x0800c914
 8002d00:	40020000 	.word	0x40020000
 8002d04:	0800c924 	.word	0x0800c924
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40000400 	.word	0x40000400
 8002d14:	20000b98 	.word	0x20000b98
 8002d18:	20000d98 	.word	0x20000d98
 8002d1c:	40000c34 	.word	0x40000c34
 8002d20:	40000c38 	.word	0x40000c38
 8002d24:	40000c3c 	.word	0x40000c3c
 8002d28:	40000c40 	.word	0x40000c40
 8002d2c:	40000434 	.word	0x40000434
 8002d30:	40000438 	.word	0x40000438
 8002d34:	4000043c 	.word	0x4000043c
 8002d38:	40000440 	.word	0x40000440

08002d3c <set_thruster>:

int set_thruster(uint8_t index, uint8_t pwm)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	460a      	mov	r2, r1
 8002d46:	71fb      	strb	r3, [r7, #7]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71bb      	strb	r3, [r7, #6]
	if(index < 8){
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	d80d      	bhi.n	8002d6e <set_thruster+0x32>
		*thrusters[index] = ccr_vals[(int8_t)(pwm) + 128];
 8002d52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d56:	3380      	adds	r3, #128	@ 0x80
 8002d58:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <set_thruster+0x40>)
 8002d5a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4a07      	ldr	r2, [pc, #28]	@ (8002d80 <set_thruster+0x44>)
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	460a      	mov	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
		return 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <set_thruster+0x34>
	}

	return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	20000b98 	.word	0x20000b98
 8002d80:	20000d98 	.word	0x20000d98

08002d84 <set_all_thrusters>:

int set_all_thrusters(uint8_t* values)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	int8_t* s_values = (int8_t*) values;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 8; i ++){
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e011      	b.n	8002dba <set_all_thrusters+0x36>
		*thrusters[i] = ccr_vals[s_values[i] + 128];
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002da0:	3380      	adds	r3, #128	@ 0x80
 8002da2:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd0 <set_all_thrusters+0x4c>)
 8002da4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <set_all_thrusters+0x50>)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	460a      	mov	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i ++){
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b07      	cmp	r3, #7
 8002dbe:	ddea      	ble.n	8002d96 <set_all_thrusters+0x12>
	}
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000b98 	.word	0x20000b98
 8002dd4:	20000d98 	.word	0x20000d98

08002dd8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dec:	463b      	mov	r3, r7
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002df4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002df6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e74 <MX_TIM1_Init+0x9c>)
 8002df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e20:	4813      	ldr	r0, [pc, #76]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e22:	f002 ff2d 	bl	8005c80 <HAL_TIM_Base_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002e2c:	f7ff fb4e 	bl	80024cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480c      	ldr	r0, [pc, #48]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e3e:	f002 ff6e 	bl	8005d1e <HAL_TIM_ConfigClockSource>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e48:	f7ff fb40 	bl	80024cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e54:	463b      	mov	r3, r7
 8002e56:	4619      	mov	r1, r3
 8002e58:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <MX_TIM1_Init+0x98>)
 8002e5a:	f003 f96d 	bl	8006138 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e64:	f7ff fb32 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000db8 	.word	0x20000db8
 8002e74:	40010000 	.word	0x40010000

08002e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10d      	bne.n	8002ea6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x40>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x40>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x40>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40023800 	.word	0x40023800

08002ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ec0:	f7ff fe40 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ec6:	490d      	ldr	r1, [pc, #52]	@ (8002efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eda:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002edc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eea:	f007 fc45 	bl	800a778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eee:	f7ff fa5d 	bl	80023ac <main>
  bx  lr    
 8002ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002f00:	0800ca20 	.word	0x0800ca20
  ldr r2, =_sbss
 8002f04:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002f08:	20002b34 	.word	0x20002b34

08002f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC_IRQHandler>
	...

08002f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f14:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	@ (8002f50 <HAL_Init+0x40>)
 8002f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <HAL_Init+0x40>)
 8002f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f2c:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a07      	ldr	r2, [pc, #28]	@ (8002f50 <HAL_Init+0x40>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f000 f94f 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f000 f808 	bl	8002f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f44:	f7ff fcf8 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f5c:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <HAL_InitTick+0x54>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_InitTick+0x58>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f967 	bl	8003246 <HAL_SYSTICK_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00e      	b.n	8002fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0f      	cmp	r3, #15
 8002f86:	d80a      	bhi.n	8002f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f000 f92f 	bl	80031f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f94:	4a06      	ldr	r2, [pc, #24]	@ (8002fb0 <HAL_InitTick+0x5c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000034 	.word	0x20000034
 8002fac:	2000003c 	.word	0x2000003c
 8002fb0:	20000038 	.word	0x20000038

08002fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_IncTick+0x20>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_IncTick+0x24>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <HAL_IncTick+0x24>)
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000003c 	.word	0x2000003c
 8002fd8:	20000e00 	.word	0x20000e00

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000e00 	.word	0x20000e00

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffee 	bl	8002fdc <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d005      	beq.n	800301a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_Delay+0x44>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301a:	bf00      	nop
 800301c:	f7ff ffde 	bl	8002fdc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d8f7      	bhi.n	800301c <HAL_Delay+0x28>
  {
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000003c 	.word	0x2000003c

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	@ (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	@ (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	@ (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff29 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff3e 	bl	8003084 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff8e 	bl	8003130 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff5d 	bl	80030dc <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff31 	bl	80030a0 <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffa2 	bl	8003198 <SysTick_Config>
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e16b      	b.n	8003554 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 815a 	bne.w	800354e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d130      	bne.n	8003314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 0201 	and.w	r2, r3, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b03      	cmp	r3, #3
 800331e:	d017      	beq.n	8003350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d123      	bne.n	80033a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80b4 	beq.w	800354e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b60      	ldr	r3, [pc, #384]	@ (800356c <HAL_GPIO_Init+0x30c>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	4a5f      	ldr	r2, [pc, #380]	@ (800356c <HAL_GPIO_Init+0x30c>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033f6:	4b5d      	ldr	r3, [pc, #372]	@ (800356c <HAL_GPIO_Init+0x30c>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a5b      	ldr	r2, [pc, #364]	@ (8003570 <HAL_GPIO_Init+0x310>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a52      	ldr	r2, [pc, #328]	@ (8003574 <HAL_GPIO_Init+0x314>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02b      	beq.n	8003486 <HAL_GPIO_Init+0x226>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a51      	ldr	r2, [pc, #324]	@ (8003578 <HAL_GPIO_Init+0x318>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d025      	beq.n	8003482 <HAL_GPIO_Init+0x222>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a50      	ldr	r2, [pc, #320]	@ (800357c <HAL_GPIO_Init+0x31c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01f      	beq.n	800347e <HAL_GPIO_Init+0x21e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4f      	ldr	r2, [pc, #316]	@ (8003580 <HAL_GPIO_Init+0x320>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d019      	beq.n	800347a <HAL_GPIO_Init+0x21a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4e      	ldr	r2, [pc, #312]	@ (8003584 <HAL_GPIO_Init+0x324>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_GPIO_Init+0x216>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4d      	ldr	r2, [pc, #308]	@ (8003588 <HAL_GPIO_Init+0x328>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00d      	beq.n	8003472 <HAL_GPIO_Init+0x212>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4c      	ldr	r2, [pc, #304]	@ (800358c <HAL_GPIO_Init+0x32c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <HAL_GPIO_Init+0x20e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <HAL_GPIO_Init+0x330>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <HAL_GPIO_Init+0x20a>
 8003466:	2307      	movs	r3, #7
 8003468:	e00e      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800346a:	2308      	movs	r3, #8
 800346c:	e00c      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800346e:	2306      	movs	r3, #6
 8003470:	e00a      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003472:	2305      	movs	r3, #5
 8003474:	e008      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003476:	2304      	movs	r3, #4
 8003478:	e006      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800347a:	2303      	movs	r3, #3
 800347c:	e004      	b.n	8003488 <HAL_GPIO_Init+0x228>
 800347e:	2302      	movs	r3, #2
 8003480:	e002      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_GPIO_Init+0x228>
 8003486:	2300      	movs	r3, #0
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	f002 0203 	and.w	r2, r2, #3
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	4093      	lsls	r3, r2
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003498:	4935      	ldr	r1, [pc, #212]	@ (8003570 <HAL_GPIO_Init+0x310>)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	089b      	lsrs	r3, r3, #2
 800349e:	3302      	adds	r3, #2
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_GPIO_Init+0x334>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ca:	4a32      	ldr	r2, [pc, #200]	@ (8003594 <HAL_GPIO_Init+0x334>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d0:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <HAL_GPIO_Init+0x334>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f4:	4a27      	ldr	r2, [pc, #156]	@ (8003594 <HAL_GPIO_Init+0x334>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034fa:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_GPIO_Init+0x334>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800351e:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_GPIO_Init+0x334>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_GPIO_Init+0x334>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003548:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <HAL_GPIO_Init+0x334>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3301      	adds	r3, #1
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	f67f ae90 	bls.w	800327c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3724      	adds	r7, #36	@ 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
 8003570:	40013800 	.word	0x40013800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021000 	.word	0x40021000
 8003588:	40021400 	.word	0x40021400
 800358c:	40021800 	.word	0x40021800
 8003590:	40021c00 	.word	0x40021c00
 8003594:	40013c00 	.word	0x40013c00

08003598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e001      	b.n	80035ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800360c:	887a      	ldrh	r2, [r7, #2]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	041a      	lsls	r2, r3, #16
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43d9      	mvns	r1, r3
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	400b      	ands	r3, r1
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	619a      	str	r2, [r3, #24]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e12b      	b.n	800389a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe fe60 	bl	800231c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	@ 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003694:	f001 ffd2 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a81      	ldr	r2, [pc, #516]	@ (80038a4 <HAL_I2C_Init+0x274>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d807      	bhi.n	80036b4 <HAL_I2C_Init+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a80      	ldr	r2, [pc, #512]	@ (80038a8 <HAL_I2C_Init+0x278>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e006      	b.n	80036c2 <HAL_I2C_Init+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a7d      	ldr	r2, [pc, #500]	@ (80038ac <HAL_I2C_Init+0x27c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0e7      	b.n	800389a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a78      	ldr	r2, [pc, #480]	@ (80038b0 <HAL_I2C_Init+0x280>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9b      	lsrs	r3, r3, #18
 80036d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a6a      	ldr	r2, [pc, #424]	@ (80038a4 <HAL_I2C_Init+0x274>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <HAL_I2C_Init+0xd4>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	e009      	b.n	8003718 <HAL_I2C_Init+0xe8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a69      	ldr	r2, [pc, #420]	@ (80038b4 <HAL_I2C_Init+0x284>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800372a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	495c      	ldr	r1, [pc, #368]	@ (80038a4 <HAL_I2C_Init+0x274>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d819      	bhi.n	800376c <HAL_I2C_Init+0x13c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e59      	subs	r1, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fbb1 f3f3 	udiv	r3, r1, r3
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800374c:	400b      	ands	r3, r1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_I2C_Init+0x138>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e59      	subs	r1, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	e051      	b.n	800380c <HAL_I2C_Init+0x1dc>
 8003768:	2304      	movs	r3, #4
 800376a:	e04f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_I2C_Init+0x168>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e012      	b.n	80037be <HAL_I2C_Init+0x18e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x196>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e022      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_I2C_Init+0x1bc>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e58      	subs	r0, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ea:	e00f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800383a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6911      	ldr	r1, [r2, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	000186a0 	.word	0x000186a0
 80038a8:	001e847f 	.word	0x001e847f
 80038ac:	003d08ff 	.word	0x003d08ff
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e101      	b.n	8003ace <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f006 f9d5 	bl	8009c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d102      	bne.n	8003900 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 fdaa 	bl	800645e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7c1a      	ldrb	r2, [r3, #16]
 8003912:	f88d 2000 	strb.w	r2, [sp]
 8003916:	3304      	adds	r3, #4
 8003918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800391a:	f002 fc89 	bl	8006230 <USB_CoreInit>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0ce      	b.n	8003ace <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fda2 	bl	8006480 <USB_SetCurrentMode>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0bf      	b.n	8003ace <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e04a      	b.n	80039ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	3315      	adds	r3, #21
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3314      	adds	r3, #20
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	b298      	uxth	r0, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	332e      	adds	r3, #46	@ 0x2e
 8003990:	4602      	mov	r2, r0
 8003992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3318      	adds	r3, #24
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	331c      	adds	r3, #28
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3320      	adds	r3, #32
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3324      	adds	r3, #36	@ 0x24
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	3301      	adds	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	791b      	ldrb	r3, [r3, #4]
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3af      	bcc.n	8003954 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e044      	b.n	8003a84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	3301      	adds	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3b5      	bcc.n	80039fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7c1a      	ldrb	r2, [r3, #16]
 8003a96:	f88d 2000 	strb.w	r2, [sp]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9e:	f002 fd3b 	bl	8006518 <USB_DevInit>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e00c      	b.n	8003ace <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fd85 	bl	80075d6 <USB_DevDisconnect>

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_PCD_Start+0x1c>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e022      	b.n	8003b38 <HAL_PCD_Start+0x62>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fc8c 	bl	800643c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f003 fd33 	bl	8007594 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b08d      	sub	sp, #52	@ 0x34
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 fdf1 	bl	800773e <USB_GetMode>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 848c 	bne.w	800447c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 fd55 	bl	8007618 <USB_ReadInterrupts>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8482 	beq.w	800447a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fd42 	bl	8007618 <USB_ReadInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f002 0202 	and.w	r2, r2, #2
 8003bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 fd30 	bl	8007618 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d161      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0210 	bic.w	r2, r2, #16
 8003bd0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	0c5b      	lsrs	r3, r3, #17
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d124      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d035      	beq.n	8003c76 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6a38      	ldr	r0, [r7, #32]
 8003c1e:	f003 fb67 	bl	80072f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c2e:	441a      	add	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c40:	441a      	add	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	615a      	str	r2, [r3, #20]
 8003c46:	e016      	b.n	8003c76 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	0c5b      	lsrs	r3, r3, #17
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	2b06      	cmp	r3, #6
 8003c52:	d110      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6a38      	ldr	r0, [r7, #32]
 8003c60:	f003 fb46 	bl	80072f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c70:	441a      	add	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0210 	orr.w	r2, r2, #16
 8003c84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 fcc4 	bl	8007618 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c9a:	f040 80a7 	bne.w	8003dec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fcc9 	bl	800763e <USB_ReadDevAllOutEpInterrupt>
 8003cac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003cae:	e099      	b.n	8003de4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 808e 	beq.w	8003dd8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f003 fced 	bl	80076a6 <USB_ReadDevOutEPInterrupt>
 8003ccc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00c      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fea3 	bl	8004a38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 ff79 	bl	8004c08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2310      	movs	r3, #16
 8003d30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d030      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d109      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d5a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	78db      	ldrb	r3, [r3, #3]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d108      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f006 f88a 	bl	8009ea0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	2320      	movs	r3, #32
 8003db8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dd6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	3301      	adds	r3, #1
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f47f af62 	bne.w	8003cb0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f003 fc11 	bl	8007618 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e00:	f040 80db 	bne.w	8003fba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 fc32 	bl	8007672 <USB_ReadDevAllInEpInterrupt>
 8003e0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003e14:	e0cd      	b.n	8003fb2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80c2 	beq.w	8003fa6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f003 fc58 	bl	80076e2 <USB_ReadDevInEPInterrupt>
 8003e32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d057      	beq.n	8003eee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2201      	movs	r2, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e5e:	4013      	ands	r3, r2
 8003e60:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2301      	movs	r3, #1
 8003e72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	799b      	ldrb	r3, [r3, #6]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d132      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4403      	add	r3, r0
 8003e9c:	331c      	adds	r3, #28
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4419      	add	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4403      	add	r3, r0
 8003eb0:	3320      	adds	r3, #32
 8003eb2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x3a2>
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3324      	adds	r3, #36	@ 0x24
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eda:	461a      	mov	r2, r3
 8003edc:	2101      	movs	r1, #1
 8003ede:	f003 fc5f 	bl	80077a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f005 ff54 	bl	8009d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f04:	461a      	mov	r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f20:	461a      	mov	r2, r3
 8003f22:	2310      	movs	r3, #16
 8003f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2340      	movs	r3, #64	@ 0x40
 8003f40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d023      	beq.n	8003f94 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f4e:	6a38      	ldr	r0, [r7, #32]
 8003f50:	f002 fc46 	bl	80067e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	3310      	adds	r3, #16
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	78db      	ldrb	r3, [r3, #3]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d108      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f005 ffa1 	bl	8009ec4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2302      	movs	r3, #2
 8003f92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fcbd 	bl	8004920 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	3301      	adds	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f af2e 	bne.w	8003e16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 fb2a 	bl	8007618 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fce:	d122      	bne.n	8004016 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d108      	bne.n	8004000 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fea3 	bl	8004d44 <HAL_PCDEx_LPM_Callback>
 8003ffe:	e002      	b.n	8004006 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f005 ff3f 	bl	8009e84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 fafc 	bl	8007618 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800402a:	d112      	bne.n	8004052 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f005 fefb 	bl	8009e38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004050:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f003 fade 	bl	8007618 <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004066:	f040 80b7 	bne.w	80041d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2110      	movs	r1, #16
 8004084:	4618      	mov	r0, r3
 8004086:	f002 fbab 	bl	80067e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408a:	2300      	movs	r3, #0
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408e:	e046      	b.n	800411e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409c:	461a      	mov	r2, r3
 800409e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004112:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004116:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	3301      	adds	r3, #1
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	791b      	ldrb	r3, [r3, #4]
 8004122:	461a      	mov	r2, r3
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	4293      	cmp	r3, r2
 8004128:	d3b2      	bcc.n	8004090 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004138:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800413c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7bdb      	ldrb	r3, [r3, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004156:	f043 030b 	orr.w	r3, r3, #11
 800415a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800416c:	f043 030b 	orr.w	r3, r3, #11
 8004170:	6453      	str	r3, [r2, #68]	@ 0x44
 8004172:	e015      	b.n	80041a0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004182:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004186:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800418a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800419a:	f043 030b 	orr.w	r3, r3, #11
 800419e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041c2:	461a      	mov	r2, r3
 80041c4:	f003 faec 	bl	80077a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80041d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fa1b 	bl	8007618 <USB_ReadInterrupts>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ec:	d123      	bne.n	8004236 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f003 fab1 	bl	800775a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f002 fb68 	bl	80068d2 <USB_GetDevSpeed>
 8004202:	4603      	mov	r3, r0
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681c      	ldr	r4, [r3, #0]
 800420e:	f001 fa09 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8004212:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004218:	461a      	mov	r2, r3
 800421a:	4620      	mov	r0, r4
 800421c:	f002 f86c 	bl	80062f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f005 fde0 	bl	8009de6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004234:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f003 f9ec 	bl	8007618 <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d10a      	bne.n	8004260 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f005 fdbd 	bl	8009dca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f002 0208 	and.w	r2, r2, #8
 800425e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f003 f9d7 	bl	8007618 <USB_ReadInterrupts>
 800426a:	4603      	mov	r3, r0
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b80      	cmp	r3, #128	@ 0x80
 8004272:	d123      	bne.n	80042bc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004280:	2301      	movs	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
 8004284:	e014      	b.n	80042b0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb0a 	bl	80048be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	3301      	adds	r3, #1
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d3e4      	bcc.n	8004286 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 f9a9 	bl	8007618 <USB_ReadInterrupts>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d0:	d13c      	bne.n	800434c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042d2:	2301      	movs	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d6:	e02b      	b.n	8004330 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3318      	adds	r3, #24
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d115      	bne.n	800432a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	da12      	bge.n	800432a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	3317      	adds	r3, #23
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 faca 	bl	80048be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	3301      	adds	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	791b      	ldrb	r3, [r3, #4]
 8004334:	461a      	mov	r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	4293      	cmp	r3, r2
 800433a:	d3cd      	bcc.n	80042d8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800434a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f003 f961 	bl	8007618 <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004360:	d156      	bne.n	8004410 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004362:	2301      	movs	r3, #1
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
 8004366:	e045      	b.n	80043f4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d12e      	bne.n	80043ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004390:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	da2b      	bge.n	80043ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80043a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d121      	bne.n	80043ee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ea:	6053      	str	r3, [r2, #4]
            break;
 80043ec:	e008      	b.n	8004400 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	3301      	adds	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	791b      	ldrb	r3, [r3, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d3b3      	bcc.n	8004368 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800440e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f003 f8ff 	bl	8007618 <USB_ReadInterrupts>
 800441a:	4603      	mov	r3, r0
 800441c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d10a      	bne.n	800443c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f005 fd5e 	bl	8009ee8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800443a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f003 f8e9 	bl	8007618 <USB_ReadInterrupts>
 8004446:	4603      	mov	r3, r0
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b04      	cmp	r3, #4
 800444e:	d115      	bne.n	800447c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f005 fd4e 	bl	8009f04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e000      	b.n	800447c <HAL_PCD_IRQHandler+0x93c>
      return;
 800447a:	bf00      	nop
    }
  }
}
 800447c:	3734      	adds	r7, #52	@ 0x34
 800447e:	46bd      	mov	sp, r7
 8004480:	bd90      	pop	{r4, r7, pc}

08004482 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_PCD_SetAddress+0x1a>
 8004498:	2302      	movs	r3, #2
 800449a:	e012      	b.n	80044c2 <HAL_PCD_SetAddress+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f003 f848 	bl	8007548 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	461a      	mov	r2, r3
 80044d8:	4603      	mov	r3, r0
 80044da:	70fb      	strb	r3, [r7, #3]
 80044dc:	460b      	mov	r3, r1
 80044de:	803b      	strh	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da0f      	bge.n	8004510 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	3310      	adds	r3, #16
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	705a      	strb	r2, [r3, #1]
 800450e:	e00f      	b.n	8004530 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	3304      	adds	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800453c:	883b      	ldrh	r3, [r7, #0]
 800453e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	78ba      	ldrb	r2, [r7, #2]
 800454a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800455e:	78bb      	ldrb	r3, [r7, #2]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d102      	bne.n	800456a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_PCD_EP_Open+0xae>
 8004574:	2302      	movs	r3, #2
 8004576:	e00e      	b.n	8004596 <HAL_PCD_EP_Open+0xcc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	4618      	mov	r0, r3
 8004588:	f002 f9c8 	bl	800691c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004594:	7afb      	ldrb	r3, [r7, #11]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da0f      	bge.n	80045d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	3310      	adds	r3, #16
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	3304      	adds	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	705a      	strb	r2, [r3, #1]
 80045d0:	e00f      	b.n	80045f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	f003 020f 	and.w	r2, r3, #15
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_PCD_EP_Close+0x6e>
 8004608:	2302      	movs	r3, #2
 800460a:	e00e      	b.n	800462a <HAL_PCD_EP_Close+0x8c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68f9      	ldr	r1, [r7, #12]
 800461a:	4618      	mov	r0, r3
 800461c:	f002 fa06 	bl	8006a2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	460b      	mov	r3, r1
 8004640:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	3304      	adds	r3, #4
 800465a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2200      	movs	r2, #0
 800466c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004674:	7afb      	ldrb	r3, [r7, #11]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	b2da      	uxtb	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	799b      	ldrb	r3, [r3, #6]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d102      	bne.n	800468e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	799b      	ldrb	r3, [r3, #6]
 8004696:	461a      	mov	r2, r3
 8004698:	6979      	ldr	r1, [r7, #20]
 800469a:	f002 faa3 	bl	8006be4 <USB_EPStartXfer>

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	f003 020f 	and.w	r2, r3, #15
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	460b      	mov	r3, r1
 80046e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046e8:	7afb      	ldrb	r3, [r7, #11]
 80046ea:	f003 020f 	and.w	r2, r3, #15
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	3310      	adds	r3, #16
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	3304      	adds	r3, #4
 80046fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2201      	movs	r2, #1
 8004716:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	b2da      	uxtb	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	799b      	ldrb	r3, [r3, #6]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d102      	bne.n	8004732 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	799b      	ldrb	r3, [r3, #6]
 800473a:	461a      	mov	r2, r3
 800473c:	6979      	ldr	r1, [r7, #20]
 800473e:	f002 fa51 	bl	8006be4 <USB_EPStartXfer>

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	7912      	ldrb	r2, [r2, #4]
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e04f      	b.n	800480a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800476a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da0f      	bge.n	8004792 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3310      	adds	r3, #16
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	3304      	adds	r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	705a      	strb	r2, [r3, #1]
 8004790:	e00d      	b.n	80047ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	3304      	adds	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_PCD_EP_SetStall+0x82>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e01d      	b.n	800480a <HAL_PCD_EP_SetStall+0xbe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	4618      	mov	r0, r3
 80047de:	f002 fddf 	bl	80073a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7999      	ldrb	r1, [r3, #6]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047fa:	461a      	mov	r2, r3
 80047fc:	f002 ffd0 	bl	80077a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	7912      	ldrb	r2, [r2, #4]
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e042      	b.n	80048b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004834:	2b00      	cmp	r3, #0
 8004836:	da0f      	bge.n	8004858 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	3310      	adds	r3, #16
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4413      	add	r3, r2
 800484c:	3304      	adds	r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	705a      	strb	r2, [r3, #1]
 8004856:	e00f      	b.n	8004878 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_PCD_EP_ClrStall+0x86>
 8004894:	2302      	movs	r3, #2
 8004896:	e00e      	b.n	80048b6 <HAL_PCD_EP_ClrStall+0xa4>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f002 fde8 	bl	800747c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	da0c      	bge.n	80048ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	3310      	adds	r3, #16
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e00c      	b.n	8004906 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	3304      	adds	r3, #4
 8004904:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	f002 fc07 	bl	8007120 <USB_EPStopXfer>
 8004912:	4603      	mov	r3, r0
 8004914:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004916:	7afb      	ldrb	r3, [r7, #11]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	@ 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3310      	adds	r3, #16
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d901      	bls.n	8004958 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e06b      	b.n	8004a30 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d902      	bls.n	8004974 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3303      	adds	r3, #3
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800497c:	e02a      	b.n	80049d4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	429a      	cmp	r2, r3
 8004992:	d902      	bls.n	800499a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3303      	adds	r3, #3
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68d9      	ldr	r1, [r3, #12]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f002 fc5c 	bl	8007274 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d809      	bhi.n	80049fe <PCD_WriteEmptyTxFifo+0xde>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d203      	bcs.n	80049fe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1bf      	bne.n	800497e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d811      	bhi.n	8004a2e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2201      	movs	r2, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	6939      	ldr	r1, [r7, #16]
 8004a26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	333c      	adds	r3, #60	@ 0x3c
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	799b      	ldrb	r3, [r3, #6]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d17b      	bne.n	8004b66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4a61      	ldr	r2, [pc, #388]	@ (8004c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f240 80b9 	bls.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80b3 	beq.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa0:	6093      	str	r3, [r2, #8]
 8004aa2:	e0a7      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	2320      	movs	r3, #32
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	e098      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 8093 	bne.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d90f      	bls.n	8004af6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af2:	6093      	str	r3, [r2, #8]
 8004af4:	e07e      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	3304      	adds	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d114      	bne.n	8004b58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b40:	461a      	mov	r2, r3
 8004b42:	2101      	movs	r1, #1
 8004b44:	f002 fe2c 	bl	80077a0 <USB_EP0_OutStart>
 8004b48:	e006      	b.n	8004b58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	441a      	add	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f005 f8fe 	bl	8009d60 <HAL_PCD_DataOutStageCallback>
 8004b64:	e046      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d124      	bne.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]
 8004b8c:	e032      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f005 f8d5 	bl	8009d60 <HAL_PCD_DataOutStageCallback>
 8004bb6:	e01d      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d114      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004be0:	461a      	mov	r2, r3
 8004be2:	2100      	movs	r1, #0
 8004be4:	f002 fddc 	bl	80077a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f005 f8b6 	bl	8009d60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	4f54300a 	.word	0x4f54300a
 8004c04:	4f54310a 	.word	0x4f54310a

08004c08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	333c      	adds	r3, #60	@ 0x3c
 8004c20:	3304      	adds	r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a15      	ldr	r2, [pc, #84]	@ (8004c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d90e      	bls.n	8004c5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c54:	461a      	mov	r2, r3
 8004c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f005 f86d 	bl	8009d3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d90c      	bls.n	8004c84 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	799b      	ldrb	r3, [r3, #6]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d108      	bne.n	8004c84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2101      	movs	r1, #1
 8004c80:	f002 fd8e 	bl	80077a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	4f54300a 	.word	0x4f54300a

08004c94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cb2:	883b      	ldrh	r3, [r7, #0]
 8004cb4:	0419      	lsls	r1, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc0:	e028      	b.n	8004d14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	e00d      	b.n	8004cf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3340      	adds	r3, #64	@ 0x40
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3ec      	bcc.n	8004cd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cfc:	883b      	ldrh	r3, [r7, #0]
 8004cfe:	0418      	lsls	r0, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	4302      	orrs	r2, r0
 8004d0c:	3340      	adds	r3, #64	@ 0x40
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e267      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d075      	beq.n	8004e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d7a:	4b88      	ldr	r3, [pc, #544]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d86:	4b85      	ldr	r3, [pc, #532]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d112      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b82      	ldr	r3, [pc, #520]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	4b7e      	ldr	r3, [pc, #504]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05b      	beq.n	8004e64 <HAL_RCC_OscConfig+0x108>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d157      	bne.n	8004e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e242      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x74>
 8004dc2:	4b76      	ldr	r3, [pc, #472]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a75      	ldr	r2, [pc, #468]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e01d      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x98>
 8004dda:	4b70      	ldr	r3, [pc, #448]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6f      	ldr	r2, [pc, #444]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6c      	ldr	r2, [pc, #432]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004df4:	4b69      	ldr	r3, [pc, #420]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a68      	ldr	r2, [pc, #416]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b66      	ldr	r3, [pc, #408]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a65      	ldr	r2, [pc, #404]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fe f8e2 	bl	8002fdc <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fe f8de 	bl	8002fdc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e207      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xc0>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f8ce 	bl	8002fdc <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fe f8ca 	bl	8002fdc <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	@ 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1f3      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	4b51      	ldr	r3, [pc, #324]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0xe8>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e72:	4b4a      	ldr	r3, [pc, #296]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7e:	4b47      	ldr	r3, [pc, #284]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b44      	ldr	r3, [pc, #272]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e96:	4b41      	ldr	r3, [pc, #260]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1c7      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b3b      	ldr	r3, [pc, #236]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4937      	ldr	r1, [pc, #220]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	e03a      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fe f883 	bl	8002fdc <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fe f87f 	bl	8002fdc <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a8      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4925      	ldr	r1, [pc, #148]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fe f862 	bl	8002fdc <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fe f85e 	bl	8002fdc <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e187      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d036      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fe f842 	bl	8002fdc <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fe f83e 	bl	8002fdc <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e167      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x200>
 8004f7a:	e01b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7c:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fe f82b 	bl	8002fdc <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fe f827 	bl	8002fdc <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d907      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e150      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470000 	.word	0x42470000
 8004fa4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b88      	ldr	r3, [pc, #544]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ea      	bne.n	8004f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8097 	beq.w	80050f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b81      	ldr	r3, [pc, #516]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	4a7c      	ldr	r2, [pc, #496]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b77      	ldr	r3, [pc, #476]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d118      	bne.n	8005030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b74      	ldr	r3, [pc, #464]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fd ffe7 	bl	8002fdc <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fd ffe3 	bl	8002fdc <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e10c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b6a      	ldr	r3, [pc, #424]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x2ea>
 8005038:	4b64      	ldr	r3, [pc, #400]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	4a63      	ldr	r2, [pc, #396]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
 8005044:	e01c      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x30c>
 800504e:	4b5f      	ldr	r3, [pc, #380]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	4a5e      	ldr	r2, [pc, #376]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	6713      	str	r3, [r2, #112]	@ 0x70
 800505a:	4b5c      	ldr	r3, [pc, #368]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a5b      	ldr	r2, [pc, #364]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	@ 0x70
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005068:	4b58      	ldr	r3, [pc, #352]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	4a57      	ldr	r2, [pc, #348]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	@ 0x70
 8005074:	4b55      	ldr	r3, [pc, #340]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a54      	ldr	r2, [pc, #336]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd ffa8 	bl	8002fdc <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fd ffa4 	bl	8002fdc <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0cb      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	4b49      	ldr	r3, [pc, #292]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ee      	beq.n	8005090 <HAL_RCC_OscConfig+0x334>
 80050b2:	e014      	b.n	80050de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b4:	f7fd ff92 	bl	8002fdc <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd ff8e 	bl	8002fdc <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0b5      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d2:	4b3e      	ldr	r3, [pc, #248]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1ee      	bne.n	80050bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	4a38      	ldr	r2, [pc, #224]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a1 	beq.w	800523c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fa:	4b34      	ldr	r3, [pc, #208]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d05c      	beq.n	80051c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d141      	bne.n	8005192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b31      	ldr	r3, [pc, #196]	@ (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd ff62 	bl	8002fdc <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fd ff5e 	bl	8002fdc <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e087      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	491b      	ldr	r1, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b1b      	ldr	r3, [pc, #108]	@ (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fd ff37 	bl	8002fdc <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fd ff33 	bl	8002fdc <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e05c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005184:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x416>
 8005190:	e054      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd ff20 	bl	8002fdc <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fd ff1c 	bl	8002fdc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e045      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x444>
 80051be:	e03d      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e038      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40007000 	.word	0x40007000
 80051d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005248 <HAL_RCC_OscConfig+0x4ec>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d028      	beq.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d121      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d11a      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800520e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d107      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0cc      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b68      	ldr	r3, [pc, #416]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d90c      	bls.n	8005288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b65      	ldr	r3, [pc, #404]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b63      	ldr	r3, [pc, #396]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0b8      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b59      	ldr	r3, [pc, #356]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a58      	ldr	r2, [pc, #352]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b8:	4b53      	ldr	r3, [pc, #332]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a52      	ldr	r2, [pc, #328]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b50      	ldr	r3, [pc, #320]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	494d      	ldr	r1, [pc, #308]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d044      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b47      	ldr	r3, [pc, #284]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d119      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d003      	beq.n	800530a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	2b03      	cmp	r3, #3
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b3f      	ldr	r3, [pc, #252]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e067      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b37      	ldr	r3, [pc, #220]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4934      	ldr	r1, [pc, #208]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fd fe4e 	bl	8002fdc <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fd fe4a 	bl	8002fdc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e04f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d20c      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b20      	ldr	r3, [pc, #128]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e032      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a0:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4916      	ldr	r1, [pc, #88]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	490e      	ldr	r1, [pc, #56]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053d2:	f000 f821 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	490a      	ldr	r1, [pc, #40]	@ (800540c <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	5ccb      	ldrb	r3, [r1, r3]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	4a09      	ldr	r2, [pc, #36]	@ (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053ee:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fd fdae 	bl	8002f54 <HAL_InitTick>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023c00 	.word	0x40023c00
 8005408:	40023800 	.word	0x40023800
 800540c:	0800c97c 	.word	0x0800c97c
 8005410:	20000034 	.word	0x20000034
 8005414:	20000038 	.word	0x20000038

08005418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800541c:	b094      	sub	sp, #80	@ 0x50
 800541e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005430:	4b79      	ldr	r3, [pc, #484]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d00d      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x40>
 800543c:	2b08      	cmp	r3, #8
 800543e:	f200 80e1 	bhi.w	8005604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x34>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d003      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x3a>
 800544a:	e0db      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b73      	ldr	r3, [pc, #460]	@ (800561c <HAL_RCC_GetSysClockFreq+0x204>)
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005450:	e0db      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005452:	4b73      	ldr	r3, [pc, #460]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x208>)
 8005454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005456:	e0d8      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005458:	4b6f      	ldr	r3, [pc, #444]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005462:	4b6d      	ldr	r3, [pc, #436]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d063      	beq.n	8005536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546e:	4b6a      	ldr	r3, [pc, #424]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	099b      	lsrs	r3, r3, #6
 8005474:	2200      	movs	r2, #0
 8005476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
 8005486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800548a:	4622      	mov	r2, r4
 800548c:	462b      	mov	r3, r5
 800548e:	f04f 0000 	mov.w	r0, #0
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	0159      	lsls	r1, r3, #5
 8005498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800549c:	0150      	lsls	r0, r2, #5
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4621      	mov	r1, r4
 80054a4:	1a51      	subs	r1, r2, r1
 80054a6:	6139      	str	r1, [r7, #16]
 80054a8:	4629      	mov	r1, r5
 80054aa:	eb63 0301 	sbc.w	r3, r3, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054bc:	4659      	mov	r1, fp
 80054be:	018b      	lsls	r3, r1, #6
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054c6:	4651      	mov	r1, sl
 80054c8:	018a      	lsls	r2, r1, #6
 80054ca:	4651      	mov	r1, sl
 80054cc:	ebb2 0801 	subs.w	r8, r2, r1
 80054d0:	4659      	mov	r1, fp
 80054d2:	eb63 0901 	sbc.w	r9, r3, r1
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ea:	4690      	mov	r8, r2
 80054ec:	4699      	mov	r9, r3
 80054ee:	4623      	mov	r3, r4
 80054f0:	eb18 0303 	adds.w	r3, r8, r3
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	462b      	mov	r3, r5
 80054f8:	eb49 0303 	adc.w	r3, r9, r3
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800550a:	4629      	mov	r1, r5
 800550c:	024b      	lsls	r3, r1, #9
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005514:	4621      	mov	r1, r4
 8005516:	024a      	lsls	r2, r1, #9
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551e:	2200      	movs	r2, #0
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005528:	f7fb fb36 	bl	8000b98 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005534:	e058      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005536:	4b38      	ldr	r3, [pc, #224]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	2200      	movs	r2, #0
 800553e:	4618      	mov	r0, r3
 8005540:	4611      	mov	r1, r2
 8005542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	2300      	movs	r3, #0
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
 800554c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	0159      	lsls	r1, r3, #5
 800555e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005562:	0150      	lsls	r0, r2, #5
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4641      	mov	r1, r8
 800556a:	ebb2 0a01 	subs.w	sl, r2, r1
 800556e:	4649      	mov	r1, r9
 8005570:	eb63 0b01 	sbc.w	fp, r3, r1
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005588:	ebb2 040a 	subs.w	r4, r2, sl
 800558c:	eb63 050b 	sbc.w	r5, r3, fp
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	00eb      	lsls	r3, r5, #3
 800559a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559e:	00e2      	lsls	r2, r4, #3
 80055a0:	4614      	mov	r4, r2
 80055a2:	461d      	mov	r5, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	18e3      	adds	r3, r4, r3
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	464b      	mov	r3, r9
 80055ac:	eb45 0303 	adc.w	r3, r5, r3
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055be:	4629      	mov	r1, r5
 80055c0:	028b      	lsls	r3, r1, #10
 80055c2:	4621      	mov	r1, r4
 80055c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055c8:	4621      	mov	r1, r4
 80055ca:	028a      	lsls	r2, r1, #10
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d2:	2200      	movs	r2, #0
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	61fa      	str	r2, [r7, #28]
 80055d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055dc:	f7fb fadc 	bl	8000b98 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4613      	mov	r3, r2
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	3301      	adds	r3, #1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005602:	e002      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <HAL_RCC_GetSysClockFreq+0x204>)
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800560c:	4618      	mov	r0, r3
 800560e:	3750      	adds	r7, #80	@ 0x50
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	00f42400 	.word	0x00f42400
 8005620:	007a1200 	.word	0x007a1200

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_RCC_GetHCLKFreq+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000034 	.word	0x20000034

0800563c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005640:	f7ff fff0 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	@ (800565c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0a9b      	lsrs	r3, r3, #10
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4903      	ldr	r1, [pc, #12]	@ (8005660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	0800c98c 	.word	0x0800c98c

08005664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e07b      	b.n	800576e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	d108      	bne.n	8005690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005686:	d009      	beq.n	800569c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	61da      	str	r2, [r3, #28]
 800568e:	e005      	b.n	800569c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fd f8d6 	bl	8002868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005720:	ea42 0103 	orr.w	r1, r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	f003 0104 	and.w	r1, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	f003 0210 	and.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800575c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b08a      	sub	sp, #40	@ 0x28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005784:	2301      	movs	r3, #1
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005788:	f7fd fc28 	bl	8002fdc <HAL_GetTick>
 800578c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005794:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d00c      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x4a>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ac:	d106      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x46>
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d001      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	e17f      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0x5c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0x5c>
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e174      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x6e>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e16d      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d003      	beq.n	8005800 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2205      	movs	r2, #5
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	887a      	ldrh	r2, [r7, #2]
 8005810:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	887a      	ldrh	r2, [r7, #2]
 8005816:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	887a      	ldrh	r2, [r7, #2]
 8005822:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d007      	beq.n	8005854 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d17e      	bne.n	800595c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_SPI_TransmitReceive+0xf6>
 8005866:	8afb      	ldrh	r3, [r7, #22]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d16c      	bne.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005890:	e059      	b.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d11b      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x162>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x162>
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d113      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	881a      	ldrh	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d119      	bne.n	800591a <HAL_SPI_TransmitReceive+0x1a4>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d014      	beq.n	800591a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	b292      	uxth	r2, r2
 80058fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005916:	2301      	movs	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800591a:	f7fd fb5f 	bl	8002fdc <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005926:	429a      	cmp	r2, r3
 8005928:	d80d      	bhi.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d009      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0bc      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1a0      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x11c>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d19b      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x11c>
 800595a:	e082      	b.n	8005a62 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_SPI_TransmitReceive+0x1f4>
 8005964:	8afb      	ldrh	r3, [r7, #22]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d171      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005990:	e05d      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d11c      	bne.n	80059da <HAL_SPI_TransmitReceive+0x264>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <HAL_SPI_TransmitReceive+0x264>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d114      	bne.n	80059da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d119      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x2a6>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d014      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a1c:	f7fd fade 	bl	8002fdc <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d803      	bhi.n	8005a34 <HAL_SPI_TransmitReceive+0x2be>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x2c4>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e038      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d19c      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x21c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d197      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f8b6 	bl	8005bd8 <SPI_EndRxTxTransaction>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e01d      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	@ 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad8:	f7fd fa80 	bl	8002fdc <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae8:	f7fd fa78 	bl	8002fdc <HAL_GetTick>
 8005aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aee:	4b39      	ldr	r3, [pc, #228]	@ (8005bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	015b      	lsls	r3, r3, #5
 8005af4:	0d1b      	lsrs	r3, r3, #20
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	fb02 f303 	mul.w	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005afe:	e054      	b.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d050      	beq.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b08:	f7fd fa68 	bl	8002fdc <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d13d      	bne.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b36:	d111      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b40:	d004      	beq.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4a:	d107      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b64:	d10f      	bne.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e017      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d19b      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000034 	.word	0x20000034

08005bd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2201      	movs	r2, #1
 8005bec:	2102      	movs	r1, #2
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff ff6a 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e032      	b.n	8005c70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c78 <SPI_EndRxTxTransaction+0xa0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <SPI_EndRxTxTransaction+0xa4>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	0d5b      	lsrs	r3, r3, #21
 8005c16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c28:	d112      	bne.n	8005c50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	@ 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff ff47 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d016      	beq.n	8005c6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00f      	b.n	8005c70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	2b80      	cmp	r3, #128	@ 0x80
 8005c68:	d0f2      	beq.n	8005c50 <SPI_EndRxTxTransaction+0x78>
 8005c6a:	e000      	b.n	8005c6e <SPI_EndRxTxTransaction+0x96>
        break;
 8005c6c:	bf00      	nop
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000034 	.word	0x20000034
 8005c7c:	165e9f81 	.word	0x165e9f81

08005c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e041      	b.n	8005d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fd f8e6 	bl	8002e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 f8f4 	bl	8005eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_ConfigClockSource+0x1c>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e0b4      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x186>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d72:	d03e      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0xd4>
 8005d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d78:	f200 8087 	bhi.w	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d80:	f000 8086 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x172>
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d88:	d87f      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005d8a:	2b70      	cmp	r3, #112	@ 0x70
 8005d8c:	d01a      	beq.n	8005dc4 <HAL_TIM_ConfigClockSource+0xa6>
 8005d8e:	2b70      	cmp	r3, #112	@ 0x70
 8005d90:	d87b      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005d92:	2b60      	cmp	r3, #96	@ 0x60
 8005d94:	d050      	beq.n	8005e38 <HAL_TIM_ConfigClockSource+0x11a>
 8005d96:	2b60      	cmp	r3, #96	@ 0x60
 8005d98:	d877      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005d9a:	2b50      	cmp	r3, #80	@ 0x50
 8005d9c:	d03c      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0xfa>
 8005d9e:	2b50      	cmp	r3, #80	@ 0x50
 8005da0:	d873      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005da2:	2b40      	cmp	r3, #64	@ 0x40
 8005da4:	d058      	beq.n	8005e58 <HAL_TIM_ConfigClockSource+0x13a>
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d86f      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005daa:	2b30      	cmp	r3, #48	@ 0x30
 8005dac:	d064      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x15a>
 8005dae:	2b30      	cmp	r3, #48	@ 0x30
 8005db0:	d86b      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d060      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x15a>
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d867      	bhi.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d05c      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d05a      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc2:	e062      	b.n	8005e8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd4:	f000 f990 	bl	80060f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005de6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]
      break;
 8005df0:	e04f      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e02:	f000 f979 	bl	80060f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e14:	609a      	str	r2, [r3, #8]
      break;
 8005e16:	e03c      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e24:	461a      	mov	r2, r3
 8005e26:	f000 f8ed 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2150      	movs	r1, #80	@ 0x50
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 f946 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e36:	e02c      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e44:	461a      	mov	r2, r3
 8005e46:	f000 f90c 	bl	8006062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2160      	movs	r1, #96	@ 0x60
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 f936 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e56:	e01c      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e64:	461a      	mov	r2, r3
 8005e66:	f000 f8cd 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2140      	movs	r1, #64	@ 0x40
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f926 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e76:	e00c      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f000 f91d 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e88:	e003      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8e:	e000      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a46      	ldr	r2, [pc, #280]	@ (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a43      	ldr	r2, [pc, #268]	@ (8005fdc <TIM_Base_SetConfig+0x130>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a42      	ldr	r2, [pc, #264]	@ (8005fe0 <TIM_Base_SetConfig+0x134>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a41      	ldr	r2, [pc, #260]	@ (8005fe4 <TIM_Base_SetConfig+0x138>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a40      	ldr	r2, [pc, #256]	@ (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a35      	ldr	r2, [pc, #212]	@ (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d02b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0c:	d027      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a32      	ldr	r2, [pc, #200]	@ (8005fdc <TIM_Base_SetConfig+0x130>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d023      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a31      	ldr	r2, [pc, #196]	@ (8005fe0 <TIM_Base_SetConfig+0x134>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01f      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a30      	ldr	r2, [pc, #192]	@ (8005fe4 <TIM_Base_SetConfig+0x138>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d017      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2e      	ldr	r2, [pc, #184]	@ (8005fec <TIM_Base_SetConfig+0x140>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <TIM_Base_SetConfig+0x144>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff4 <TIM_Base_SetConfig+0x148>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff8 <TIM_Base_SetConfig+0x14c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2a      	ldr	r2, [pc, #168]	@ (8005ffc <TIM_Base_SetConfig+0x150>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a29      	ldr	r2, [pc, #164]	@ (8006000 <TIM_Base_SetConfig+0x154>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a10      	ldr	r2, [pc, #64]	@ (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_Base_SetConfig+0xf8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	@ (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d103      	bne.n	8005fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40001800 	.word	0x40001800
 8005ffc:	40001c00 	.word	0x40001c00
 8006000:	40002000 	.word	0x40002000

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f023 0210 	bic.w	r2, r3, #16
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800608c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800614c:	2302      	movs	r3, #2
 800614e:	e05a      	b.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a21      	ldr	r2, [pc, #132]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d01d      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a18      	ldr	r2, [pc, #96]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d10c      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40010000 	.word	0x40010000
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40010400 	.word	0x40010400
 8006228:	40014000 	.word	0x40014000
 800622c:	40001800 	.word	0x40001800

08006230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006230:	b084      	sub	sp, #16
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	f107 001c 	add.w	r0, r7, #28
 800623e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006242:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006246:	2b01      	cmp	r3, #1
 8006248:	d123      	bne.n	8006292 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800625e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006272:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006276:	2b01      	cmp	r3, #1
 8006278:	d105      	bne.n	8006286 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fae8 	bl	800785c <USB_CoreReset>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
 8006290:	e01b      	b.n	80062ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fadc 	bl	800785c <USB_CoreReset>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80062bc:	e005      	b.n	80062ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062ca:	7fbb      	ldrb	r3, [r7, #30]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d10b      	bne.n	80062e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f043 0206 	orr.w	r2, r3, #6
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f4:	b004      	add	sp, #16
 80062f6:	4770      	bx	lr

080062f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d165      	bne.n	80063d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4a41      	ldr	r2, [pc, #260]	@ (8006414 <USB_SetTurnaroundTime+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d906      	bls.n	8006322 <USB_SetTurnaroundTime+0x2a>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4a40      	ldr	r2, [pc, #256]	@ (8006418 <USB_SetTurnaroundTime+0x120>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d202      	bcs.n	8006322 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800631c:	230f      	movs	r3, #15
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e062      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4a3c      	ldr	r2, [pc, #240]	@ (8006418 <USB_SetTurnaroundTime+0x120>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d306      	bcc.n	8006338 <USB_SetTurnaroundTime+0x40>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4a3b      	ldr	r2, [pc, #236]	@ (800641c <USB_SetTurnaroundTime+0x124>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d202      	bcs.n	8006338 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006332:	230e      	movs	r3, #14
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e057      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4a38      	ldr	r2, [pc, #224]	@ (800641c <USB_SetTurnaroundTime+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d306      	bcc.n	800634e <USB_SetTurnaroundTime+0x56>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4a37      	ldr	r2, [pc, #220]	@ (8006420 <USB_SetTurnaroundTime+0x128>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d202      	bcs.n	800634e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006348:	230d      	movs	r3, #13
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e04c      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4a33      	ldr	r2, [pc, #204]	@ (8006420 <USB_SetTurnaroundTime+0x128>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d306      	bcc.n	8006364 <USB_SetTurnaroundTime+0x6c>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4a32      	ldr	r2, [pc, #200]	@ (8006424 <USB_SetTurnaroundTime+0x12c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d802      	bhi.n	8006364 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800635e:	230c      	movs	r3, #12
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e041      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4a2f      	ldr	r2, [pc, #188]	@ (8006424 <USB_SetTurnaroundTime+0x12c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d906      	bls.n	800637a <USB_SetTurnaroundTime+0x82>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4a2e      	ldr	r2, [pc, #184]	@ (8006428 <USB_SetTurnaroundTime+0x130>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d802      	bhi.n	800637a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006374:	230b      	movs	r3, #11
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e036      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4a2a      	ldr	r2, [pc, #168]	@ (8006428 <USB_SetTurnaroundTime+0x130>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d906      	bls.n	8006390 <USB_SetTurnaroundTime+0x98>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4a29      	ldr	r2, [pc, #164]	@ (800642c <USB_SetTurnaroundTime+0x134>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d802      	bhi.n	8006390 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800638a:	230a      	movs	r3, #10
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e02b      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4a26      	ldr	r2, [pc, #152]	@ (800642c <USB_SetTurnaroundTime+0x134>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d906      	bls.n	80063a6 <USB_SetTurnaroundTime+0xae>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4a25      	ldr	r2, [pc, #148]	@ (8006430 <USB_SetTurnaroundTime+0x138>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d202      	bcs.n	80063a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063a0:	2309      	movs	r3, #9
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e020      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4a21      	ldr	r2, [pc, #132]	@ (8006430 <USB_SetTurnaroundTime+0x138>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d306      	bcc.n	80063bc <USB_SetTurnaroundTime+0xc4>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a20      	ldr	r2, [pc, #128]	@ (8006434 <USB_SetTurnaroundTime+0x13c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d802      	bhi.n	80063bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063b6:	2308      	movs	r3, #8
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e015      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4a1d      	ldr	r2, [pc, #116]	@ (8006434 <USB_SetTurnaroundTime+0x13c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d906      	bls.n	80063d2 <USB_SetTurnaroundTime+0xda>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006438 <USB_SetTurnaroundTime+0x140>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d202      	bcs.n	80063d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063cc:	2307      	movs	r3, #7
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e00a      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063d2:	2306      	movs	r3, #6
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e007      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063de:	2309      	movs	r3, #9
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e001      	b.n	80063e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063e4:	2309      	movs	r3, #9
 80063e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	029b      	lsls	r3, r3, #10
 80063fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	00d8acbf 	.word	0x00d8acbf
 8006418:	00e4e1c0 	.word	0x00e4e1c0
 800641c:	00f42400 	.word	0x00f42400
 8006420:	01067380 	.word	0x01067380
 8006424:	011a499f 	.word	0x011a499f
 8006428:	01312cff 	.word	0x01312cff
 800642c:	014ca43f 	.word	0x014ca43f
 8006430:	016e3600 	.word	0x016e3600
 8006434:	01a6ab1f 	.word	0x01a6ab1f
 8006438:	01e84800 	.word	0x01e84800

0800643c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f043 0201 	orr.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d115      	bne.n	80064ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064ae:	200a      	movs	r0, #10
 80064b0:	f7fc fda0 	bl	8002ff4 <HAL_Delay>
      ms += 10U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	330a      	adds	r3, #10
 80064b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 f93f 	bl	800773e <USB_GetMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d01e      	beq.n	8006504 <USB_SetCurrentMode+0x84>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80064ca:	d9f0      	bls.n	80064ae <USB_SetCurrentMode+0x2e>
 80064cc:	e01a      	b.n	8006504 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d115      	bne.n	8006500 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064e0:	200a      	movs	r0, #10
 80064e2:	f7fc fd87 	bl	8002ff4 <HAL_Delay>
      ms += 10U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	330a      	adds	r3, #10
 80064ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f926 	bl	800773e <USB_GetMode>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <USB_SetCurrentMode+0x84>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80064fc:	d9f0      	bls.n	80064e0 <USB_SetCurrentMode+0x60>
 80064fe:	e001      	b.n	8006504 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e005      	b.n	8006510 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2bc8      	cmp	r3, #200	@ 0xc8
 8006508:	d101      	bne.n	800650e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006518:	b084      	sub	sp, #16
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e009      	b.n	800654c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3340      	adds	r3, #64	@ 0x40
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	2200      	movs	r2, #0
 8006544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b0e      	cmp	r3, #14
 8006550:	d9f2      	bls.n	8006538 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006552:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006556:	2b00      	cmp	r3, #0
 8006558:	d11c      	bne.n	8006594 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	@ 0x38
 8006592:	e00b      	b.n	80065ac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006598:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065b2:	461a      	mov	r2, r3
 80065b4:	2300      	movs	r3, #0
 80065b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d10d      	bne.n	80065dc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f968 	bl	80068a0 <USB_SetDevSpeed>
 80065d0:	e008      	b.n	80065e4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065d2:	2101      	movs	r1, #1
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f963 	bl	80068a0 <USB_SetDevSpeed>
 80065da:	e003      	b.n	80065e4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065dc:	2103      	movs	r1, #3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f95e 	bl	80068a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065e4:	2110      	movs	r1, #16
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8fa 	bl	80067e0 <USB_FlushTxFifo>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f924 	bl	8006844 <USB_FlushRxFifo>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006624:	461a      	mov	r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	e043      	b.n	80066b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006646:	d118      	bne.n	800667a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665a:	461a      	mov	r2, r3
 800665c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e013      	b.n	800668c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006670:	461a      	mov	r2, r3
 8006672:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	e008      	b.n	800668c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006698:	461a      	mov	r2, r3
 800669a:	2300      	movs	r3, #0
 800669c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066aa:	461a      	mov	r2, r3
 80066ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3301      	adds	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066bc:	461a      	mov	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d3b5      	bcc.n	8006630 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	e043      	b.n	8006752 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e0:	d118      	bne.n	8006714 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f4:	461a      	mov	r2, r3
 80066f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	e013      	b.n	8006726 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670a:	461a      	mov	r2, r3
 800670c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e008      	b.n	8006726 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006744:	461a      	mov	r2, r3
 8006746:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800674a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3301      	adds	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006756:	461a      	mov	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4293      	cmp	r3, r2
 800675c:	d3b5      	bcc.n	80066ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800676c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006770:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800677e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006780:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f043 0210 	orr.w	r2, r3, #16
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	4b10      	ldr	r3, [pc, #64]	@ (80067dc <USB_DevInit+0x2c4>)
 800679a:	4313      	orrs	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f043 0208 	orr.w	r2, r3, #8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d107      	bne.n	80067cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067c4:	f043 0304 	orr.w	r3, r3, #4
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d8:	b004      	add	sp, #16
 80067da:	4770      	bx	lr
 80067dc:	803c3800 	.word	0x803c3800

080067e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067fa:	d901      	bls.n	8006800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e01b      	b.n	8006838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	daf2      	bge.n	80067ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	019b      	lsls	r3, r3, #6
 8006810:	f043 0220 	orr.w	r2, r3, #32
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006824:	d901      	bls.n	800682a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e006      	b.n	8006838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d0f0      	beq.n	8006818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800685c:	d901      	bls.n	8006862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e018      	b.n	8006894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	daf2      	bge.n	8006850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2210      	movs	r2, #16
 8006872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006880:	d901      	bls.n	8006886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e006      	b.n	8006894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b10      	cmp	r3, #16
 8006890:	d0f0      	beq.n	8006874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068c0:	4313      	orrs	r3, r2
 80068c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b087      	sub	sp, #28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0306 	and.w	r3, r3, #6
 80068ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]
 80068f6:	e00a      	b.n	800690e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d002      	beq.n	8006904 <USB_GetDevSpeed+0x32>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b06      	cmp	r3, #6
 8006902:	d102      	bne.n	800690a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006904:	2302      	movs	r3, #2
 8006906:	75fb      	strb	r3, [r7, #23]
 8006908:	e001      	b.n	800690e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800690a:	230f      	movs	r3, #15
 800690c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d13a      	bne.n	80069ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2101      	movs	r1, #1
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	b29b      	uxth	r3, r3
 8006950:	68f9      	ldr	r1, [r7, #12]
 8006952:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006956:	4313      	orrs	r3, r2
 8006958:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d155      	bne.n	8006a1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	791b      	ldrb	r3, [r3, #4]
 800698a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800698c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	059b      	lsls	r3, r3, #22
 8006992:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006994:	4313      	orrs	r3, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e036      	b.n	8006a1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b4:	69da      	ldr	r2, [r3, #28]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	2101      	movs	r1, #1
 80069c0:	fa01 f303 	lsl.w	r3, r1, r3
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11a      	bne.n	8006a1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	791b      	ldrb	r3, [r3, #4]
 8006a00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a02:	430b      	orrs	r3, r1
 8006a04:	4313      	orrs	r3, r2
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d161      	bne.n	8006b0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a5e:	d11f      	bne.n	8006aa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	0159      	lsls	r1, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	440b      	add	r3, r1
 8006afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b02:	4619      	mov	r1, r3
 8006b04:	4b35      	ldr	r3, [pc, #212]	@ (8006bdc <USB_DeactivateEndpoint+0x1b0>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]
 8006b0a:	e060      	b.n	8006bce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b22:	d11f      	bne.n	8006b64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	2101      	movs	r1, #1
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	041b      	lsls	r3, r3, #16
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b84:	4013      	ands	r3, r2
 8006b86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	2101      	movs	r1, #1
 8006b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	0159      	lsls	r1, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	440b      	add	r3, r1
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <USB_DeactivateEndpoint+0x1b4>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	ec337800 	.word	0xec337800
 8006be0:	eff37800 	.word	0xeff37800

08006be4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	@ 0x28
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f040 817f 	bne.w	8006f04 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d132      	bne.n	8006c74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c28:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c2c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6c:	0cdb      	lsrs	r3, r3, #19
 8006c6e:	04db      	lsls	r3, r3, #19
 8006c70:	6113      	str	r3, [r2, #16]
 8006c72:	e097      	b.n	8006da4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8e:	0cdb      	lsrs	r3, r3, #19
 8006c90:	04db      	lsls	r3, r3, #19
 8006c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cb2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cb6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d11a      	bne.n	8006cf4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d903      	bls.n	8006cd2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cf0:	6113      	str	r3, [r2, #16]
 8006cf2:	e044      	b.n	8006d7e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	8afb      	ldrh	r3, [r7, #22]
 8006d1a:	04d9      	lsls	r1, r3, #19
 8006d1c:	4ba4      	ldr	r3, [pc, #656]	@ (8006fb0 <USB_EPStartXfer+0x3cc>)
 8006d1e:	400b      	ands	r3, r1
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	0148      	lsls	r0, r1, #5
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	4401      	add	r1, r0
 8006d28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	791b      	ldrb	r3, [r3, #4]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d122      	bne.n	8006d7e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d52:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d56:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	8afb      	ldrh	r3, [r7, #22]
 8006d68:	075b      	lsls	r3, r3, #29
 8006d6a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	0148      	lsls	r0, r1, #5
 8006d72:	69f9      	ldr	r1, [r7, #28]
 8006d74:	4401      	add	r1, r0
 8006d76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d94:	69b9      	ldr	r1, [r7, #24]
 8006d96:	0148      	lsls	r0, r1, #5
 8006d98:	69f9      	ldr	r1, [r7, #28]
 8006d9a:	4401      	add	r1, r0
 8006d9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006da0:	4313      	orrs	r3, r2
 8006da2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d14b      	bne.n	8006e42 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	791b      	ldrb	r3, [r3, #4]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d128      	bne.n	8006e20 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d110      	bne.n	8006e00 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00f      	b.n	8006e20 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e1e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e166      	b.n	8007110 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e60:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d015      	beq.n	8006e96 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 814e 	beq.w	8007110 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 030f 	and.w	r3, r3, #15
 8006e84:	2101      	movs	r1, #1
 8006e86:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8a:	69f9      	ldr	r1, [r7, #28]
 8006e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e90:	4313      	orrs	r3, r2
 8006e92:	634b      	str	r3, [r1, #52]	@ 0x34
 8006e94:	e13c      	b.n	8007110 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d110      	bne.n	8006ec8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	0151      	lsls	r1, r2, #5
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	440a      	add	r2, r1
 8006ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e00f      	b.n	8006ee8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ee6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	68d9      	ldr	r1, [r3, #12]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	b298      	uxth	r0, r3
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	4603      	mov	r3, r0
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f9b9 	bl	8007274 <USB_WritePacket>
 8006f02:	e105      	b.n	8007110 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f1e:	0cdb      	lsrs	r3, r3, #19
 8006f20:	04db      	lsls	r3, r3, #19
 8006f22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f46:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d132      	bne.n	8006fb4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	0148      	lsls	r0, r1, #5
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	4401      	add	r1, r0
 8006f84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006faa:	6113      	str	r3, [r2, #16]
 8006fac:	e062      	b.n	8007074 <USB_EPStartXfer+0x490>
 8006fae:	bf00      	nop
 8006fb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d123      	bne.n	8007004 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	0148      	lsls	r0, r1, #5
 8006fd6:	69f9      	ldr	r1, [r7, #28]
 8006fd8:	4401      	add	r1, r0
 8006fda:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007000:	6113      	str	r3, [r2, #16]
 8007002:	e037      	b.n	8007074 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4413      	add	r3, r2
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	fbb2 f3f3 	udiv	r3, r2, r3
 8007018:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	8afa      	ldrh	r2, [r7, #22]
 8007020:	fb03 f202 	mul.w	r2, r3, r2
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	8afb      	ldrh	r3, [r7, #22]
 8007038:	04d9      	lsls	r1, r3, #19
 800703a:	4b38      	ldr	r3, [pc, #224]	@ (800711c <USB_EPStartXfer+0x538>)
 800703c:	400b      	ands	r3, r1
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	0148      	lsls	r0, r1, #5
 8007042:	69f9      	ldr	r1, [r7, #28]
 8007044:	4401      	add	r1, r0
 8007046:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800704a:	4313      	orrs	r3, r2
 800704c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	0148      	lsls	r0, r1, #5
 8007068:	69f9      	ldr	r1, [r7, #28]
 800706a:	4401      	add	r1, r0
 800706c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007070:	4313      	orrs	r3, r2
 8007072:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10d      	bne.n	8007096 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	68d9      	ldr	r1, [r3, #12]
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007092:	460a      	mov	r2, r1
 8007094:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	791b      	ldrb	r3, [r3, #4]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d128      	bne.n	80070f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d110      	bne.n	80070d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e00f      	b.n	80070f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800710a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800710e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	1ff80000 	.word	0x1ff80000

08007120 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d14a      	bne.n	80071d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007152:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007156:	f040 8086 	bne.w	8007266 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007178:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800717c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	7812      	ldrb	r2, [r2, #0]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800719c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d902      	bls.n	80071b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
          break;
 80071b6:	e056      	b.n	8007266 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071d0:	d0e7      	beq.n	80071a2 <USB_EPStopXfer+0x82>
 80071d2:	e048      	b.n	8007266 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ec:	d13b      	bne.n	8007266 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	7812      	ldrb	r2, [r2, #0]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800720c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007210:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	7812      	ldrb	r2, [r2, #0]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007234:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007242:	4293      	cmp	r3, r2
 8007244:	d902      	bls.n	800724c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
          break;
 800724a:	e00c      	b.n	8007266 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007264:	d0e7      	beq.n	8007236 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007274:	b480      	push	{r7}
 8007276:	b089      	sub	sp, #36	@ 0x24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	460b      	mov	r3, r1
 8007284:	71fb      	strb	r3, [r7, #7]
 8007286:	4613      	mov	r3, r2
 8007288:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007292:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d123      	bne.n	80072e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800729a:	88bb      	ldrh	r3, [r7, #4]
 800729c:	3303      	adds	r3, #3
 800729e:	089b      	lsrs	r3, r3, #2
 80072a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	e018      	b.n	80072da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	031a      	lsls	r2, r3, #12
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b4:	461a      	mov	r2, r3
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	3301      	adds	r3, #1
 80072c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3301      	adds	r3, #1
 80072d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d3e2      	bcc.n	80072a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3724      	adds	r7, #36	@ 0x24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b08b      	sub	sp, #44	@ 0x2c
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	089b      	lsrs	r3, r3, #2
 800730a:	b29b      	uxth	r3, r3
 800730c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007316:	2300      	movs	r3, #0
 8007318:	623b      	str	r3, [r7, #32]
 800731a:	e014      	b.n	8007346 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	601a      	str	r2, [r3, #0]
    pDest++;
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	3301      	adds	r3, #1
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	3301      	adds	r3, #1
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	3301      	adds	r3, #1
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	3301      	adds	r3, #1
 800733e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	3301      	adds	r3, #1
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	6a3a      	ldr	r2, [r7, #32]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3e6      	bcc.n	800731c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800734e:	8bfb      	ldrh	r3, [r7, #30]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01e      	beq.n	8007392 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800735e:	461a      	mov	r2, r3
 8007360:	f107 0310 	add.w	r3, r7, #16
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
 8007374:	b2da      	uxtb	r2, r3
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	701a      	strb	r2, [r3, #0]
      i++;
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	3301      	adds	r3, #1
 800737e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	3301      	adds	r3, #1
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007386:	8bfb      	ldrh	r3, [r7, #30]
 8007388:	3b01      	subs	r3, #1
 800738a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800738c:	8bfb      	ldrh	r3, [r7, #30]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1ea      	bne.n	8007368 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007394:	4618      	mov	r0, r3
 8007396:	372c      	adds	r7, #44	@ 0x2c
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d12c      	bne.n	8007416 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	db12      	blt.n	80073f4 <USB_EPSetStall+0x54>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00f      	beq.n	80073f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	e02b      	b.n	800746e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	db12      	blt.n	800744e <USB_EPSetStall+0xae>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00f      	beq.n	800744e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007448:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800744c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800746c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d128      	bne.n	80074ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	791b      	ldrb	r3, [r3, #4]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d003      	beq.n	80074c8 <USB_EPClearStall+0x4c>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	791b      	ldrb	r3, [r3, #4]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d138      	bne.n	800753a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	e027      	b.n	800753a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	0151      	lsls	r1, r2, #5
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	440a      	add	r2, r1
 8007500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007504:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007508:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	791b      	ldrb	r3, [r3, #4]
 800750e:	2b03      	cmp	r3, #3
 8007510:	d003      	beq.n	800751a <USB_EPClearStall+0x9e>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	791b      	ldrb	r3, [r3, #4]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d10f      	bne.n	800753a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007538:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007566:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800756a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007582:	4313      	orrs	r3, r2
 8007584:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075ae:	f023 0303 	bic.w	r3, r3, #3
 80075b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075c2:	f023 0302 	bic.w	r3, r3, #2
 80075c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007604:	f043 0302 	orr.w	r3, r3, #2
 8007608:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4013      	ands	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	0c1b      	lsrs	r3, r3, #16
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4013      	ands	r3, r2
 8007694:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	b29b      	uxth	r3, r3
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b085      	sub	sp, #20
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4013      	ands	r3, r2
 80076d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076d4:	68bb      	ldr	r3, [r7, #8]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b087      	sub	sp, #28
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007704:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	fa22 f303 	lsr.w	r3, r2, r3
 8007712:	01db      	lsls	r3, r3, #7
 8007714:	b2db      	uxtb	r3, r3
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4013      	ands	r3, r2
 800772e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007730:	68bb      	ldr	r3, [r7, #8]
}
 8007732:	4618      	mov	r0, r3
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f003 0301 	and.w	r3, r3, #1
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007774:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007778:	f023 0307 	bic.w	r3, r3, #7
 800777c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800778c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	460b      	mov	r3, r1
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	333c      	adds	r3, #60	@ 0x3c
 80077b6:	3304      	adds	r3, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4a26      	ldr	r2, [pc, #152]	@ (8007858 <USB_EP0_OutStart+0xb8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d90a      	bls.n	80077da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077d4:	d101      	bne.n	80077da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	e037      	b.n	800784a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007808:	f043 0318 	orr.w	r3, r3, #24
 800780c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800781c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007820:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10f      	bne.n	8007848 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007842:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007846:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	4f54300a 	.word	0x4f54300a

0800785c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007874:	d901      	bls.n	800787a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e01b      	b.n	80078b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	daf2      	bge.n	8007868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f043 0201 	orr.w	r2, r3, #1
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800789e:	d901      	bls.n	80078a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e006      	b.n	80078b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d0f0      	beq.n	8007892 <USB_CoreReset+0x36>

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80078d0:	f002 fcb0 	bl	800a234 <USBD_static_malloc>
 80078d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	32b0      	adds	r2, #176	@ 0xb0
 80078e6:	2100      	movs	r1, #0
 80078e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078ec:	2302      	movs	r3, #2
 80078ee:	e0d4      	b.n	8007a9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80078f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80078f4:	2100      	movs	r1, #0
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f002 feea 	bl	800a6d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32b0      	adds	r2, #176	@ 0xb0
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	32b0      	adds	r2, #176	@ 0xb0
 8007916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7c1b      	ldrb	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d138      	bne.n	800799a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007928:	4b5e      	ldr	r3, [pc, #376]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 800792a:	7819      	ldrb	r1, [r3, #0]
 800792c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007930:	2202      	movs	r2, #2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f002 fb5b 	bl	8009fee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007938:	4b5a      	ldr	r3, [pc, #360]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3324      	adds	r3, #36	@ 0x24
 800794e:	2201      	movs	r2, #1
 8007950:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007952:	4b55      	ldr	r3, [pc, #340]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007954:	7819      	ldrb	r1, [r3, #0]
 8007956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800795a:	2202      	movs	r2, #2
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 fb46 	bl	8009fee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007962:	4b51      	ldr	r3, [pc, #324]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800797a:	2201      	movs	r2, #1
 800797c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800797e:	4b4b      	ldr	r3, [pc, #300]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 020f 	and.w	r2, r3, #15
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	3326      	adds	r3, #38	@ 0x26
 8007994:	2210      	movs	r2, #16
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e035      	b.n	8007a06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800799a:	4b42      	ldr	r3, [pc, #264]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 800799c:	7819      	ldrb	r1, [r3, #0]
 800799e:	2340      	movs	r3, #64	@ 0x40
 80079a0:	2202      	movs	r2, #2
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f002 fb23 	bl	8009fee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079a8:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	f003 020f 	and.w	r2, r3, #15
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	3324      	adds	r3, #36	@ 0x24
 80079be:	2201      	movs	r2, #1
 80079c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079c2:	4b39      	ldr	r3, [pc, #228]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	2340      	movs	r3, #64	@ 0x40
 80079c8:	2202      	movs	r2, #2
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f002 fb0f 	bl	8009fee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079d0:	4b35      	ldr	r3, [pc, #212]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 020f 	and.w	r2, r3, #15
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079e8:	2201      	movs	r2, #1
 80079ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079ec:	4b2f      	ldr	r3, [pc, #188]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 020f 	and.w	r2, r3, #15
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3326      	adds	r3, #38	@ 0x26
 8007a02:	2210      	movs	r2, #16
 8007a04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a06:	4b29      	ldr	r3, [pc, #164]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f002 faed 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a14:	4b25      	ldr	r3, [pc, #148]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3324      	adds	r3, #36	@ 0x24
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	33b0      	adds	r3, #176	@ 0xb0
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a64:	2302      	movs	r3, #2
 8007a66:	e018      	b.n	8007a9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7c1b      	ldrb	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a70:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007a72:	7819      	ldrb	r1, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f002 fba4 	bl	800a1cc <USBD_LL_PrepareReceive>
 8007a84:	e008      	b.n	8007a98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a86:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007a88:	7819      	ldrb	r1, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a90:	2340      	movs	r3, #64	@ 0x40
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f002 fb9a 	bl	800a1cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200000c7 	.word	0x200000c7
 8007aa8:	200000c8 	.word	0x200000c8
 8007aac:	200000c9 	.word	0x200000c9

08007ab0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007abc:	4b3a      	ldr	r3, [pc, #232]	@ (8007ba8 <USBD_CDC_DeInit+0xf8>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f002 fab9 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ac8:	4b37      	ldr	r3, [pc, #220]	@ (8007ba8 <USBD_CDC_DeInit+0xf8>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	f003 020f 	and.w	r2, r3, #15
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	3324      	adds	r3, #36	@ 0x24
 8007ade:	2200      	movs	r2, #0
 8007ae0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ae2:	4b32      	ldr	r3, [pc, #200]	@ (8007bac <USBD_CDC_DeInit+0xfc>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f002 faa6 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007aee:	4b2f      	ldr	r3, [pc, #188]	@ (8007bac <USBD_CDC_DeInit+0xfc>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b06:	2200      	movs	r2, #0
 8007b08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	@ (8007bb0 <USBD_CDC_DeInit+0x100>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f002 fa92 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b16:	4b26      	ldr	r3, [pc, #152]	@ (8007bb0 <USBD_CDC_DeInit+0x100>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	3324      	adds	r3, #36	@ 0x24
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b30:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb0 <USBD_CDC_DeInit+0x100>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3326      	adds	r3, #38	@ 0x26
 8007b46:	2200      	movs	r2, #0
 8007b48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	32b0      	adds	r2, #176	@ 0xb0
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01f      	beq.n	8007b9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	33b0      	adds	r3, #176	@ 0xb0
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	32b0      	adds	r2, #176	@ 0xb0
 8007b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f002 fb66 	bl	800a250 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32b0      	adds	r2, #176	@ 0xb0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200000c7 	.word	0x200000c7
 8007bac:	200000c8 	.word	0x200000c8
 8007bb0:	200000c9 	.word	0x200000c9

08007bb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	32b0      	adds	r2, #176	@ 0xb0
 8007bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e0bf      	b.n	8007d64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d050      	beq.n	8007c92 <USBD_CDC_Setup+0xde>
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	f040 80af 	bne.w	8007d54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88db      	ldrh	r3, [r3, #6]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d03a      	beq.n	8007c74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da1b      	bge.n	8007c40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	33b0      	adds	r3, #176	@ 0xb0
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	88d2      	ldrh	r2, [r2, #6]
 8007c24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	88db      	ldrh	r3, [r3, #6]
 8007c2a:	2b07      	cmp	r3, #7
 8007c2c:	bf28      	it	cs
 8007c2e:	2307      	movcs	r3, #7
 8007c30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	89fa      	ldrh	r2, [r7, #14]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fd93 	bl	8009764 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c3e:	e090      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	785a      	ldrb	r2, [r3, #1]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007c50:	d803      	bhi.n	8007c5a <USBD_CDC_Setup+0xa6>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	88db      	ldrh	r3, [r3, #6]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	e000      	b.n	8007c5c <USBD_CDC_Setup+0xa8>
 8007c5a:	2240      	movs	r2, #64	@ 0x40
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c62:	6939      	ldr	r1, [r7, #16]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fda5 	bl	80097bc <USBD_CtlPrepareRx>
      break;
 8007c72:	e076      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	33b0      	adds	r3, #176	@ 0xb0
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	7850      	ldrb	r0, [r2, #1]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	4798      	blx	r3
      break;
 8007c90:	e067      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b0b      	cmp	r3, #11
 8007c98:	d851      	bhi.n	8007d3e <USBD_CDC_Setup+0x18a>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <USBD_CDC_Setup+0xec>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007d4d 	.word	0x08007d4d
 8007ca8:	08007d3f 	.word	0x08007d3f
 8007cac:	08007d3f 	.word	0x08007d3f
 8007cb0:	08007d3f 	.word	0x08007d3f
 8007cb4:	08007d3f 	.word	0x08007d3f
 8007cb8:	08007d3f 	.word	0x08007d3f
 8007cbc:	08007d3f 	.word	0x08007d3f
 8007cc0:	08007d3f 	.word	0x08007d3f
 8007cc4:	08007d3f 	.word	0x08007d3f
 8007cc8:	08007cfb 	.word	0x08007cfb
 8007ccc:	08007d25 	.word	0x08007d25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d107      	bne.n	8007cec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cdc:	f107 030a 	add.w	r3, r7, #10
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fd3d 	bl	8009764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cea:	e032      	b.n	8007d52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fcbb 	bl	800966a <USBD_CtlError>
            ret = USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf8:	e02b      	b.n	8007d52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d107      	bne.n	8007d16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d06:	f107 030d 	add.w	r3, r7, #13
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 fd28 	bl	8009764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d14:	e01d      	b.n	8007d52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fca6 	bl	800966a <USBD_CtlError>
            ret = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	75fb      	strb	r3, [r7, #23]
          break;
 8007d22:	e016      	b.n	8007d52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d00f      	beq.n	8007d50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fc99 	bl	800966a <USBD_CtlError>
            ret = USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d3c:	e008      	b.n	8007d50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 fc92 	bl	800966a <USBD_CtlError>
          ret = USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	75fb      	strb	r3, [r7, #23]
          break;
 8007d4a:	e002      	b.n	8007d52 <USBD_CDC_Setup+0x19e>
          break;
 8007d4c:	bf00      	nop
 8007d4e:	e008      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>
          break;
 8007d50:	bf00      	nop
      }
      break;
 8007d52:	e006      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fc87 	bl	800966a <USBD_CtlError>
      ret = USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d60:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32b0      	adds	r2, #176	@ 0xb0
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e065      	b.n	8007e62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	32b0      	adds	r2, #176	@ 0xb0
 8007da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 020f 	and.w	r2, r3, #15
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	3318      	adds	r3, #24
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d02f      	beq.n	8007e20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 020f 	and.w	r2, r3, #15
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3318      	adds	r3, #24
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 010f 	and.w	r1, r3, #15
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	460b      	mov	r3, r1
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	440b      	add	r3, r1
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4403      	add	r3, r0
 8007de8:	331c      	adds	r3, #28
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	fbb2 f1f3 	udiv	r1, r2, r3
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d112      	bne.n	8007e20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	f003 020f 	and.w	r2, r3, #15
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	3318      	adds	r3, #24
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e12:	78f9      	ldrb	r1, [r7, #3]
 8007e14:	2300      	movs	r3, #0
 8007e16:	2200      	movs	r2, #0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f002 f9b6 	bl	800a18a <USBD_LL_Transmit>
 8007e1e:	e01f      	b.n	8007e60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	33b0      	adds	r3, #176	@ 0xb0
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d010      	beq.n	8007e60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	33b0      	adds	r3, #176	@ 0xb0
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	32b0      	adds	r2, #176	@ 0xb0
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	32b0      	adds	r2, #176	@ 0xb0
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e01a      	b.n	8007ed2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f002 f9b4 	bl	800a20e <USBD_LL_GetRxDataSize>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	33b0      	adds	r3, #176	@ 0xb0
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	32b0      	adds	r2, #176	@ 0xb0
 8007eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e024      	b.n	8007f46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	33b0      	adds	r3, #176	@ 0xb0
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d019      	beq.n	8007f44 <USBD_CDC_EP0_RxReady+0x6a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007f16:	2bff      	cmp	r3, #255	@ 0xff
 8007f18:	d014      	beq.n	8007f44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	33b0      	adds	r3, #176	@ 0xb0
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	22ff      	movs	r2, #255	@ 0xff
 8007f40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f58:	2182      	movs	r1, #130	@ 0x82
 8007f5a:	4818      	ldr	r0, [pc, #96]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f5c:	f000 fd4f 	bl	80089fe <USBD_GetEpDesc>
 8007f60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f62:	2101      	movs	r1, #1
 8007f64:	4815      	ldr	r0, [pc, #84]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f66:	f000 fd4a 	bl	80089fe <USBD_GetEpDesc>
 8007f6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f6c:	2181      	movs	r1, #129	@ 0x81
 8007f6e:	4813      	ldr	r0, [pc, #76]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f70:	f000 fd45 	bl	80089fe <USBD_GetEpDesc>
 8007f74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d006      	beq.n	8007f96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f90:	711a      	strb	r2, [r3, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d006      	beq.n	8007faa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa4:	711a      	strb	r2, [r3, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2243      	movs	r2, #67	@ 0x43
 8007fae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000084 	.word	0x20000084

08007fc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fc8:	2182      	movs	r1, #130	@ 0x82
 8007fca:	4818      	ldr	r0, [pc, #96]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fcc:	f000 fd17 	bl	80089fe <USBD_GetEpDesc>
 8007fd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4815      	ldr	r0, [pc, #84]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fd6:	f000 fd12 	bl	80089fe <USBD_GetEpDesc>
 8007fda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fdc:	2181      	movs	r1, #129	@ 0x81
 8007fde:	4813      	ldr	r0, [pc, #76]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fe0:	f000 fd0d 	bl	80089fe <USBD_GetEpDesc>
 8007fe4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	711a      	strb	r2, [r3, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f042 0202 	orr.w	r2, r2, #2
 8008004:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d006      	beq.n	800801a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	711a      	strb	r2, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f042 0202 	orr.w	r2, r2, #2
 8008018:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2243      	movs	r2, #67	@ 0x43
 800801e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008020:	4b02      	ldr	r3, [pc, #8]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000084 	.word	0x20000084

08008030 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008038:	2182      	movs	r1, #130	@ 0x82
 800803a:	4818      	ldr	r0, [pc, #96]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800803c:	f000 fcdf 	bl	80089fe <USBD_GetEpDesc>
 8008040:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008042:	2101      	movs	r1, #1
 8008044:	4815      	ldr	r0, [pc, #84]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008046:	f000 fcda 	bl	80089fe <USBD_GetEpDesc>
 800804a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800804c:	2181      	movs	r1, #129	@ 0x81
 800804e:	4813      	ldr	r0, [pc, #76]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008050:	f000 fcd5 	bl	80089fe <USBD_GetEpDesc>
 8008054:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2210      	movs	r2, #16
 8008060:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2200      	movs	r2, #0
 800806c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008070:	711a      	strb	r2, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d006      	beq.n	800808a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008084:	711a      	strb	r2, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2243      	movs	r2, #67	@ 0x43
 800808e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008090:	4b02      	ldr	r3, [pc, #8]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000084 	.word	0x20000084

080080a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220a      	movs	r2, #10
 80080ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000040 	.word	0x20000040

080080c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e009      	b.n	80080e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	33b0      	adds	r3, #176	@ 0xb0
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	32b0      	adds	r2, #176	@ 0xb0
 800810a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	e008      	b.n	800812c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32b0      	adds	r2, #176	@ 0xb0
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	e004      	b.n	8008166 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	32b0      	adds	r2, #176	@ 0xb0
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800818c:	2301      	movs	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	e025      	b.n	80081e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d11f      	bne.n	80081e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80081ac:	4b10      	ldr	r3, [pc, #64]	@ (80081f0 <USBD_CDC_TransmitPacket+0x7c>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4403      	add	r3, r0
 80081c6:	3318      	adds	r3, #24
 80081c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80081ca:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <USBD_CDC_TransmitPacket+0x7c>)
 80081cc:	7819      	ldrb	r1, [r3, #0]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 ffd5 	bl	800a18a <USBD_LL_Transmit>

    ret = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200000c7 	.word	0x200000c7

080081f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32b0      	adds	r2, #176	@ 0xb0
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32b0      	adds	r2, #176	@ 0xb0
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	e018      	b.n	8008254 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7c1b      	ldrb	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800822a:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <USBD_CDC_ReceivePacket+0x68>)
 800822c:	7819      	ldrb	r1, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 ffc7 	bl	800a1cc <USBD_LL_PrepareReceive>
 800823e:	e008      	b.n	8008252 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008240:	4b06      	ldr	r3, [pc, #24]	@ (800825c <USBD_CDC_ReceivePacket+0x68>)
 8008242:	7819      	ldrb	r1, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800824a:	2340      	movs	r3, #64	@ 0x40
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 ffbd 	bl	800a1cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200000c8 	.word	0x200000c8

08008260 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008274:	2303      	movs	r3, #3
 8008276:	e01f      	b.n	80082b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	79fa      	ldrb	r2, [r7, #7]
 80082aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 fe37 	bl	8009f20 <USBD_LL_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e025      	b.n	8008324 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	32ae      	adds	r2, #174	@ 0xae
 80082ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00f      	beq.n	8008314 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	32ae      	adds	r2, #174	@ 0xae
 80082fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	f107 020e 	add.w	r2, r7, #14
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	4602      	mov	r2, r0
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fe3f 	bl	8009fb8 <USBD_LL_Start>
 800833a:	4603      	mov	r3, r0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4611      	mov	r1, r2
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	78fa      	ldrb	r2, [r7, #3]
 80083ac:	4611      	mov	r1, r2
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083b8:	2303      	movs	r3, #3
 80083ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 f90c 	bl	80095f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80083ec:	461a      	mov	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d01a      	beq.n	8008438 <USBD_LL_SetupStage+0x72>
 8008402:	2b02      	cmp	r3, #2
 8008404:	d822      	bhi.n	800844c <USBD_LL_SetupStage+0x86>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <USBD_LL_SetupStage+0x4a>
 800840a:	2b01      	cmp	r3, #1
 800840c:	d00a      	beq.n	8008424 <USBD_LL_SetupStage+0x5e>
 800840e:	e01d      	b.n	800844c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fb63 	bl	8008ae4 <USBD_StdDevReq>
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]
      break;
 8008422:	e020      	b.n	8008466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fbcb 	bl	8008bc8 <USBD_StdItfReq>
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
      break;
 8008436:	e016      	b.n	8008466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc2d 	bl	8008ca0 <USBD_StdEPReq>
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
      break;
 800844a:	e00c      	b.n	8008466 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008452:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008456:	b2db      	uxtb	r3, r3
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f001 fe0c 	bl	800a078 <USBD_LL_StallEP>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	bf00      	nop
  }

  return ret;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	460b      	mov	r3, r1
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d16e      	bne.n	8008566 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800848e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008496:	2b03      	cmp	r3, #3
 8008498:	f040 8098 	bne.w	80085cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d913      	bls.n	80084d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	1ad2      	subs	r2, r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	4293      	cmp	r3, r2
 80084c0:	bf28      	it	cs
 80084c2:	4613      	movcs	r3, r2
 80084c4:	461a      	mov	r2, r3
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f001 f994 	bl	80097f6 <USBD_CtlContinueRx>
 80084ce:	e07d      	b.n	80085cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084d6:	f003 031f 	and.w	r3, r3, #31
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d014      	beq.n	8008508 <USBD_LL_DataOutStage+0x98>
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d81d      	bhi.n	800851e <USBD_LL_DataOutStage+0xae>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <USBD_LL_DataOutStage+0x7c>
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d003      	beq.n	80084f2 <USBD_LL_DataOutStage+0x82>
 80084ea:	e018      	b.n	800851e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	75bb      	strb	r3, [r7, #22]
            break;
 80084f0:	e018      	b.n	8008524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	4619      	mov	r1, r3
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fa64 	bl	80089ca <USBD_CoreFindIF>
 8008502:	4603      	mov	r3, r0
 8008504:	75bb      	strb	r3, [r7, #22]
            break;
 8008506:	e00d      	b.n	8008524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800850e:	b2db      	uxtb	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 fa66 	bl	80089e4 <USBD_CoreFindEP>
 8008518:	4603      	mov	r3, r0
 800851a:	75bb      	strb	r3, [r7, #22]
            break;
 800851c:	e002      	b.n	8008524 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	75bb      	strb	r3, [r7, #22]
            break;
 8008522:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008524:	7dbb      	ldrb	r3, [r7, #22]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d119      	bne.n	800855e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b03      	cmp	r3, #3
 8008534:	d113      	bne.n	800855e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008536:	7dba      	ldrb	r2, [r7, #22]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	32ae      	adds	r2, #174	@ 0xae
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008546:	7dba      	ldrb	r2, [r7, #22]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800854e:	7dba      	ldrb	r2, [r7, #22]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	32ae      	adds	r2, #174	@ 0xae
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f001 f95a 	bl	8009818 <USBD_CtlSendStatus>
 8008564:	e032      	b.n	80085cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800856c:	b2db      	uxtb	r3, r3
 800856e:	4619      	mov	r1, r3
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fa37 	bl	80089e4 <USBD_CoreFindEP>
 8008576:	4603      	mov	r3, r0
 8008578:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800857a:	7dbb      	ldrb	r3, [r7, #22]
 800857c:	2bff      	cmp	r3, #255	@ 0xff
 800857e:	d025      	beq.n	80085cc <USBD_LL_DataOutStage+0x15c>
 8008580:	7dbb      	ldrb	r3, [r7, #22]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d122      	bne.n	80085cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b03      	cmp	r3, #3
 8008590:	d117      	bne.n	80085c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008592:	7dba      	ldrb	r2, [r7, #22]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	32ae      	adds	r2, #174	@ 0xae
 8008598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80085a2:	7dba      	ldrb	r2, [r7, #22]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085aa:	7dba      	ldrb	r2, [r7, #22]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	32ae      	adds	r2, #174	@ 0xae
 80085b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	7afa      	ldrb	r2, [r7, #11]
 80085b8:	4611      	mov	r1, r2
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	e000      	b.n	80085ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b086      	sub	sp, #24
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	460b      	mov	r3, r1
 80085e0:	607a      	str	r2, [r7, #4]
 80085e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d16f      	bne.n	80086ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3314      	adds	r3, #20
 80085ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d15a      	bne.n	80086b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	429a      	cmp	r2, r3
 8008604:	d914      	bls.n	8008630 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	461a      	mov	r2, r3
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f001 f8bc 	bl	800979a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008622:	2300      	movs	r3, #0
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f001 fdcf 	bl	800a1cc <USBD_LL_PrepareReceive>
 800862e:	e03f      	b.n	80086b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	429a      	cmp	r2, r3
 800863a:	d11c      	bne.n	8008676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008644:	429a      	cmp	r2, r3
 8008646:	d316      	bcc.n	8008676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008652:	429a      	cmp	r2, r3
 8008654:	d20f      	bcs.n	8008676 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 f89d 	bl	800979a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008668:	2300      	movs	r3, #0
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f001 fdac 	bl	800a1cc <USBD_LL_PrepareReceive>
 8008674:	e01c      	b.n	80086b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b03      	cmp	r3, #3
 8008680:	d10f      	bne.n	80086a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086a2:	2180      	movs	r1, #128	@ 0x80
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f001 fce7 	bl	800a078 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f001 f8c7 	bl	800983e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d03a      	beq.n	8008730 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff fe42 	bl	8008344 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80086c8:	e032      	b.n	8008730 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086ca:	7afb      	ldrb	r3, [r7, #11]
 80086cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	4619      	mov	r1, r3
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f985 	bl	80089e4 <USBD_CoreFindEP>
 80086da:	4603      	mov	r3, r0
 80086dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	2bff      	cmp	r3, #255	@ 0xff
 80086e2:	d025      	beq.n	8008730 <USBD_LL_DataInStage+0x15a>
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d122      	bne.n	8008730 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d11c      	bne.n	8008730 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80086f6:	7dfa      	ldrb	r2, [r7, #23]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	32ae      	adds	r2, #174	@ 0xae
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d014      	beq.n	8008730 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008706:	7dfa      	ldrb	r2, [r7, #23]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800870e:	7dfa      	ldrb	r2, [r7, #23]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	32ae      	adds	r2, #174	@ 0xae
 8008714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	7afa      	ldrb	r2, [r7, #11]
 800871c:	4611      	mov	r1, r2
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	4798      	blx	r3
 8008722:	4603      	mov	r3, r0
 8008724:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008726:	7dbb      	ldrb	r3, [r7, #22]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800872c:	7dbb      	ldrb	r3, [r7, #22]
 800872e:	e000      	b.n	8008732 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d014      	beq.n	80087a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6852      	ldr	r2, [r2, #4]
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	4611      	mov	r1, r2
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800879c:	2303      	movs	r3, #3
 800879e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087a0:	2340      	movs	r3, #64	@ 0x40
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 fc21 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2240      	movs	r2, #64	@ 0x40
 80087b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087bc:	2340      	movs	r3, #64	@ 0x40
 80087be:	2200      	movs	r2, #0
 80087c0:	2180      	movs	r1, #128	@ 0x80
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fc13 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2240      	movs	r2, #64	@ 0x40
 80087d2:	621a      	str	r2, [r3, #32]

  return ret;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b04      	cmp	r3, #4
 8008810:	d006      	beq.n	8008820 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008818:	b2da      	uxtb	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2204      	movs	r2, #4
 8008824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b04      	cmp	r3, #4
 8008848:	d106      	bne.n	8008858 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008850:	b2da      	uxtb	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b03      	cmp	r3, #3
 8008878:	d110      	bne.n	800889c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	32ae      	adds	r2, #174	@ 0xae
 80088bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e01c      	b.n	8008902 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d115      	bne.n	8008900 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	32ae      	adds	r2, #174	@ 0xae
 80088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00b      	beq.n	8008900 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32ae      	adds	r2, #174	@ 0xae
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	4611      	mov	r1, r2
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	32ae      	adds	r2, #174	@ 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008928:	2303      	movs	r3, #3
 800892a:	e01c      	b.n	8008966 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b03      	cmp	r3, #3
 8008936:	d115      	bne.n	8008964 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32ae      	adds	r2, #174	@ 0xae
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32ae      	adds	r2, #174	@ 0xae
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	4611      	mov	r1, r2
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00e      	beq.n	80089c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6852      	ldr	r2, [r2, #4]
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	4611      	mov	r1, r2
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089bc:	2303      	movs	r3, #3
 80089be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	7812      	ldrb	r2, [r2, #0]
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d91f      	bls.n	8008a64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a2a:	e013      	b.n	8008a54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a2c:	f107 030a 	add.w	r3, r7, #10
 8008a30:	4619      	mov	r1, r3
 8008a32:	6978      	ldr	r0, [r7, #20]
 8008a34:	f000 f81b 	bl	8008a6e <USBD_GetNextDesc>
 8008a38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d108      	bne.n	8008a54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	789b      	ldrb	r3, [r3, #2]
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d008      	beq.n	8008a62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	885b      	ldrh	r3, [r3, #2]
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	897b      	ldrh	r3, [r7, #10]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d8e5      	bhi.n	8008a2c <USBD_GetEpDesc+0x2e>
 8008a60:	e000      	b.n	8008a64 <USBD_GetEpDesc+0x66>
          break;
 8008a62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a64:	693b      	ldr	r3, [r7, #16]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	4413      	add	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4413      	add	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a98:	68fb      	ldr	r3, [r7, #12]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	3301      	adds	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ac4:	8a3b      	ldrh	r3, [r7, #16]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	b21a      	sxth	r2, r3
 8008aca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ad4:	89fb      	ldrh	r3, [r7, #14]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008afa:	2b40      	cmp	r3, #64	@ 0x40
 8008afc:	d005      	beq.n	8008b0a <USBD_StdDevReq+0x26>
 8008afe:	2b40      	cmp	r3, #64	@ 0x40
 8008b00:	d857      	bhi.n	8008bb2 <USBD_StdDevReq+0xce>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00f      	beq.n	8008b26 <USBD_StdDevReq+0x42>
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d153      	bne.n	8008bb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	32ae      	adds	r2, #174	@ 0xae
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
      break;
 8008b24:	e04a      	b.n	8008bbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d83b      	bhi.n	8008ba6 <USBD_StdDevReq+0xc2>
 8008b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <USBD_StdDevReq+0x50>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b9d 	.word	0x08008b9d
 8008b3c:	08008ba7 	.word	0x08008ba7
 8008b40:	08008b93 	.word	0x08008b93
 8008b44:	08008ba7 	.word	0x08008ba7
 8008b48:	08008b67 	.word	0x08008b67
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008ba7 	.word	0x08008ba7
 8008b54:	08008b7f 	.word	0x08008b7f
 8008b58:	08008b71 	.word	0x08008b71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fa3c 	bl	8008fdc <USBD_GetDescriptor>
          break;
 8008b64:	e024      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fba1 	bl	80092b0 <USBD_SetAddress>
          break;
 8008b6e:	e01f      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fbe0 	bl	8009338 <USBD_SetConfig>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b7c:	e018      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fc83 	bl	800948c <USBD_GetConfig>
          break;
 8008b86:	e013      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fcb4 	bl	80094f8 <USBD_GetStatus>
          break;
 8008b90:	e00e      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fce3 	bl	8009560 <USBD_SetFeature>
          break;
 8008b9a:	e009      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fd07 	bl	80095b2 <USBD_ClrFeature>
          break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fd5e 	bl	800966a <USBD_CtlError>
          break;
 8008bae:	bf00      	nop
      }
      break;
 8008bb0:	e004      	b.n	8008bbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fd58 	bl	800966a <USBD_CtlError>
      break;
 8008bba:	bf00      	nop
  }

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop

08008bc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d005      	beq.n	8008bee <USBD_StdItfReq+0x26>
 8008be2:	2b40      	cmp	r3, #64	@ 0x40
 8008be4:	d852      	bhi.n	8008c8c <USBD_StdItfReq+0xc4>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <USBD_StdItfReq+0x26>
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d14e      	bne.n	8008c8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d840      	bhi.n	8008c7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	889b      	ldrh	r3, [r3, #4]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d836      	bhi.n	8008c74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	889b      	ldrh	r3, [r3, #4]
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fedb 	bl	80089ca <USBD_CoreFindIF>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2bff      	cmp	r3, #255	@ 0xff
 8008c1c:	d01d      	beq.n	8008c5a <USBD_StdItfReq+0x92>
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11a      	bne.n	8008c5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c24:	7bba      	ldrb	r2, [r7, #14]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	32ae      	adds	r2, #174	@ 0xae
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00f      	beq.n	8008c54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c34:	7bba      	ldrb	r2, [r7, #14]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c3c:	7bba      	ldrb	r2, [r7, #14]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	32ae      	adds	r2, #174	@ 0xae
 8008c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c52:	e004      	b.n	8008c5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c58:	e001      	b.n	8008c5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	88db      	ldrh	r3, [r3, #6]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d110      	bne.n	8008c88 <USBD_StdItfReq+0xc0>
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10d      	bne.n	8008c88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fdd3 	bl	8009818 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c72:	e009      	b.n	8008c88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fcf7 	bl	800966a <USBD_CtlError>
          break;
 8008c7c:	e004      	b.n	8008c88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fcf2 	bl	800966a <USBD_CtlError>
          break;
 8008c86:	e000      	b.n	8008c8a <USBD_StdItfReq+0xc2>
          break;
 8008c88:	bf00      	nop
      }
      break;
 8008c8a:	e004      	b.n	8008c96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fceb 	bl	800966a <USBD_CtlError>
      break;
 8008c94:	bf00      	nop
  }

  return ret;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	889b      	ldrh	r3, [r3, #4]
 8008cb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cbc:	2b40      	cmp	r3, #64	@ 0x40
 8008cbe:	d007      	beq.n	8008cd0 <USBD_StdEPReq+0x30>
 8008cc0:	2b40      	cmp	r3, #64	@ 0x40
 8008cc2:	f200 817f 	bhi.w	8008fc4 <USBD_StdEPReq+0x324>
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d02a      	beq.n	8008d20 <USBD_StdEPReq+0x80>
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	f040 817a 	bne.w	8008fc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff fe85 	bl	80089e4 <USBD_CoreFindEP>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cde:	7b7b      	ldrb	r3, [r7, #13]
 8008ce0:	2bff      	cmp	r3, #255	@ 0xff
 8008ce2:	f000 8174 	beq.w	8008fce <USBD_StdEPReq+0x32e>
 8008ce6:	7b7b      	ldrb	r3, [r7, #13]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f040 8170 	bne.w	8008fce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008cee:	7b7a      	ldrb	r2, [r7, #13]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008cf6:	7b7a      	ldrb	r2, [r7, #13]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	32ae      	adds	r2, #174	@ 0xae
 8008cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8163 	beq.w	8008fce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d08:	7b7a      	ldrb	r2, [r7, #13]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32ae      	adds	r2, #174	@ 0xae
 8008d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d1e:	e156      	b.n	8008fce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	785b      	ldrb	r3, [r3, #1]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d008      	beq.n	8008d3a <USBD_StdEPReq+0x9a>
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	f300 8145 	bgt.w	8008fb8 <USBD_StdEPReq+0x318>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 809b 	beq.w	8008e6a <USBD_StdEPReq+0x1ca>
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d03c      	beq.n	8008db2 <USBD_StdEPReq+0x112>
 8008d38:	e13e      	b.n	8008fb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d002      	beq.n	8008d4c <USBD_StdEPReq+0xac>
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d016      	beq.n	8008d78 <USBD_StdEPReq+0xd8>
 8008d4a:	e02c      	b.n	8008da6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00d      	beq.n	8008d6e <USBD_StdEPReq+0xce>
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b80      	cmp	r3, #128	@ 0x80
 8008d56:	d00a      	beq.n	8008d6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 f98b 	bl	800a078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d62:	2180      	movs	r1, #128	@ 0x80
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f987 	bl	800a078 <USBD_LL_StallEP>
 8008d6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d6c:	e020      	b.n	8008db0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fc7a 	bl	800966a <USBD_CtlError>
              break;
 8008d76:	e01b      	b.n	8008db0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	885b      	ldrh	r3, [r3, #2]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10e      	bne.n	8008d9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00b      	beq.n	8008d9e <USBD_StdEPReq+0xfe>
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b80      	cmp	r3, #128	@ 0x80
 8008d8a:	d008      	beq.n	8008d9e <USBD_StdEPReq+0xfe>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	88db      	ldrh	r3, [r3, #6]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d104      	bne.n	8008d9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f96d 	bl	800a078 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fd3a 	bl	8009818 <USBD_CtlSendStatus>

              break;
 8008da4:	e004      	b.n	8008db0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fc5e 	bl	800966a <USBD_CtlError>
              break;
 8008dae:	bf00      	nop
          }
          break;
 8008db0:	e107      	b.n	8008fc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d002      	beq.n	8008dc4 <USBD_StdEPReq+0x124>
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d016      	beq.n	8008df0 <USBD_StdEPReq+0x150>
 8008dc2:	e04b      	b.n	8008e5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00d      	beq.n	8008de6 <USBD_StdEPReq+0x146>
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	2b80      	cmp	r3, #128	@ 0x80
 8008dce:	d00a      	beq.n	8008de6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 f94f 	bl	800a078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dda:	2180      	movs	r1, #128	@ 0x80
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f94b 	bl	800a078 <USBD_LL_StallEP>
 8008de2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008de4:	e040      	b.n	8008e68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fc3e 	bl	800966a <USBD_CtlError>
              break;
 8008dee:	e03b      	b.n	8008e68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	885b      	ldrh	r3, [r3, #2]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d136      	bne.n	8008e66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 f955 	bl	800a0b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fd03 	bl	8009818 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff fde4 	bl	80089e4 <USBD_CoreFindEP>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e20:	7b7b      	ldrb	r3, [r7, #13]
 8008e22:	2bff      	cmp	r3, #255	@ 0xff
 8008e24:	d01f      	beq.n	8008e66 <USBD_StdEPReq+0x1c6>
 8008e26:	7b7b      	ldrb	r3, [r7, #13]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11c      	bne.n	8008e66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e2c:	7b7a      	ldrb	r2, [r7, #13]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e34:	7b7a      	ldrb	r2, [r7, #13]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32ae      	adds	r2, #174	@ 0xae
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e44:	7b7a      	ldrb	r2, [r7, #13]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32ae      	adds	r2, #174	@ 0xae
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e5a:	e004      	b.n	8008e66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fc03 	bl	800966a <USBD_CtlError>
              break;
 8008e64:	e000      	b.n	8008e68 <USBD_StdEPReq+0x1c8>
              break;
 8008e66:	bf00      	nop
          }
          break;
 8008e68:	e0ab      	b.n	8008fc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d002      	beq.n	8008e7c <USBD_StdEPReq+0x1dc>
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d032      	beq.n	8008ee0 <USBD_StdEPReq+0x240>
 8008e7a:	e097      	b.n	8008fac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <USBD_StdEPReq+0x1f2>
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b80      	cmp	r3, #128	@ 0x80
 8008e86:	d004      	beq.n	8008e92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fbed 	bl	800966a <USBD_CtlError>
                break;
 8008e90:	e091      	b.n	8008fb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	da0b      	bge.n	8008eb2 <USBD_StdEPReq+0x212>
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	3310      	adds	r3, #16
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	e00b      	b.n	8008eca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3304      	adds	r3, #4
 8008eca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fc43 	bl	8009764 <USBD_CtlSendData>
              break;
 8008ede:	e06a      	b.n	8008fb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	da11      	bge.n	8008f0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	f003 020f 	and.w	r2, r3, #15
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	3324      	adds	r3, #36	@ 0x24
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d117      	bne.n	8008f32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fbb0 	bl	800966a <USBD_CtlError>
                  break;
 8008f0a:	e054      	b.n	8008fb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	f003 020f 	and.w	r2, r3, #15
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fb9d 	bl	800966a <USBD_CtlError>
                  break;
 8008f30:	e041      	b.n	8008fb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da0b      	bge.n	8008f52 <USBD_StdEPReq+0x2b2>
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	3310      	adds	r3, #16
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3304      	adds	r3, #4
 8008f50:	e00b      	b.n	8008f6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <USBD_StdEPReq+0x2d8>
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b80      	cmp	r3, #128	@ 0x80
 8008f76:	d103      	bne.n	8008f80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	e00e      	b.n	8008f9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 f8b5 	bl	800a0f4 <USBD_LL_IsStallEP>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fbdd 	bl	8009764 <USBD_CtlSendData>
              break;
 8008faa:	e004      	b.n	8008fb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fb5b 	bl	800966a <USBD_CtlError>
              break;
 8008fb4:	bf00      	nop
          }
          break;
 8008fb6:	e004      	b.n	8008fc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fb55 	bl	800966a <USBD_CtlError>
          break;
 8008fc0:	bf00      	nop
      }
      break;
 8008fc2:	e005      	b.n	8008fd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fb4f 	bl	800966a <USBD_CtlError>
      break;
 8008fcc:	e000      	b.n	8008fd0 <USBD_StdEPReq+0x330>
      break;
 8008fce:	bf00      	nop
  }

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	885b      	ldrh	r3, [r3, #2]
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	2b06      	cmp	r3, #6
 8008ffe:	f200 8128 	bhi.w	8009252 <USBD_GetDescriptor+0x276>
 8009002:	a201      	add	r2, pc, #4	@ (adr r2, 8009008 <USBD_GetDescriptor+0x2c>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009025 	.word	0x08009025
 800900c:	0800903d 	.word	0x0800903d
 8009010:	0800907d 	.word	0x0800907d
 8009014:	08009253 	.word	0x08009253
 8009018:	08009253 	.word	0x08009253
 800901c:	080091f3 	.word	0x080091f3
 8009020:	0800921f 	.word	0x0800921f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	7c12      	ldrb	r2, [r2, #16]
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
 8009038:	60f8      	str	r0, [r7, #12]
      break;
 800903a:	e112      	b.n	8009262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	7c1b      	ldrb	r3, [r3, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10d      	bne.n	8009060 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800904a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904c:	f107 0208 	add.w	r2, r7, #8
 8009050:	4610      	mov	r0, r2
 8009052:	4798      	blx	r3
 8009054:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	2202      	movs	r2, #2
 800905c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800905e:	e100      	b.n	8009262 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009068:	f107 0208 	add.w	r2, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3301      	adds	r3, #1
 8009076:	2202      	movs	r2, #2
 8009078:	701a      	strb	r2, [r3, #0]
      break;
 800907a:	e0f2      	b.n	8009262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	885b      	ldrh	r3, [r3, #2]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b05      	cmp	r3, #5
 8009084:	f200 80ac 	bhi.w	80091e0 <USBD_GetDescriptor+0x204>
 8009088:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <USBD_GetDescriptor+0xb4>)
 800908a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908e:	bf00      	nop
 8009090:	080090a9 	.word	0x080090a9
 8009094:	080090dd 	.word	0x080090dd
 8009098:	08009111 	.word	0x08009111
 800909c:	08009145 	.word	0x08009145
 80090a0:	08009179 	.word	0x08009179
 80090a4:	080091ad 	.word	0x080091ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ca:	e091      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 facb 	bl	800966a <USBD_CtlError>
            err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
          break;
 80090da:	e089      	b.n	80091f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7c12      	ldrb	r2, [r2, #16]
 80090f4:	f107 0108 	add.w	r1, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090fe:	e077      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fab1 	bl	800966a <USBD_CtlError>
            err++;
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	3301      	adds	r3, #1
 800910c:	72fb      	strb	r3, [r7, #11]
          break;
 800910e:	e06f      	b.n	80091f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	7c12      	ldrb	r2, [r2, #16]
 8009128:	f107 0108 	add.w	r1, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009132:	e05d      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa97 	bl	800966a <USBD_CtlError>
            err++;
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	3301      	adds	r3, #1
 8009140:	72fb      	strb	r3, [r7, #11]
          break;
 8009142:	e055      	b.n	80091f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	7c12      	ldrb	r2, [r2, #16]
 800915c:	f107 0108 	add.w	r1, r7, #8
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
 8009164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009166:	e043      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fa7d 	bl	800966a <USBD_CtlError>
            err++;
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	3301      	adds	r3, #1
 8009174:	72fb      	strb	r3, [r7, #11]
          break;
 8009176:	e03b      	b.n	80091f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	7c12      	ldrb	r2, [r2, #16]
 8009190:	f107 0108 	add.w	r1, r7, #8
 8009194:	4610      	mov	r0, r2
 8009196:	4798      	blx	r3
 8009198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800919a:	e029      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa63 	bl	800966a <USBD_CtlError>
            err++;
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	3301      	adds	r3, #1
 80091a8:	72fb      	strb	r3, [r7, #11]
          break;
 80091aa:	e021      	b.n	80091f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7c12      	ldrb	r2, [r2, #16]
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ce:	e00f      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fa49 	bl	800966a <USBD_CtlError>
            err++;
 80091d8:	7afb      	ldrb	r3, [r7, #11]
 80091da:	3301      	adds	r3, #1
 80091dc:	72fb      	strb	r3, [r7, #11]
          break;
 80091de:	e007      	b.n	80091f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa41 	bl	800966a <USBD_CtlError>
          err++;
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	3301      	adds	r3, #1
 80091ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80091ee:	bf00      	nop
      }
      break;
 80091f0:	e037      	b.n	8009262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7c1b      	ldrb	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009202:	f107 0208 	add.w	r2, r7, #8
 8009206:	4610      	mov	r0, r2
 8009208:	4798      	blx	r3
 800920a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800920c:	e029      	b.n	8009262 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fa2a 	bl	800966a <USBD_CtlError>
        err++;
 8009216:	7afb      	ldrb	r3, [r7, #11]
 8009218:	3301      	adds	r3, #1
 800921a:	72fb      	strb	r3, [r7, #11]
      break;
 800921c:	e021      	b.n	8009262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7c1b      	ldrb	r3, [r3, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10d      	bne.n	8009242 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922e:	f107 0208 	add.w	r2, r7, #8
 8009232:	4610      	mov	r0, r2
 8009234:	4798      	blx	r3
 8009236:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3301      	adds	r3, #1
 800923c:	2207      	movs	r2, #7
 800923e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009240:	e00f      	b.n	8009262 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fa10 	bl	800966a <USBD_CtlError>
        err++;
 800924a:	7afb      	ldrb	r3, [r7, #11]
 800924c:	3301      	adds	r3, #1
 800924e:	72fb      	strb	r3, [r7, #11]
      break;
 8009250:	e007      	b.n	8009262 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fa08 	bl	800966a <USBD_CtlError>
      err++;
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	3301      	adds	r3, #1
 800925e:	72fb      	strb	r3, [r7, #11]
      break;
 8009260:	bf00      	nop
  }

  if (err != 0U)
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d11e      	bne.n	80092a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	88db      	ldrh	r3, [r3, #6]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d016      	beq.n	800929e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009270:	893b      	ldrh	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00e      	beq.n	8009294 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	88da      	ldrh	r2, [r3, #6]
 800927a:	893b      	ldrh	r3, [r7, #8]
 800927c:	4293      	cmp	r3, r2
 800927e:	bf28      	it	cs
 8009280:	4613      	movcs	r3, r2
 8009282:	b29b      	uxth	r3, r3
 8009284:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009286:	893b      	ldrh	r3, [r7, #8]
 8009288:	461a      	mov	r2, r3
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa69 	bl	8009764 <USBD_CtlSendData>
 8009292:	e009      	b.n	80092a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f9e7 	bl	800966a <USBD_CtlError>
 800929c:	e004      	b.n	80092a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 faba 	bl	8009818 <USBD_CtlSendStatus>
 80092a4:	e000      	b.n	80092a8 <USBD_GetDescriptor+0x2cc>
    return;
 80092a6:	bf00      	nop
  }
}
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop

080092b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	889b      	ldrh	r3, [r3, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d131      	bne.n	8009326 <USBD_SetAddress+0x76>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d12d      	bne.n	8009326 <USBD_SetAddress+0x76>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80092d0:	d829      	bhi.n	8009326 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d104      	bne.n	80092f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9bc 	bl	800966a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f2:	e01d      	b.n	8009330 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	7bfa      	ldrb	r2, [r7, #15]
 80092f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 ff23 	bl	800a14c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa86 	bl	8009818 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931a:	e009      	b.n	8009330 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009324:	e004      	b.n	8009330 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f99e 	bl	800966a <USBD_CtlError>
  }
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	885b      	ldrh	r3, [r3, #2]
 800934a:	b2da      	uxtb	r2, r3
 800934c:	4b4e      	ldr	r3, [pc, #312]	@ (8009488 <USBD_SetConfig+0x150>)
 800934e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009350:	4b4d      	ldr	r3, [pc, #308]	@ (8009488 <USBD_SetConfig+0x150>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d905      	bls.n	8009364 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f985 	bl	800966a <USBD_CtlError>
    return USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	e08c      	b.n	800947e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d002      	beq.n	8009376 <USBD_SetConfig+0x3e>
 8009370:	2b03      	cmp	r3, #3
 8009372:	d029      	beq.n	80093c8 <USBD_SetConfig+0x90>
 8009374:	e075      	b.n	8009462 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009376:	4b44      	ldr	r3, [pc, #272]	@ (8009488 <USBD_SetConfig+0x150>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d020      	beq.n	80093c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800937e:	4b42      	ldr	r3, [pc, #264]	@ (8009488 <USBD_SetConfig+0x150>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009388:	4b3f      	ldr	r3, [pc, #252]	@ (8009488 <USBD_SetConfig+0x150>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7fe ffe3 	bl	800835a <USBD_SetClassConfig>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d008      	beq.n	80093b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f962 	bl	800966a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093ae:	e065      	b.n	800947c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fa31 	bl	8009818 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2203      	movs	r2, #3
 80093ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093be:	e05d      	b.n	800947c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fa29 	bl	8009818 <USBD_CtlSendStatus>
      break;
 80093c6:	e059      	b.n	800947c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093c8:	4b2f      	ldr	r3, [pc, #188]	@ (8009488 <USBD_SetConfig+0x150>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d112      	bne.n	80093f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80093d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009488 <USBD_SetConfig+0x150>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093e2:	4b29      	ldr	r3, [pc, #164]	@ (8009488 <USBD_SetConfig+0x150>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7fe ffd2 	bl	8008392 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa12 	bl	8009818 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093f4:	e042      	b.n	800947c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80093f6:	4b24      	ldr	r3, [pc, #144]	@ (8009488 <USBD_SetConfig+0x150>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d02a      	beq.n	800945a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7fe ffc0 	bl	8008392 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009412:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <USBD_SetConfig+0x150>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800941c:	4b1a      	ldr	r3, [pc, #104]	@ (8009488 <USBD_SetConfig+0x150>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7fe ff99 	bl	800835a <USBD_SetClassConfig>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00f      	beq.n	8009452 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f918 	bl	800966a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7fe ffa5 	bl	8008392 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009450:	e014      	b.n	800947c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f9e0 	bl	8009818 <USBD_CtlSendStatus>
      break;
 8009458:	e010      	b.n	800947c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f9dc 	bl	8009818 <USBD_CtlSendStatus>
      break;
 8009460:	e00c      	b.n	800947c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f900 	bl	800966a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800946a:	4b07      	ldr	r3, [pc, #28]	@ (8009488 <USBD_SetConfig+0x150>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7fe ff8e 	bl	8008392 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009476:	2303      	movs	r3, #3
 8009478:	73fb      	strb	r3, [r7, #15]
      break;
 800947a:	bf00      	nop
  }

  return ret;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000e04 	.word	0x20000e04

0800948c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d004      	beq.n	80094a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f8e2 	bl	800966a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094a6:	e023      	b.n	80094f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	dc02      	bgt.n	80094ba <USBD_GetConfig+0x2e>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	dc03      	bgt.n	80094c0 <USBD_GetConfig+0x34>
 80094b8:	e015      	b.n	80094e6 <USBD_GetConfig+0x5a>
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d00b      	beq.n	80094d6 <USBD_GetConfig+0x4a>
 80094be:	e012      	b.n	80094e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3308      	adds	r3, #8
 80094ca:	2201      	movs	r2, #1
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f948 	bl	8009764 <USBD_CtlSendData>
        break;
 80094d4:	e00c      	b.n	80094f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3304      	adds	r3, #4
 80094da:	2201      	movs	r2, #1
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f940 	bl	8009764 <USBD_CtlSendData>
        break;
 80094e4:	e004      	b.n	80094f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f8be 	bl	800966a <USBD_CtlError>
        break;
 80094ee:	bf00      	nop
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009508:	b2db      	uxtb	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	2b02      	cmp	r3, #2
 800950e:	d81e      	bhi.n	800954e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	88db      	ldrh	r3, [r3, #6]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d004      	beq.n	8009522 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f8a5 	bl	800966a <USBD_CtlError>
        break;
 8009520:	e01a      	b.n	8009558 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f043 0202 	orr.w	r2, r3, #2
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	330c      	adds	r3, #12
 8009542:	2202      	movs	r2, #2
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f90c 	bl	8009764 <USBD_CtlSendData>
      break;
 800954c:	e004      	b.n	8009558 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f88a 	bl	800966a <USBD_CtlError>
      break;
 8009556:	bf00      	nop
  }
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d107      	bne.n	8009582 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f94c 	bl	8009818 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009580:	e013      	b.n	80095aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	885b      	ldrh	r3, [r3, #2]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d10b      	bne.n	80095a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	889b      	ldrh	r3, [r3, #4]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	b29b      	uxth	r3, r3
 8009592:	b2da      	uxtb	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f93c 	bl	8009818 <USBD_CtlSendStatus>
}
 80095a0:	e003      	b.n	80095aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f860 	bl	800966a <USBD_CtlError>
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d80b      	bhi.n	80095e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	885b      	ldrh	r3, [r3, #2]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10c      	bne.n	80095ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f91c 	bl	8009818 <USBD_CtlSendStatus>
      }
      break;
 80095e0:	e004      	b.n	80095ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f840 	bl	800966a <USBD_CtlError>
      break;
 80095ea:	e000      	b.n	80095ee <USBD_ClrFeature+0x3c>
      break;
 80095ec:	bf00      	nop
  }
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	781a      	ldrb	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3301      	adds	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3301      	adds	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fa40 	bl	8008aa6 <SWAPBYTE>
 8009626:	4603      	mov	r3, r0
 8009628:	461a      	mov	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fa33 	bl	8008aa6 <SWAPBYTE>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3301      	adds	r3, #1
 8009652:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff fa26 	bl	8008aa6 <SWAPBYTE>
 800965a:	4603      	mov	r3, r0
 800965c:	461a      	mov	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	80da      	strh	r2, [r3, #6]
}
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009674:	2180      	movs	r1, #128	@ 0x80
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fcfe 	bl	800a078 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800967c:	2100      	movs	r1, #0
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fcfa 	bl	800a078 <USBD_LL_StallEP>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d042      	beq.n	8009728 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80096a6:	6938      	ldr	r0, [r7, #16]
 80096a8:	f000 f842 	bl	8009730 <USBD_GetLen>
 80096ac:	4603      	mov	r3, r0
 80096ae:	3301      	adds	r3, #1
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096b6:	d808      	bhi.n	80096ca <USBD_GetString+0x3e>
 80096b8:	6938      	ldr	r0, [r7, #16]
 80096ba:	f000 f839 	bl	8009730 <USBD_GetLen>
 80096be:	4603      	mov	r3, r0
 80096c0:	3301      	adds	r3, #1
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	e001      	b.n	80096ce <USBD_GetString+0x42>
 80096ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	4413      	add	r3, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	3301      	adds	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	2203      	movs	r2, #3
 80096ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	3301      	adds	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80096f4:	e013      	b.n	800971e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	4413      	add	r3, r2
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	7812      	ldrb	r2, [r2, #0]
 8009700:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3301      	adds	r3, #1
 8009706:	613b      	str	r3, [r7, #16]
    idx++;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	3301      	adds	r3, #1
 800970c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	4413      	add	r3, r2
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
    idx++;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	3301      	adds	r3, #1
 800971c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e7      	bne.n	80096f6 <USBD_GetString+0x6a>
 8009726:	e000      	b.n	800972a <USBD_GetString+0x9e>
    return;
 8009728:	bf00      	nop
  }
}
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009740:	e005      	b.n	800974e <USBD_GetLen+0x1e>
  {
    len++;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	3301      	adds	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	3301      	adds	r3, #1
 800974c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f5      	bne.n	8009742 <USBD_GetLen+0x12>
  }

  return len;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2202      	movs	r2, #2
 8009774:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	2100      	movs	r1, #0
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fcfd 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fcec 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2203      	movs	r2, #3
 80097cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	2100      	movs	r1, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fcf0 	bl	800a1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fcdf 	bl	800a1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2204      	movs	r2, #4
 8009824:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009828:	2300      	movs	r3, #0
 800982a:	2200      	movs	r2, #0
 800982c:	2100      	movs	r1, #0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fcab 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2205      	movs	r2, #5
 800984a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800984e:	2300      	movs	r3, #0
 8009850:	2200      	movs	r2, #0
 8009852:	2100      	movs	r1, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fcb9 	bl	800a1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009868:	2200      	movs	r2, #0
 800986a:	4912      	ldr	r1, [pc, #72]	@ (80098b4 <MX_USB_DEVICE_Init+0x50>)
 800986c:	4812      	ldr	r0, [pc, #72]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 800986e:	f7fe fcf7 	bl	8008260 <USBD_Init>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009878:	f7f8 fe28 	bl	80024cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800987c:	490f      	ldr	r1, [pc, #60]	@ (80098bc <MX_USB_DEVICE_Init+0x58>)
 800987e:	480e      	ldr	r0, [pc, #56]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 8009880:	f7fe fd1e 	bl	80082c0 <USBD_RegisterClass>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800988a:	f7f8 fe1f 	bl	80024cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800988e:	490c      	ldr	r1, [pc, #48]	@ (80098c0 <MX_USB_DEVICE_Init+0x5c>)
 8009890:	4809      	ldr	r0, [pc, #36]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 8009892:	f7fe fc15 	bl	80080c0 <USBD_CDC_RegisterInterface>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800989c:	f7f8 fe16 	bl	80024cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098a0:	4805      	ldr	r0, [pc, #20]	@ (80098b8 <MX_USB_DEVICE_Init+0x54>)
 80098a2:	f7fe fd43 	bl	800832c <USBD_Start>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098ac:	f7f8 fe0e 	bl	80024cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098b0:	bf00      	nop
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	200000e0 	.word	0x200000e0
 80098b8:	20000e08 	.word	0x20000e08
 80098bc:	2000004c 	.word	0x2000004c
 80098c0:	200000cc 	.word	0x200000cc

080098c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098c8:	2200      	movs	r2, #0
 80098ca:	4905      	ldr	r1, [pc, #20]	@ (80098e0 <CDC_Init_FS+0x1c>)
 80098cc:	4805      	ldr	r0, [pc, #20]	@ (80098e4 <CDC_Init_FS+0x20>)
 80098ce:	f7fe fc11 	bl	80080f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098d2:	4905      	ldr	r1, [pc, #20]	@ (80098e8 <CDC_Init_FS+0x24>)
 80098d4:	4803      	ldr	r0, [pc, #12]	@ (80098e4 <CDC_Init_FS+0x20>)
 80098d6:	f7fe fc2f 	bl	8008138 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098dc:	4618      	mov	r0, r3
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200018e4 	.word	0x200018e4
 80098e4:	20000e08 	.word	0x20000e08
 80098e8:	200010e4 	.word	0x200010e4

080098ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	6039      	str	r1, [r7, #0]
 8009906:	71fb      	strb	r3, [r7, #7]
 8009908:	4613      	mov	r3, r2
 800990a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	2b23      	cmp	r3, #35	@ 0x23
 8009910:	d84a      	bhi.n	80099a8 <CDC_Control_FS+0xac>
 8009912:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <CDC_Control_FS+0x1c>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	080099a9 	.word	0x080099a9
 800991c:	080099a9 	.word	0x080099a9
 8009920:	080099a9 	.word	0x080099a9
 8009924:	080099a9 	.word	0x080099a9
 8009928:	080099a9 	.word	0x080099a9
 800992c:	080099a9 	.word	0x080099a9
 8009930:	080099a9 	.word	0x080099a9
 8009934:	080099a9 	.word	0x080099a9
 8009938:	080099a9 	.word	0x080099a9
 800993c:	080099a9 	.word	0x080099a9
 8009940:	080099a9 	.word	0x080099a9
 8009944:	080099a9 	.word	0x080099a9
 8009948:	080099a9 	.word	0x080099a9
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099a9 	.word	0x080099a9
 8009954:	080099a9 	.word	0x080099a9
 8009958:	080099a9 	.word	0x080099a9
 800995c:	080099a9 	.word	0x080099a9
 8009960:	080099a9 	.word	0x080099a9
 8009964:	080099a9 	.word	0x080099a9
 8009968:	080099a9 	.word	0x080099a9
 800996c:	080099a9 	.word	0x080099a9
 8009970:	080099a9 	.word	0x080099a9
 8009974:	080099a9 	.word	0x080099a9
 8009978:	080099a9 	.word	0x080099a9
 800997c:	080099a9 	.word	0x080099a9
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099a9 	.word	0x080099a9
 800998c:	080099a9 	.word	0x080099a9
 8009990:	080099a9 	.word	0x080099a9
 8009994:	080099a9 	.word	0x080099a9
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099a9 	.word	0x080099a9
 80099a0:	080099a9 	.word	0x080099a9
 80099a4:	080099a9 	.word	0x080099a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099a8:	bf00      	nop
  }

  return (USBD_OK);
 80099aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	480c      	ldr	r0, [pc, #48]	@ (80099f8 <CDC_Receive_FS+0x40>)
 80099c6:	f7fe fbb7 	bl	8008138 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099ca:	480b      	ldr	r0, [pc, #44]	@ (80099f8 <CDC_Receive_FS+0x40>)
 80099cc:	f7fe fc12 	bl	80081f4 <USBD_CDC_ReceivePacket>
  memcpy(recv_buff, Buf, (size_t) *Len);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4808      	ldr	r0, [pc, #32]	@ (80099fc <CDC_Receive_FS+0x44>)
 80099da:	f000 fef4 	bl	800a7c6 <memcpy>
  recv_buff[*Len] = 0;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a06      	ldr	r2, [pc, #24]	@ (80099fc <CDC_Receive_FS+0x44>)
 80099e4:	2100      	movs	r1, #0
 80099e6:	54d1      	strb	r1, [r2, r3]
  new = 1;
 80099e8:	4b05      	ldr	r3, [pc, #20]	@ (8009a00 <CDC_Receive_FS+0x48>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80099ee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000e08 	.word	0x20000e08
 80099fc:	20000300 	.word	0x20000300
 8009a00:	20000341 	.word	0x20000341

08009a04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a14:	4b0d      	ldr	r3, [pc, #52]	@ (8009a4c <CDC_Transmit_FS+0x48>)
 8009a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e00b      	b.n	8009a42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a2a:	887b      	ldrh	r3, [r7, #2]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4806      	ldr	r0, [pc, #24]	@ (8009a4c <CDC_Transmit_FS+0x48>)
 8009a32:	f7fe fb5f 	bl	80080f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a36:	4805      	ldr	r0, [pc, #20]	@ (8009a4c <CDC_Transmit_FS+0x48>)
 8009a38:	f7fe fb9c 	bl	8008174 <USBD_CDC_TransmitPacket>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000e08 	.word	0x20000e08

08009a50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
	...

08009a74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2212      	movs	r2, #18
 8009a84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a86:	4b03      	ldr	r3, [pc, #12]	@ (8009a94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	200000fc 	.word	0x200000fc

08009a98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	6039      	str	r1, [r7, #0]
 8009aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009aaa:	4b03      	ldr	r3, [pc, #12]	@ (8009ab8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20000110 	.word	0x20000110

08009abc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4907      	ldr	r1, [pc, #28]	@ (8009af0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ad2:	4808      	ldr	r0, [pc, #32]	@ (8009af4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ad4:	f7ff fdda 	bl	800968c <USBD_GetString>
 8009ad8:	e004      	b.n	8009ae4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4904      	ldr	r1, [pc, #16]	@ (8009af0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ade:	4805      	ldr	r0, [pc, #20]	@ (8009af4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ae0:	f7ff fdd4 	bl	800968c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ae4:	4b02      	ldr	r3, [pc, #8]	@ (8009af0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200020e4 	.word	0x200020e4
 8009af4:	0800c934 	.word	0x0800c934

08009af8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	6039      	str	r1, [r7, #0]
 8009b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	4904      	ldr	r1, [pc, #16]	@ (8009b18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b08:	4804      	ldr	r0, [pc, #16]	@ (8009b1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b0a:	f7ff fdbf 	bl	800968c <USBD_GetString>
  return USBD_StrDesc;
 8009b0e:	4b02      	ldr	r3, [pc, #8]	@ (8009b18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	200020e4 	.word	0x200020e4
 8009b1c:	0800c94c 	.word	0x0800c94c

08009b20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	221a      	movs	r2, #26
 8009b30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b32:	f000 f843 	bl	8009bbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b36:	4b02      	ldr	r3, [pc, #8]	@ (8009b40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000114 	.word	0x20000114

08009b44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d105      	bne.n	8009b62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4907      	ldr	r1, [pc, #28]	@ (8009b78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b5a:	4808      	ldr	r0, [pc, #32]	@ (8009b7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b5c:	f7ff fd96 	bl	800968c <USBD_GetString>
 8009b60:	e004      	b.n	8009b6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	4904      	ldr	r1, [pc, #16]	@ (8009b78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b66:	4805      	ldr	r0, [pc, #20]	@ (8009b7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b68:	f7ff fd90 	bl	800968c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b6c:	4b02      	ldr	r3, [pc, #8]	@ (8009b78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200020e4 	.word	0x200020e4
 8009b7c:	0800c960 	.word	0x0800c960

08009b80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	6039      	str	r1, [r7, #0]
 8009b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4907      	ldr	r1, [pc, #28]	@ (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b96:	4808      	ldr	r0, [pc, #32]	@ (8009bb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b98:	f7ff fd78 	bl	800968c <USBD_GetString>
 8009b9c:	e004      	b.n	8009ba8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	4904      	ldr	r1, [pc, #16]	@ (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ba2:	4805      	ldr	r0, [pc, #20]	@ (8009bb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ba4:	f7ff fd72 	bl	800968c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ba8:	4b02      	ldr	r3, [pc, #8]	@ (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	200020e4 	.word	0x200020e4
 8009bb8:	0800c96c 	.word	0x0800c96c

08009bbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c00 <Get_SerialNum+0x44>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009c04 <Get_SerialNum+0x48>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bce:	4b0e      	ldr	r3, [pc, #56]	@ (8009c08 <Get_SerialNum+0x4c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4413      	add	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009be2:	2208      	movs	r2, #8
 8009be4:	4909      	ldr	r1, [pc, #36]	@ (8009c0c <Get_SerialNum+0x50>)
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 f814 	bl	8009c14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bec:	2204      	movs	r2, #4
 8009bee:	4908      	ldr	r1, [pc, #32]	@ (8009c10 <Get_SerialNum+0x54>)
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f000 f80f 	bl	8009c14 <IntToUnicode>
  }
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	1fff7a10 	.word	0x1fff7a10
 8009c04:	1fff7a14 	.word	0x1fff7a14
 8009c08:	1fff7a18 	.word	0x1fff7a18
 8009c0c:	20000116 	.word	0x20000116
 8009c10:	20000126 	.word	0x20000126

08009c14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c26:	2300      	movs	r3, #0
 8009c28:	75fb      	strb	r3, [r7, #23]
 8009c2a:	e027      	b.n	8009c7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	0f1b      	lsrs	r3, r3, #28
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d80b      	bhi.n	8009c4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	0f1b      	lsrs	r3, r3, #28
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	440b      	add	r3, r1
 8009c44:	3230      	adds	r2, #48	@ 0x30
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e00a      	b.n	8009c62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0f1b      	lsrs	r3, r3, #28
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4619      	mov	r1, r3
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3237      	adds	r2, #55	@ 0x37
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	75fb      	strb	r3, [r7, #23]
 8009c7c:	7dfa      	ldrb	r2, [r7, #23]
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d3d3      	bcc.n	8009c2c <IntToUnicode+0x18>
  }
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08a      	sub	sp, #40	@ 0x28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c9c:	f107 0314 	add.w	r3, r7, #20
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	609a      	str	r2, [r3, #8]
 8009ca8:	60da      	str	r2, [r3, #12]
 8009caa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cb4:	d13a      	bne.n	8009d2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	4b1e      	ldr	r3, [pc, #120]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009cc0:	f043 0301 	orr.w	r3, r3, #1
 8009cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009cd2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cd8:	2302      	movs	r3, #2
 8009cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ce4:	230a      	movs	r3, #10
 8009ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ce8:	f107 0314 	add.w	r3, r7, #20
 8009cec:	4619      	mov	r1, r3
 8009cee:	4812      	ldr	r0, [pc, #72]	@ (8009d38 <HAL_PCD_MspInit+0xa4>)
 8009cf0:	f7f9 fab6 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cfe:	6353      	str	r3, [r2, #52]	@ 0x34
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	4b0b      	ldr	r3, [pc, #44]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d08:	4a0a      	ldr	r2, [pc, #40]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d10:	4b08      	ldr	r3, [pc, #32]	@ (8009d34 <HAL_PCD_MspInit+0xa0>)
 8009d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	2043      	movs	r0, #67	@ 0x43
 8009d22:	f7f9 fa66 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d26:	2043      	movs	r0, #67	@ 0x43
 8009d28:	f7f9 fa7f 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	3728      	adds	r7, #40	@ 0x28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	40023800 	.word	0x40023800
 8009d38:	40020000 	.word	0x40020000

08009d3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009d50:	4619      	mov	r1, r3
 8009d52:	4610      	mov	r0, r2
 8009d54:	f7fe fb37 	bl	80083c6 <USBD_LL_SetupStage>
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	440b      	add	r3, r1
 8009d80:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f7fe fb71 	bl	8008470 <USBD_LL_DataOutStage>
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009da8:	78fa      	ldrb	r2, [r7, #3]
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	4613      	mov	r3, r2
 8009dae:	00db      	lsls	r3, r3, #3
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	3320      	adds	r3, #32
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f7fe fc0a 	bl	80085d6 <USBD_LL_DataInStage>
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fd44 	bl	8008866 <USBD_LL_SOF>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009dee:	2301      	movs	r3, #1
 8009df0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	79db      	ldrb	r3, [r3, #7]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
 8009dfe:	e008      	b.n	8009e12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	79db      	ldrb	r3, [r3, #7]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d102      	bne.n	8009e0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
 8009e0c:	e001      	b.n	8009e12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e0e:	f7f8 fb5d 	bl	80024cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e18:	7bfa      	ldrb	r2, [r7, #15]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fcde 	bl	80087de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fe fc86 	bl	800873a <USBD_LL_Reset>
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fcd9 	bl	80087fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	6812      	ldr	r2, [r2, #0]
 8009e5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7adb      	ldrb	r3, [r3, #11]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d005      	beq.n	8009e78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e6c:	4b04      	ldr	r3, [pc, #16]	@ (8009e80 <HAL_PCD_SuspendCallback+0x48>)
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	4a03      	ldr	r2, [pc, #12]	@ (8009e80 <HAL_PCD_SuspendCallback+0x48>)
 8009e72:	f043 0306 	orr.w	r3, r3, #6
 8009e76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	e000ed00 	.word	0xe000ed00

08009e84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe fccf 	bl	8008836 <USBD_LL_Resume>
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009eb2:	78fa      	ldrb	r2, [r7, #3]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fd27 	bl	800890a <USBD_LL_IsoOUTIncomplete>
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe fce3 	bl	80088a6 <USBD_LL_IsoINIncomplete>
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fd39 	bl	800896e <USBD_LL_DevConnected>
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fd36 	bl	8008984 <USBD_LL_DevDisconnected>
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d13c      	bne.n	8009faa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f30:	4a20      	ldr	r2, [pc, #128]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f3c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f40:	4b1c      	ldr	r3, [pc, #112]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009f46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f48:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f4e:	4b19      	ldr	r3, [pc, #100]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f50:	2202      	movs	r2, #2
 8009f52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f54:	4b17      	ldr	r3, [pc, #92]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f5a:	4b16      	ldr	r3, [pc, #88]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f60:	4b14      	ldr	r3, [pc, #80]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f66:	4b13      	ldr	r3, [pc, #76]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f6c:	4b11      	ldr	r3, [pc, #68]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f72:	4b10      	ldr	r3, [pc, #64]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f78:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f7e:	480d      	ldr	r0, [pc, #52]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f80:	f7f9 fc9a 	bl	80038b8 <HAL_PCD_Init>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f8a:	f7f8 fa9f 	bl	80024cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f8e:	2180      	movs	r1, #128	@ 0x80
 8009f90:	4808      	ldr	r0, [pc, #32]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f92:	f7fa fec6 	bl	8004d22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f96:	2240      	movs	r2, #64	@ 0x40
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4806      	ldr	r0, [pc, #24]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009f9c:	f7fa fe7a 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fa0:	2280      	movs	r2, #128	@ 0x80
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	4803      	ldr	r0, [pc, #12]	@ (8009fb4 <USBD_LL_Init+0x94>)
 8009fa6:	f7fa fe75 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	200022e4 	.word	0x200022e4

08009fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f9 fd81 	bl	8003ad6 <HAL_PCD_Start>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f942 	bl	800a264 <USBD_Get_USB_Status>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	70fb      	strb	r3, [r7, #3]
 800a000:	460b      	mov	r3, r1
 800a002:	70bb      	strb	r3, [r7, #2]
 800a004:	4613      	mov	r3, r2
 800a006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a016:	78bb      	ldrb	r3, [r7, #2]
 800a018:	883a      	ldrh	r2, [r7, #0]
 800a01a:	78f9      	ldrb	r1, [r7, #3]
 800a01c:	f7fa fa55 	bl	80044ca <HAL_PCD_EP_Open>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f91c 	bl	800a264 <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fa faa0 	bl	800459e <HAL_PCD_EP_Close>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f8fd 	bl	800a264 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a092:	78fa      	ldrb	r2, [r7, #3]
 800a094:	4611      	mov	r1, r2
 800a096:	4618      	mov	r0, r3
 800a098:	f7fa fb58 	bl	800474c <HAL_PCD_EP_SetStall>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f8de 	bl	800a264 <USBD_Get_USB_Status>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fa fb9c 	bl	8004812 <HAL_PCD_EP_ClrStall>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f8bf 	bl	800a264 <USBD_Get_USB_Status>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	da0b      	bge.n	800a128 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a116:	68f9      	ldr	r1, [r7, #12]
 800a118:	4613      	mov	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	440b      	add	r3, r1
 800a122:	3316      	adds	r3, #22
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	e00b      	b.n	800a140 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a12e:	68f9      	ldr	r1, [r7, #12]
 800a130:	4613      	mov	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a13e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fa f989 	bl	8004482 <HAL_PCD_SetAddress>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f874 	bl	800a264 <USBD_Get_USB_Status>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a180:	7bbb      	ldrb	r3, [r7, #14]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b086      	sub	sp, #24
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	460b      	mov	r3, r1
 800a198:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1a8:	7af9      	ldrb	r1, [r7, #11]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	f7fa fa93 	bl	80046d8 <HAL_PCD_EP_Transmit>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f853 	bl	800a264 <USBD_Get_USB_Status>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1ea:	7af9      	ldrb	r1, [r7, #11]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	f7fa fa1f 	bl	8004632 <HAL_PCD_EP_Receive>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f8:	7dfb      	ldrb	r3, [r7, #23]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 f832 	bl	800a264 <USBD_Get_USB_Status>
 800a200:	4603      	mov	r3, r0
 800a202:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a204:	7dbb      	ldrb	r3, [r7, #22]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a220:	78fa      	ldrb	r2, [r7, #3]
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f7fa fa3f 	bl	80046a8 <HAL_PCD_EP_GetRxCount>
 800a22a:	4603      	mov	r3, r0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a23c:	4b03      	ldr	r3, [pc, #12]	@ (800a24c <USBD_static_malloc+0x18>)
}
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	200027c8 	.word	0x200027c8

0800a250 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]

}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d817      	bhi.n	800a2a8 <USBD_Get_USB_Status+0x44>
 800a278:	a201      	add	r2, pc, #4	@ (adr r2, 800a280 <USBD_Get_USB_Status+0x1c>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a297 	.word	0x0800a297
 800a288:	0800a29d 	.word	0x0800a29d
 800a28c:	0800a2a3 	.word	0x0800a2a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
    break;
 800a294:	e00b      	b.n	800a2ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	73fb      	strb	r3, [r7, #15]
    break;
 800a29a:	e008      	b.n	800a2ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a29c:	2301      	movs	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a0:	e005      	b.n	800a2ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a6:	e002      	b.n	800a2ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ac:	bf00      	nop
  }
  return usb_status;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <std>:
 800a2bc:	2300      	movs	r3, #0
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ca:	6083      	str	r3, [r0, #8]
 800a2cc:	8181      	strh	r1, [r0, #12]
 800a2ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2d0:	81c2      	strh	r2, [r0, #14]
 800a2d2:	6183      	str	r3, [r0, #24]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	2208      	movs	r2, #8
 800a2d8:	305c      	adds	r0, #92	@ 0x5c
 800a2da:	f000 f9f9 	bl	800a6d0 <memset>
 800a2de:	4b0d      	ldr	r3, [pc, #52]	@ (800a314 <std+0x58>)
 800a2e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a318 <std+0x5c>)
 800a2e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a31c <std+0x60>)
 800a2e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a320 <std+0x64>)
 800a2ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <std+0x68>)
 800a2f0:	6224      	str	r4, [r4, #32]
 800a2f2:	429c      	cmp	r4, r3
 800a2f4:	d006      	beq.n	800a304 <std+0x48>
 800a2f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2fa:	4294      	cmp	r4, r2
 800a2fc:	d002      	beq.n	800a304 <std+0x48>
 800a2fe:	33d0      	adds	r3, #208	@ 0xd0
 800a300:	429c      	cmp	r4, r3
 800a302:	d105      	bne.n	800a310 <std+0x54>
 800a304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a30c:	f000 ba58 	b.w	800a7c0 <__retarget_lock_init_recursive>
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop
 800a314:	0800a521 	.word	0x0800a521
 800a318:	0800a543 	.word	0x0800a543
 800a31c:	0800a57b 	.word	0x0800a57b
 800a320:	0800a59f 	.word	0x0800a59f
 800a324:	200029e8 	.word	0x200029e8

0800a328 <stdio_exit_handler>:
 800a328:	4a02      	ldr	r2, [pc, #8]	@ (800a334 <stdio_exit_handler+0xc>)
 800a32a:	4903      	ldr	r1, [pc, #12]	@ (800a338 <stdio_exit_handler+0x10>)
 800a32c:	4803      	ldr	r0, [pc, #12]	@ (800a33c <stdio_exit_handler+0x14>)
 800a32e:	f000 b869 	b.w	800a404 <_fwalk_sglue>
 800a332:	bf00      	nop
 800a334:	20000130 	.word	0x20000130
 800a338:	0800b07d 	.word	0x0800b07d
 800a33c:	20000140 	.word	0x20000140

0800a340 <cleanup_stdio>:
 800a340:	6841      	ldr	r1, [r0, #4]
 800a342:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <cleanup_stdio+0x34>)
 800a344:	4299      	cmp	r1, r3
 800a346:	b510      	push	{r4, lr}
 800a348:	4604      	mov	r4, r0
 800a34a:	d001      	beq.n	800a350 <cleanup_stdio+0x10>
 800a34c:	f000 fe96 	bl	800b07c <_fflush_r>
 800a350:	68a1      	ldr	r1, [r4, #8]
 800a352:	4b09      	ldr	r3, [pc, #36]	@ (800a378 <cleanup_stdio+0x38>)
 800a354:	4299      	cmp	r1, r3
 800a356:	d002      	beq.n	800a35e <cleanup_stdio+0x1e>
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fe8f 	bl	800b07c <_fflush_r>
 800a35e:	68e1      	ldr	r1, [r4, #12]
 800a360:	4b06      	ldr	r3, [pc, #24]	@ (800a37c <cleanup_stdio+0x3c>)
 800a362:	4299      	cmp	r1, r3
 800a364:	d004      	beq.n	800a370 <cleanup_stdio+0x30>
 800a366:	4620      	mov	r0, r4
 800a368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a36c:	f000 be86 	b.w	800b07c <_fflush_r>
 800a370:	bd10      	pop	{r4, pc}
 800a372:	bf00      	nop
 800a374:	200029e8 	.word	0x200029e8
 800a378:	20002a50 	.word	0x20002a50
 800a37c:	20002ab8 	.word	0x20002ab8

0800a380 <global_stdio_init.part.0>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b0 <global_stdio_init.part.0+0x30>)
 800a384:	4c0b      	ldr	r4, [pc, #44]	@ (800a3b4 <global_stdio_init.part.0+0x34>)
 800a386:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b8 <global_stdio_init.part.0+0x38>)
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	4620      	mov	r0, r4
 800a38c:	2200      	movs	r2, #0
 800a38e:	2104      	movs	r1, #4
 800a390:	f7ff ff94 	bl	800a2bc <std>
 800a394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a398:	2201      	movs	r2, #1
 800a39a:	2109      	movs	r1, #9
 800a39c:	f7ff ff8e 	bl	800a2bc <std>
 800a3a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3aa:	2112      	movs	r1, #18
 800a3ac:	f7ff bf86 	b.w	800a2bc <std>
 800a3b0:	20002b20 	.word	0x20002b20
 800a3b4:	200029e8 	.word	0x200029e8
 800a3b8:	0800a329 	.word	0x0800a329

0800a3bc <__sfp_lock_acquire>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	@ (800a3c4 <__sfp_lock_acquire+0x8>)
 800a3be:	f000 ba00 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20002b29 	.word	0x20002b29

0800a3c8 <__sfp_lock_release>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	@ (800a3d0 <__sfp_lock_release+0x8>)
 800a3ca:	f000 b9fb 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20002b29 	.word	0x20002b29

0800a3d4 <__sinit>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	f7ff fff0 	bl	800a3bc <__sfp_lock_acquire>
 800a3dc:	6a23      	ldr	r3, [r4, #32]
 800a3de:	b11b      	cbz	r3, 800a3e8 <__sinit+0x14>
 800a3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e4:	f7ff bff0 	b.w	800a3c8 <__sfp_lock_release>
 800a3e8:	4b04      	ldr	r3, [pc, #16]	@ (800a3fc <__sinit+0x28>)
 800a3ea:	6223      	str	r3, [r4, #32]
 800a3ec:	4b04      	ldr	r3, [pc, #16]	@ (800a400 <__sinit+0x2c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f5      	bne.n	800a3e0 <__sinit+0xc>
 800a3f4:	f7ff ffc4 	bl	800a380 <global_stdio_init.part.0>
 800a3f8:	e7f2      	b.n	800a3e0 <__sinit+0xc>
 800a3fa:	bf00      	nop
 800a3fc:	0800a341 	.word	0x0800a341
 800a400:	20002b20 	.word	0x20002b20

0800a404 <_fwalk_sglue>:
 800a404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a408:	4607      	mov	r7, r0
 800a40a:	4688      	mov	r8, r1
 800a40c:	4614      	mov	r4, r2
 800a40e:	2600      	movs	r6, #0
 800a410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a414:	f1b9 0901 	subs.w	r9, r9, #1
 800a418:	d505      	bpl.n	800a426 <_fwalk_sglue+0x22>
 800a41a:	6824      	ldr	r4, [r4, #0]
 800a41c:	2c00      	cmp	r4, #0
 800a41e:	d1f7      	bne.n	800a410 <_fwalk_sglue+0xc>
 800a420:	4630      	mov	r0, r6
 800a422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d907      	bls.n	800a43c <_fwalk_sglue+0x38>
 800a42c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a430:	3301      	adds	r3, #1
 800a432:	d003      	beq.n	800a43c <_fwalk_sglue+0x38>
 800a434:	4629      	mov	r1, r5
 800a436:	4638      	mov	r0, r7
 800a438:	47c0      	blx	r8
 800a43a:	4306      	orrs	r6, r0
 800a43c:	3568      	adds	r5, #104	@ 0x68
 800a43e:	e7e9      	b.n	800a414 <_fwalk_sglue+0x10>

0800a440 <iprintf>:
 800a440:	b40f      	push	{r0, r1, r2, r3}
 800a442:	b507      	push	{r0, r1, r2, lr}
 800a444:	4906      	ldr	r1, [pc, #24]	@ (800a460 <iprintf+0x20>)
 800a446:	ab04      	add	r3, sp, #16
 800a448:	6808      	ldr	r0, [r1, #0]
 800a44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44e:	6881      	ldr	r1, [r0, #8]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	f000 fae9 	bl	800aa28 <_vfiprintf_r>
 800a456:	b003      	add	sp, #12
 800a458:	f85d eb04 	ldr.w	lr, [sp], #4
 800a45c:	b004      	add	sp, #16
 800a45e:	4770      	bx	lr
 800a460:	2000013c 	.word	0x2000013c

0800a464 <_puts_r>:
 800a464:	6a03      	ldr	r3, [r0, #32]
 800a466:	b570      	push	{r4, r5, r6, lr}
 800a468:	6884      	ldr	r4, [r0, #8]
 800a46a:	4605      	mov	r5, r0
 800a46c:	460e      	mov	r6, r1
 800a46e:	b90b      	cbnz	r3, 800a474 <_puts_r+0x10>
 800a470:	f7ff ffb0 	bl	800a3d4 <__sinit>
 800a474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a476:	07db      	lsls	r3, r3, #31
 800a478:	d405      	bmi.n	800a486 <_puts_r+0x22>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	0598      	lsls	r0, r3, #22
 800a47e:	d402      	bmi.n	800a486 <_puts_r+0x22>
 800a480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a482:	f000 f99e 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	0719      	lsls	r1, r3, #28
 800a48a:	d502      	bpl.n	800a492 <_puts_r+0x2e>
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d135      	bne.n	800a4fe <_puts_r+0x9a>
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f000 f8c5 	bl	800a624 <__swsetup_r>
 800a49a:	b380      	cbz	r0, 800a4fe <_puts_r+0x9a>
 800a49c:	f04f 35ff 	mov.w	r5, #4294967295
 800a4a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4a2:	07da      	lsls	r2, r3, #31
 800a4a4:	d405      	bmi.n	800a4b2 <_puts_r+0x4e>
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	059b      	lsls	r3, r3, #22
 800a4aa:	d402      	bmi.n	800a4b2 <_puts_r+0x4e>
 800a4ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ae:	f000 f989 	bl	800a7c4 <__retarget_lock_release_recursive>
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	da04      	bge.n	800a4c4 <_puts_r+0x60>
 800a4ba:	69a2      	ldr	r2, [r4, #24]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	dc17      	bgt.n	800a4f0 <_puts_r+0x8c>
 800a4c0:	290a      	cmp	r1, #10
 800a4c2:	d015      	beq.n	800a4f0 <_puts_r+0x8c>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	6022      	str	r2, [r4, #0]
 800a4ca:	7019      	strb	r1, [r3, #0]
 800a4cc:	68a3      	ldr	r3, [r4, #8]
 800a4ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	60a3      	str	r3, [r4, #8]
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d1ed      	bne.n	800a4b6 <_puts_r+0x52>
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	da11      	bge.n	800a502 <_puts_r+0x9e>
 800a4de:	4622      	mov	r2, r4
 800a4e0:	210a      	movs	r1, #10
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 f85f 	bl	800a5a6 <__swbuf_r>
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d0d7      	beq.n	800a49c <_puts_r+0x38>
 800a4ec:	250a      	movs	r5, #10
 800a4ee:	e7d7      	b.n	800a4a0 <_puts_r+0x3c>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 f857 	bl	800a5a6 <__swbuf_r>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d1e7      	bne.n	800a4cc <_puts_r+0x68>
 800a4fc:	e7ce      	b.n	800a49c <_puts_r+0x38>
 800a4fe:	3e01      	subs	r6, #1
 800a500:	e7e4      	b.n	800a4cc <_puts_r+0x68>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	6022      	str	r2, [r4, #0]
 800a508:	220a      	movs	r2, #10
 800a50a:	701a      	strb	r2, [r3, #0]
 800a50c:	e7ee      	b.n	800a4ec <_puts_r+0x88>
	...

0800a510 <puts>:
 800a510:	4b02      	ldr	r3, [pc, #8]	@ (800a51c <puts+0xc>)
 800a512:	4601      	mov	r1, r0
 800a514:	6818      	ldr	r0, [r3, #0]
 800a516:	f7ff bfa5 	b.w	800a464 <_puts_r>
 800a51a:	bf00      	nop
 800a51c:	2000013c 	.word	0x2000013c

0800a520 <__sread>:
 800a520:	b510      	push	{r4, lr}
 800a522:	460c      	mov	r4, r1
 800a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a528:	f000 f8fc 	bl	800a724 <_read_r>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	bfab      	itete	ge
 800a530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a532:	89a3      	ldrhlt	r3, [r4, #12]
 800a534:	181b      	addge	r3, r3, r0
 800a536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a53a:	bfac      	ite	ge
 800a53c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a53e:	81a3      	strhlt	r3, [r4, #12]
 800a540:	bd10      	pop	{r4, pc}

0800a542 <__swrite>:
 800a542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a546:	461f      	mov	r7, r3
 800a548:	898b      	ldrh	r3, [r1, #12]
 800a54a:	05db      	lsls	r3, r3, #23
 800a54c:	4605      	mov	r5, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	4616      	mov	r6, r2
 800a552:	d505      	bpl.n	800a560 <__swrite+0x1e>
 800a554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a558:	2302      	movs	r3, #2
 800a55a:	2200      	movs	r2, #0
 800a55c:	f000 f8d0 	bl	800a700 <_lseek_r>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a566:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	4632      	mov	r2, r6
 800a56e:	463b      	mov	r3, r7
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a576:	f000 b8e7 	b.w	800a748 <_write_r>

0800a57a <__sseek>:
 800a57a:	b510      	push	{r4, lr}
 800a57c:	460c      	mov	r4, r1
 800a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a582:	f000 f8bd 	bl	800a700 <_lseek_r>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	bf15      	itete	ne
 800a58c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a58e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a592:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a596:	81a3      	strheq	r3, [r4, #12]
 800a598:	bf18      	it	ne
 800a59a:	81a3      	strhne	r3, [r4, #12]
 800a59c:	bd10      	pop	{r4, pc}

0800a59e <__sclose>:
 800a59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a2:	f000 b89d 	b.w	800a6e0 <_close_r>

0800a5a6 <__swbuf_r>:
 800a5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	4614      	mov	r4, r2
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	b118      	cbz	r0, 800a5b8 <__swbuf_r+0x12>
 800a5b0:	6a03      	ldr	r3, [r0, #32]
 800a5b2:	b90b      	cbnz	r3, 800a5b8 <__swbuf_r+0x12>
 800a5b4:	f7ff ff0e 	bl	800a3d4 <__sinit>
 800a5b8:	69a3      	ldr	r3, [r4, #24]
 800a5ba:	60a3      	str	r3, [r4, #8]
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	071a      	lsls	r2, r3, #28
 800a5c0:	d501      	bpl.n	800a5c6 <__swbuf_r+0x20>
 800a5c2:	6923      	ldr	r3, [r4, #16]
 800a5c4:	b943      	cbnz	r3, 800a5d8 <__swbuf_r+0x32>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f000 f82b 	bl	800a624 <__swsetup_r>
 800a5ce:	b118      	cbz	r0, 800a5d8 <__swbuf_r+0x32>
 800a5d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	6922      	ldr	r2, [r4, #16]
 800a5dc:	1a98      	subs	r0, r3, r2
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	b2f6      	uxtb	r6, r6
 800a5e2:	4283      	cmp	r3, r0
 800a5e4:	4637      	mov	r7, r6
 800a5e6:	dc05      	bgt.n	800a5f4 <__swbuf_r+0x4e>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 fd46 	bl	800b07c <_fflush_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d1ed      	bne.n	800a5d0 <__swbuf_r+0x2a>
 800a5f4:	68a3      	ldr	r3, [r4, #8]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	60a3      	str	r3, [r4, #8]
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	701e      	strb	r6, [r3, #0]
 800a602:	6962      	ldr	r2, [r4, #20]
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	429a      	cmp	r2, r3
 800a608:	d004      	beq.n	800a614 <__swbuf_r+0x6e>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	07db      	lsls	r3, r3, #31
 800a60e:	d5e1      	bpl.n	800a5d4 <__swbuf_r+0x2e>
 800a610:	2e0a      	cmp	r6, #10
 800a612:	d1df      	bne.n	800a5d4 <__swbuf_r+0x2e>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 fd30 	bl	800b07c <_fflush_r>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0d9      	beq.n	800a5d4 <__swbuf_r+0x2e>
 800a620:	e7d6      	b.n	800a5d0 <__swbuf_r+0x2a>
	...

0800a624 <__swsetup_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4b29      	ldr	r3, [pc, #164]	@ (800a6cc <__swsetup_r+0xa8>)
 800a628:	4605      	mov	r5, r0
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	460c      	mov	r4, r1
 800a62e:	b118      	cbz	r0, 800a638 <__swsetup_r+0x14>
 800a630:	6a03      	ldr	r3, [r0, #32]
 800a632:	b90b      	cbnz	r3, 800a638 <__swsetup_r+0x14>
 800a634:	f7ff fece 	bl	800a3d4 <__sinit>
 800a638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63c:	0719      	lsls	r1, r3, #28
 800a63e:	d422      	bmi.n	800a686 <__swsetup_r+0x62>
 800a640:	06da      	lsls	r2, r3, #27
 800a642:	d407      	bmi.n	800a654 <__swsetup_r+0x30>
 800a644:	2209      	movs	r2, #9
 800a646:	602a      	str	r2, [r5, #0]
 800a648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295
 800a652:	e033      	b.n	800a6bc <__swsetup_r+0x98>
 800a654:	0758      	lsls	r0, r3, #29
 800a656:	d512      	bpl.n	800a67e <__swsetup_r+0x5a>
 800a658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a65a:	b141      	cbz	r1, 800a66e <__swsetup_r+0x4a>
 800a65c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a660:	4299      	cmp	r1, r3
 800a662:	d002      	beq.n	800a66a <__swsetup_r+0x46>
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f8bd 	bl	800a7e4 <_free_r>
 800a66a:	2300      	movs	r3, #0
 800a66c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	2300      	movs	r3, #0
 800a678:	6063      	str	r3, [r4, #4]
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f043 0308 	orr.w	r3, r3, #8
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	b94b      	cbnz	r3, 800a69e <__swsetup_r+0x7a>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a694:	d003      	beq.n	800a69e <__swsetup_r+0x7a>
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 fd3d 	bl	800b118 <__smakebuf_r>
 800a69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a2:	f013 0201 	ands.w	r2, r3, #1
 800a6a6:	d00a      	beq.n	800a6be <__swsetup_r+0x9a>
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	60a2      	str	r2, [r4, #8]
 800a6ac:	6962      	ldr	r2, [r4, #20]
 800a6ae:	4252      	negs	r2, r2
 800a6b0:	61a2      	str	r2, [r4, #24]
 800a6b2:	6922      	ldr	r2, [r4, #16]
 800a6b4:	b942      	cbnz	r2, 800a6c8 <__swsetup_r+0xa4>
 800a6b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6ba:	d1c5      	bne.n	800a648 <__swsetup_r+0x24>
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	0799      	lsls	r1, r3, #30
 800a6c0:	bf58      	it	pl
 800a6c2:	6962      	ldrpl	r2, [r4, #20]
 800a6c4:	60a2      	str	r2, [r4, #8]
 800a6c6:	e7f4      	b.n	800a6b2 <__swsetup_r+0x8e>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	e7f7      	b.n	800a6bc <__swsetup_r+0x98>
 800a6cc:	2000013c 	.word	0x2000013c

0800a6d0 <memset>:
 800a6d0:	4402      	add	r2, r0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d100      	bne.n	800a6da <memset+0xa>
 800a6d8:	4770      	bx	lr
 800a6da:	f803 1b01 	strb.w	r1, [r3], #1
 800a6de:	e7f9      	b.n	800a6d4 <memset+0x4>

0800a6e0 <_close_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d06      	ldr	r5, [pc, #24]	@ (800a6fc <_close_r+0x1c>)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	f7f8 f9bf 	bl	8002a6e <_close>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_close_r+0x1a>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_close_r+0x1a>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	20002b24 	.word	0x20002b24

0800a700 <_lseek_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	@ (800a720 <_lseek_r+0x20>)
 800a704:	4604      	mov	r4, r0
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	2200      	movs	r2, #0
 800a70c:	602a      	str	r2, [r5, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	f7f8 f9d4 	bl	8002abc <_lseek>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_lseek_r+0x1e>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_lseek_r+0x1e>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20002b24 	.word	0x20002b24

0800a724 <_read_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4d07      	ldr	r5, [pc, #28]	@ (800a744 <_read_r+0x20>)
 800a728:	4604      	mov	r4, r0
 800a72a:	4608      	mov	r0, r1
 800a72c:	4611      	mov	r1, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f8 f962 	bl	80029fc <_read>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_read_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_read_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20002b24 	.word	0x20002b24

0800a748 <_write_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d07      	ldr	r5, [pc, #28]	@ (800a768 <_write_r+0x20>)
 800a74c:	4604      	mov	r4, r0
 800a74e:	4608      	mov	r0, r1
 800a750:	4611      	mov	r1, r2
 800a752:	2200      	movs	r2, #0
 800a754:	602a      	str	r2, [r5, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	f7f8 f96d 	bl	8002a36 <_write>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_write_r+0x1e>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_write_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20002b24 	.word	0x20002b24

0800a76c <__errno>:
 800a76c:	4b01      	ldr	r3, [pc, #4]	@ (800a774 <__errno+0x8>)
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	2000013c 	.word	0x2000013c

0800a778 <__libc_init_array>:
 800a778:	b570      	push	{r4, r5, r6, lr}
 800a77a:	4d0d      	ldr	r5, [pc, #52]	@ (800a7b0 <__libc_init_array+0x38>)
 800a77c:	4c0d      	ldr	r4, [pc, #52]	@ (800a7b4 <__libc_init_array+0x3c>)
 800a77e:	1b64      	subs	r4, r4, r5
 800a780:	10a4      	asrs	r4, r4, #2
 800a782:	2600      	movs	r6, #0
 800a784:	42a6      	cmp	r6, r4
 800a786:	d109      	bne.n	800a79c <__libc_init_array+0x24>
 800a788:	4d0b      	ldr	r5, [pc, #44]	@ (800a7b8 <__libc_init_array+0x40>)
 800a78a:	4c0c      	ldr	r4, [pc, #48]	@ (800a7bc <__libc_init_array+0x44>)
 800a78c:	f002 f85a 	bl	800c844 <_init>
 800a790:	1b64      	subs	r4, r4, r5
 800a792:	10a4      	asrs	r4, r4, #2
 800a794:	2600      	movs	r6, #0
 800a796:	42a6      	cmp	r6, r4
 800a798:	d105      	bne.n	800a7a6 <__libc_init_array+0x2e>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a0:	4798      	blx	r3
 800a7a2:	3601      	adds	r6, #1
 800a7a4:	e7ee      	b.n	800a784 <__libc_init_array+0xc>
 800a7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7aa:	4798      	blx	r3
 800a7ac:	3601      	adds	r6, #1
 800a7ae:	e7f2      	b.n	800a796 <__libc_init_array+0x1e>
 800a7b0:	0800ca18 	.word	0x0800ca18
 800a7b4:	0800ca18 	.word	0x0800ca18
 800a7b8:	0800ca18 	.word	0x0800ca18
 800a7bc:	0800ca1c 	.word	0x0800ca1c

0800a7c0 <__retarget_lock_init_recursive>:
 800a7c0:	4770      	bx	lr

0800a7c2 <__retarget_lock_acquire_recursive>:
 800a7c2:	4770      	bx	lr

0800a7c4 <__retarget_lock_release_recursive>:
 800a7c4:	4770      	bx	lr

0800a7c6 <memcpy>:
 800a7c6:	440a      	add	r2, r1
 800a7c8:	4291      	cmp	r1, r2
 800a7ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ce:	d100      	bne.n	800a7d2 <memcpy+0xc>
 800a7d0:	4770      	bx	lr
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7dc:	4291      	cmp	r1, r2
 800a7de:	d1f9      	bne.n	800a7d4 <memcpy+0xe>
 800a7e0:	bd10      	pop	{r4, pc}
	...

0800a7e4 <_free_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	2900      	cmp	r1, #0
 800a7ea:	d041      	beq.n	800a870 <_free_r+0x8c>
 800a7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f0:	1f0c      	subs	r4, r1, #4
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bfb8      	it	lt
 800a7f6:	18e4      	addlt	r4, r4, r3
 800a7f8:	f000 f8e0 	bl	800a9bc <__malloc_lock>
 800a7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a874 <_free_r+0x90>)
 800a7fe:	6813      	ldr	r3, [r2, #0]
 800a800:	b933      	cbnz	r3, 800a810 <_free_r+0x2c>
 800a802:	6063      	str	r3, [r4, #4]
 800a804:	6014      	str	r4, [r2, #0]
 800a806:	4628      	mov	r0, r5
 800a808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a80c:	f000 b8dc 	b.w	800a9c8 <__malloc_unlock>
 800a810:	42a3      	cmp	r3, r4
 800a812:	d908      	bls.n	800a826 <_free_r+0x42>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	1821      	adds	r1, r4, r0
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf01      	itttt	eq
 800a81c:	6819      	ldreq	r1, [r3, #0]
 800a81e:	685b      	ldreq	r3, [r3, #4]
 800a820:	1809      	addeq	r1, r1, r0
 800a822:	6021      	streq	r1, [r4, #0]
 800a824:	e7ed      	b.n	800a802 <_free_r+0x1e>
 800a826:	461a      	mov	r2, r3
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	b10b      	cbz	r3, 800a830 <_free_r+0x4c>
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	d9fa      	bls.n	800a826 <_free_r+0x42>
 800a830:	6811      	ldr	r1, [r2, #0]
 800a832:	1850      	adds	r0, r2, r1
 800a834:	42a0      	cmp	r0, r4
 800a836:	d10b      	bne.n	800a850 <_free_r+0x6c>
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	4401      	add	r1, r0
 800a83c:	1850      	adds	r0, r2, r1
 800a83e:	4283      	cmp	r3, r0
 800a840:	6011      	str	r1, [r2, #0]
 800a842:	d1e0      	bne.n	800a806 <_free_r+0x22>
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	6053      	str	r3, [r2, #4]
 800a84a:	4408      	add	r0, r1
 800a84c:	6010      	str	r0, [r2, #0]
 800a84e:	e7da      	b.n	800a806 <_free_r+0x22>
 800a850:	d902      	bls.n	800a858 <_free_r+0x74>
 800a852:	230c      	movs	r3, #12
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	e7d6      	b.n	800a806 <_free_r+0x22>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	1821      	adds	r1, r4, r0
 800a85c:	428b      	cmp	r3, r1
 800a85e:	bf04      	itt	eq
 800a860:	6819      	ldreq	r1, [r3, #0]
 800a862:	685b      	ldreq	r3, [r3, #4]
 800a864:	6063      	str	r3, [r4, #4]
 800a866:	bf04      	itt	eq
 800a868:	1809      	addeq	r1, r1, r0
 800a86a:	6021      	streq	r1, [r4, #0]
 800a86c:	6054      	str	r4, [r2, #4]
 800a86e:	e7ca      	b.n	800a806 <_free_r+0x22>
 800a870:	bd38      	pop	{r3, r4, r5, pc}
 800a872:	bf00      	nop
 800a874:	20002b30 	.word	0x20002b30

0800a878 <sbrk_aligned>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	4e0f      	ldr	r6, [pc, #60]	@ (800a8b8 <sbrk_aligned+0x40>)
 800a87c:	460c      	mov	r4, r1
 800a87e:	6831      	ldr	r1, [r6, #0]
 800a880:	4605      	mov	r5, r0
 800a882:	b911      	cbnz	r1, 800a88a <sbrk_aligned+0x12>
 800a884:	f000 fca6 	bl	800b1d4 <_sbrk_r>
 800a888:	6030      	str	r0, [r6, #0]
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 fca1 	bl	800b1d4 <_sbrk_r>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d103      	bne.n	800a89e <sbrk_aligned+0x26>
 800a896:	f04f 34ff 	mov.w	r4, #4294967295
 800a89a:	4620      	mov	r0, r4
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	1cc4      	adds	r4, r0, #3
 800a8a0:	f024 0403 	bic.w	r4, r4, #3
 800a8a4:	42a0      	cmp	r0, r4
 800a8a6:	d0f8      	beq.n	800a89a <sbrk_aligned+0x22>
 800a8a8:	1a21      	subs	r1, r4, r0
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 fc92 	bl	800b1d4 <_sbrk_r>
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d1f2      	bne.n	800a89a <sbrk_aligned+0x22>
 800a8b4:	e7ef      	b.n	800a896 <sbrk_aligned+0x1e>
 800a8b6:	bf00      	nop
 800a8b8:	20002b2c 	.word	0x20002b2c

0800a8bc <_malloc_r>:
 800a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	1ccd      	adds	r5, r1, #3
 800a8c2:	f025 0503 	bic.w	r5, r5, #3
 800a8c6:	3508      	adds	r5, #8
 800a8c8:	2d0c      	cmp	r5, #12
 800a8ca:	bf38      	it	cc
 800a8cc:	250c      	movcc	r5, #12
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	db01      	blt.n	800a8d8 <_malloc_r+0x1c>
 800a8d4:	42a9      	cmp	r1, r5
 800a8d6:	d904      	bls.n	800a8e2 <_malloc_r+0x26>
 800a8d8:	230c      	movs	r3, #12
 800a8da:	6033      	str	r3, [r6, #0]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9b8 <_malloc_r+0xfc>
 800a8e6:	f000 f869 	bl	800a9bc <__malloc_lock>
 800a8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ee:	461c      	mov	r4, r3
 800a8f0:	bb44      	cbnz	r4, 800a944 <_malloc_r+0x88>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7ff ffbf 	bl	800a878 <sbrk_aligned>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	d158      	bne.n	800a9b2 <_malloc_r+0xf6>
 800a900:	f8d8 4000 	ldr.w	r4, [r8]
 800a904:	4627      	mov	r7, r4
 800a906:	2f00      	cmp	r7, #0
 800a908:	d143      	bne.n	800a992 <_malloc_r+0xd6>
 800a90a:	2c00      	cmp	r4, #0
 800a90c:	d04b      	beq.n	800a9a6 <_malloc_r+0xea>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	4639      	mov	r1, r7
 800a912:	4630      	mov	r0, r6
 800a914:	eb04 0903 	add.w	r9, r4, r3
 800a918:	f000 fc5c 	bl	800b1d4 <_sbrk_r>
 800a91c:	4581      	cmp	r9, r0
 800a91e:	d142      	bne.n	800a9a6 <_malloc_r+0xea>
 800a920:	6821      	ldr	r1, [r4, #0]
 800a922:	1a6d      	subs	r5, r5, r1
 800a924:	4629      	mov	r1, r5
 800a926:	4630      	mov	r0, r6
 800a928:	f7ff ffa6 	bl	800a878 <sbrk_aligned>
 800a92c:	3001      	adds	r0, #1
 800a92e:	d03a      	beq.n	800a9a6 <_malloc_r+0xea>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	442b      	add	r3, r5
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	f8d8 3000 	ldr.w	r3, [r8]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	bb62      	cbnz	r2, 800a998 <_malloc_r+0xdc>
 800a93e:	f8c8 7000 	str.w	r7, [r8]
 800a942:	e00f      	b.n	800a964 <_malloc_r+0xa8>
 800a944:	6822      	ldr	r2, [r4, #0]
 800a946:	1b52      	subs	r2, r2, r5
 800a948:	d420      	bmi.n	800a98c <_malloc_r+0xd0>
 800a94a:	2a0b      	cmp	r2, #11
 800a94c:	d917      	bls.n	800a97e <_malloc_r+0xc2>
 800a94e:	1961      	adds	r1, r4, r5
 800a950:	42a3      	cmp	r3, r4
 800a952:	6025      	str	r5, [r4, #0]
 800a954:	bf18      	it	ne
 800a956:	6059      	strne	r1, [r3, #4]
 800a958:	6863      	ldr	r3, [r4, #4]
 800a95a:	bf08      	it	eq
 800a95c:	f8c8 1000 	streq.w	r1, [r8]
 800a960:	5162      	str	r2, [r4, r5]
 800a962:	604b      	str	r3, [r1, #4]
 800a964:	4630      	mov	r0, r6
 800a966:	f000 f82f 	bl	800a9c8 <__malloc_unlock>
 800a96a:	f104 000b 	add.w	r0, r4, #11
 800a96e:	1d23      	adds	r3, r4, #4
 800a970:	f020 0007 	bic.w	r0, r0, #7
 800a974:	1ac2      	subs	r2, r0, r3
 800a976:	bf1c      	itt	ne
 800a978:	1a1b      	subne	r3, r3, r0
 800a97a:	50a3      	strne	r3, [r4, r2]
 800a97c:	e7af      	b.n	800a8de <_malloc_r+0x22>
 800a97e:	6862      	ldr	r2, [r4, #4]
 800a980:	42a3      	cmp	r3, r4
 800a982:	bf0c      	ite	eq
 800a984:	f8c8 2000 	streq.w	r2, [r8]
 800a988:	605a      	strne	r2, [r3, #4]
 800a98a:	e7eb      	b.n	800a964 <_malloc_r+0xa8>
 800a98c:	4623      	mov	r3, r4
 800a98e:	6864      	ldr	r4, [r4, #4]
 800a990:	e7ae      	b.n	800a8f0 <_malloc_r+0x34>
 800a992:	463c      	mov	r4, r7
 800a994:	687f      	ldr	r7, [r7, #4]
 800a996:	e7b6      	b.n	800a906 <_malloc_r+0x4a>
 800a998:	461a      	mov	r2, r3
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	d1fb      	bne.n	800a998 <_malloc_r+0xdc>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6053      	str	r3, [r2, #4]
 800a9a4:	e7de      	b.n	800a964 <_malloc_r+0xa8>
 800a9a6:	230c      	movs	r3, #12
 800a9a8:	6033      	str	r3, [r6, #0]
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 f80c 	bl	800a9c8 <__malloc_unlock>
 800a9b0:	e794      	b.n	800a8dc <_malloc_r+0x20>
 800a9b2:	6005      	str	r5, [r0, #0]
 800a9b4:	e7d6      	b.n	800a964 <_malloc_r+0xa8>
 800a9b6:	bf00      	nop
 800a9b8:	20002b30 	.word	0x20002b30

0800a9bc <__malloc_lock>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	@ (800a9c4 <__malloc_lock+0x8>)
 800a9be:	f7ff bf00 	b.w	800a7c2 <__retarget_lock_acquire_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	20002b28 	.word	0x20002b28

0800a9c8 <__malloc_unlock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	@ (800a9d0 <__malloc_unlock+0x8>)
 800a9ca:	f7ff befb 	b.w	800a7c4 <__retarget_lock_release_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	20002b28 	.word	0x20002b28

0800a9d4 <__sfputc_r>:
 800a9d4:	6893      	ldr	r3, [r2, #8]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	b410      	push	{r4}
 800a9dc:	6093      	str	r3, [r2, #8]
 800a9de:	da08      	bge.n	800a9f2 <__sfputc_r+0x1e>
 800a9e0:	6994      	ldr	r4, [r2, #24]
 800a9e2:	42a3      	cmp	r3, r4
 800a9e4:	db01      	blt.n	800a9ea <__sfputc_r+0x16>
 800a9e6:	290a      	cmp	r1, #10
 800a9e8:	d103      	bne.n	800a9f2 <__sfputc_r+0x1e>
 800a9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ee:	f7ff bdda 	b.w	800a5a6 <__swbuf_r>
 800a9f2:	6813      	ldr	r3, [r2, #0]
 800a9f4:	1c58      	adds	r0, r3, #1
 800a9f6:	6010      	str	r0, [r2, #0]
 800a9f8:	7019      	strb	r1, [r3, #0]
 800a9fa:	4608      	mov	r0, r1
 800a9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <__sfputs_r>:
 800aa02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	4614      	mov	r4, r2
 800aa0a:	18d5      	adds	r5, r2, r3
 800aa0c:	42ac      	cmp	r4, r5
 800aa0e:	d101      	bne.n	800aa14 <__sfputs_r+0x12>
 800aa10:	2000      	movs	r0, #0
 800aa12:	e007      	b.n	800aa24 <__sfputs_r+0x22>
 800aa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa18:	463a      	mov	r2, r7
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ffda 	bl	800a9d4 <__sfputc_r>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d1f3      	bne.n	800aa0c <__sfputs_r+0xa>
 800aa24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa28 <_vfiprintf_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	460d      	mov	r5, r1
 800aa2e:	b09d      	sub	sp, #116	@ 0x74
 800aa30:	4614      	mov	r4, r2
 800aa32:	4698      	mov	r8, r3
 800aa34:	4606      	mov	r6, r0
 800aa36:	b118      	cbz	r0, 800aa40 <_vfiprintf_r+0x18>
 800aa38:	6a03      	ldr	r3, [r0, #32]
 800aa3a:	b90b      	cbnz	r3, 800aa40 <_vfiprintf_r+0x18>
 800aa3c:	f7ff fcca 	bl	800a3d4 <__sinit>
 800aa40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa42:	07d9      	lsls	r1, r3, #31
 800aa44:	d405      	bmi.n	800aa52 <_vfiprintf_r+0x2a>
 800aa46:	89ab      	ldrh	r3, [r5, #12]
 800aa48:	059a      	lsls	r2, r3, #22
 800aa4a:	d402      	bmi.n	800aa52 <_vfiprintf_r+0x2a>
 800aa4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa4e:	f7ff feb8 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800aa52:	89ab      	ldrh	r3, [r5, #12]
 800aa54:	071b      	lsls	r3, r3, #28
 800aa56:	d501      	bpl.n	800aa5c <_vfiprintf_r+0x34>
 800aa58:	692b      	ldr	r3, [r5, #16]
 800aa5a:	b99b      	cbnz	r3, 800aa84 <_vfiprintf_r+0x5c>
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7ff fde0 	bl	800a624 <__swsetup_r>
 800aa64:	b170      	cbz	r0, 800aa84 <_vfiprintf_r+0x5c>
 800aa66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa68:	07dc      	lsls	r4, r3, #31
 800aa6a:	d504      	bpl.n	800aa76 <_vfiprintf_r+0x4e>
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	b01d      	add	sp, #116	@ 0x74
 800aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa76:	89ab      	ldrh	r3, [r5, #12]
 800aa78:	0598      	lsls	r0, r3, #22
 800aa7a:	d4f7      	bmi.n	800aa6c <_vfiprintf_r+0x44>
 800aa7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa7e:	f7ff fea1 	bl	800a7c4 <__retarget_lock_release_recursive>
 800aa82:	e7f3      	b.n	800aa6c <_vfiprintf_r+0x44>
 800aa84:	2300      	movs	r3, #0
 800aa86:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa88:	2320      	movs	r3, #32
 800aa8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa92:	2330      	movs	r3, #48	@ 0x30
 800aa94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac44 <_vfiprintf_r+0x21c>
 800aa98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa9c:	f04f 0901 	mov.w	r9, #1
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	469a      	mov	sl, r3
 800aaa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaa8:	b10a      	cbz	r2, 800aaae <_vfiprintf_r+0x86>
 800aaaa:	2a25      	cmp	r2, #37	@ 0x25
 800aaac:	d1f9      	bne.n	800aaa2 <_vfiprintf_r+0x7a>
 800aaae:	ebba 0b04 	subs.w	fp, sl, r4
 800aab2:	d00b      	beq.n	800aacc <_vfiprintf_r+0xa4>
 800aab4:	465b      	mov	r3, fp
 800aab6:	4622      	mov	r2, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	4630      	mov	r0, r6
 800aabc:	f7ff ffa1 	bl	800aa02 <__sfputs_r>
 800aac0:	3001      	adds	r0, #1
 800aac2:	f000 80a7 	beq.w	800ac14 <_vfiprintf_r+0x1ec>
 800aac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aac8:	445a      	add	r2, fp
 800aaca:	9209      	str	r2, [sp, #36]	@ 0x24
 800aacc:	f89a 3000 	ldrb.w	r3, [sl]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 809f 	beq.w	800ac14 <_vfiprintf_r+0x1ec>
 800aad6:	2300      	movs	r3, #0
 800aad8:	f04f 32ff 	mov.w	r2, #4294967295
 800aadc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aae0:	f10a 0a01 	add.w	sl, sl, #1
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aaec:	931a      	str	r3, [sp, #104]	@ 0x68
 800aaee:	4654      	mov	r4, sl
 800aaf0:	2205      	movs	r2, #5
 800aaf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf6:	4853      	ldr	r0, [pc, #332]	@ (800ac44 <_vfiprintf_r+0x21c>)
 800aaf8:	f7f5 fb6a 	bl	80001d0 <memchr>
 800aafc:	9a04      	ldr	r2, [sp, #16]
 800aafe:	b9d8      	cbnz	r0, 800ab38 <_vfiprintf_r+0x110>
 800ab00:	06d1      	lsls	r1, r2, #27
 800ab02:	bf44      	itt	mi
 800ab04:	2320      	movmi	r3, #32
 800ab06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab0a:	0713      	lsls	r3, r2, #28
 800ab0c:	bf44      	itt	mi
 800ab0e:	232b      	movmi	r3, #43	@ 0x2b
 800ab10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab14:	f89a 3000 	ldrb.w	r3, [sl]
 800ab18:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab1a:	d015      	beq.n	800ab48 <_vfiprintf_r+0x120>
 800ab1c:	9a07      	ldr	r2, [sp, #28]
 800ab1e:	4654      	mov	r4, sl
 800ab20:	2000      	movs	r0, #0
 800ab22:	f04f 0c0a 	mov.w	ip, #10
 800ab26:	4621      	mov	r1, r4
 800ab28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab2c:	3b30      	subs	r3, #48	@ 0x30
 800ab2e:	2b09      	cmp	r3, #9
 800ab30:	d94b      	bls.n	800abca <_vfiprintf_r+0x1a2>
 800ab32:	b1b0      	cbz	r0, 800ab62 <_vfiprintf_r+0x13a>
 800ab34:	9207      	str	r2, [sp, #28]
 800ab36:	e014      	b.n	800ab62 <_vfiprintf_r+0x13a>
 800ab38:	eba0 0308 	sub.w	r3, r0, r8
 800ab3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	46a2      	mov	sl, r4
 800ab46:	e7d2      	b.n	800aaee <_vfiprintf_r+0xc6>
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	1d19      	adds	r1, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	9103      	str	r1, [sp, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bfbb      	ittet	lt
 800ab54:	425b      	neglt	r3, r3
 800ab56:	f042 0202 	orrlt.w	r2, r2, #2
 800ab5a:	9307      	strge	r3, [sp, #28]
 800ab5c:	9307      	strlt	r3, [sp, #28]
 800ab5e:	bfb8      	it	lt
 800ab60:	9204      	strlt	r2, [sp, #16]
 800ab62:	7823      	ldrb	r3, [r4, #0]
 800ab64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab66:	d10a      	bne.n	800ab7e <_vfiprintf_r+0x156>
 800ab68:	7863      	ldrb	r3, [r4, #1]
 800ab6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab6c:	d132      	bne.n	800abd4 <_vfiprintf_r+0x1ac>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	1d1a      	adds	r2, r3, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	9203      	str	r2, [sp, #12]
 800ab76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab7a:	3402      	adds	r4, #2
 800ab7c:	9305      	str	r3, [sp, #20]
 800ab7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac54 <_vfiprintf_r+0x22c>
 800ab82:	7821      	ldrb	r1, [r4, #0]
 800ab84:	2203      	movs	r2, #3
 800ab86:	4650      	mov	r0, sl
 800ab88:	f7f5 fb22 	bl	80001d0 <memchr>
 800ab8c:	b138      	cbz	r0, 800ab9e <_vfiprintf_r+0x176>
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	eba0 000a 	sub.w	r0, r0, sl
 800ab94:	2240      	movs	r2, #64	@ 0x40
 800ab96:	4082      	lsls	r2, r0
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	3401      	adds	r4, #1
 800ab9c:	9304      	str	r3, [sp, #16]
 800ab9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba2:	4829      	ldr	r0, [pc, #164]	@ (800ac48 <_vfiprintf_r+0x220>)
 800aba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aba8:	2206      	movs	r2, #6
 800abaa:	f7f5 fb11 	bl	80001d0 <memchr>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d03f      	beq.n	800ac32 <_vfiprintf_r+0x20a>
 800abb2:	4b26      	ldr	r3, [pc, #152]	@ (800ac4c <_vfiprintf_r+0x224>)
 800abb4:	bb1b      	cbnz	r3, 800abfe <_vfiprintf_r+0x1d6>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	3307      	adds	r3, #7
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	3308      	adds	r3, #8
 800abc0:	9303      	str	r3, [sp, #12]
 800abc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc4:	443b      	add	r3, r7
 800abc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abc8:	e76a      	b.n	800aaa0 <_vfiprintf_r+0x78>
 800abca:	fb0c 3202 	mla	r2, ip, r2, r3
 800abce:	460c      	mov	r4, r1
 800abd0:	2001      	movs	r0, #1
 800abd2:	e7a8      	b.n	800ab26 <_vfiprintf_r+0xfe>
 800abd4:	2300      	movs	r3, #0
 800abd6:	3401      	adds	r4, #1
 800abd8:	9305      	str	r3, [sp, #20]
 800abda:	4619      	mov	r1, r3
 800abdc:	f04f 0c0a 	mov.w	ip, #10
 800abe0:	4620      	mov	r0, r4
 800abe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe6:	3a30      	subs	r2, #48	@ 0x30
 800abe8:	2a09      	cmp	r2, #9
 800abea:	d903      	bls.n	800abf4 <_vfiprintf_r+0x1cc>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0c6      	beq.n	800ab7e <_vfiprintf_r+0x156>
 800abf0:	9105      	str	r1, [sp, #20]
 800abf2:	e7c4      	b.n	800ab7e <_vfiprintf_r+0x156>
 800abf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf8:	4604      	mov	r4, r0
 800abfa:	2301      	movs	r3, #1
 800abfc:	e7f0      	b.n	800abe0 <_vfiprintf_r+0x1b8>
 800abfe:	ab03      	add	r3, sp, #12
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	462a      	mov	r2, r5
 800ac04:	4b12      	ldr	r3, [pc, #72]	@ (800ac50 <_vfiprintf_r+0x228>)
 800ac06:	a904      	add	r1, sp, #16
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f3af 8000 	nop.w
 800ac0e:	4607      	mov	r7, r0
 800ac10:	1c78      	adds	r0, r7, #1
 800ac12:	d1d6      	bne.n	800abc2 <_vfiprintf_r+0x19a>
 800ac14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac16:	07d9      	lsls	r1, r3, #31
 800ac18:	d405      	bmi.n	800ac26 <_vfiprintf_r+0x1fe>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	059a      	lsls	r2, r3, #22
 800ac1e:	d402      	bmi.n	800ac26 <_vfiprintf_r+0x1fe>
 800ac20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac22:	f7ff fdcf 	bl	800a7c4 <__retarget_lock_release_recursive>
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	065b      	lsls	r3, r3, #25
 800ac2a:	f53f af1f 	bmi.w	800aa6c <_vfiprintf_r+0x44>
 800ac2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac30:	e71e      	b.n	800aa70 <_vfiprintf_r+0x48>
 800ac32:	ab03      	add	r3, sp, #12
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	462a      	mov	r2, r5
 800ac38:	4b05      	ldr	r3, [pc, #20]	@ (800ac50 <_vfiprintf_r+0x228>)
 800ac3a:	a904      	add	r1, sp, #16
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 f879 	bl	800ad34 <_printf_i>
 800ac42:	e7e4      	b.n	800ac0e <_vfiprintf_r+0x1e6>
 800ac44:	0800c994 	.word	0x0800c994
 800ac48:	0800c99e 	.word	0x0800c99e
 800ac4c:	00000000 	.word	0x00000000
 800ac50:	0800aa03 	.word	0x0800aa03
 800ac54:	0800c99a 	.word	0x0800c99a

0800ac58 <_printf_common>:
 800ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	4698      	mov	r8, r3
 800ac60:	688a      	ldr	r2, [r1, #8]
 800ac62:	690b      	ldr	r3, [r1, #16]
 800ac64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	bfb8      	it	lt
 800ac6c:	4613      	movlt	r3, r2
 800ac6e:	6033      	str	r3, [r6, #0]
 800ac70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac74:	4607      	mov	r7, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	b10a      	cbz	r2, 800ac7e <_printf_common+0x26>
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	6033      	str	r3, [r6, #0]
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	0699      	lsls	r1, r3, #26
 800ac82:	bf42      	ittt	mi
 800ac84:	6833      	ldrmi	r3, [r6, #0]
 800ac86:	3302      	addmi	r3, #2
 800ac88:	6033      	strmi	r3, [r6, #0]
 800ac8a:	6825      	ldr	r5, [r4, #0]
 800ac8c:	f015 0506 	ands.w	r5, r5, #6
 800ac90:	d106      	bne.n	800aca0 <_printf_common+0x48>
 800ac92:	f104 0a19 	add.w	sl, r4, #25
 800ac96:	68e3      	ldr	r3, [r4, #12]
 800ac98:	6832      	ldr	r2, [r6, #0]
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	42ab      	cmp	r3, r5
 800ac9e:	dc26      	bgt.n	800acee <_printf_common+0x96>
 800aca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	3b00      	subs	r3, #0
 800aca8:	bf18      	it	ne
 800acaa:	2301      	movne	r3, #1
 800acac:	0692      	lsls	r2, r2, #26
 800acae:	d42b      	bmi.n	800ad08 <_printf_common+0xb0>
 800acb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acb4:	4641      	mov	r1, r8
 800acb6:	4638      	mov	r0, r7
 800acb8:	47c8      	blx	r9
 800acba:	3001      	adds	r0, #1
 800acbc:	d01e      	beq.n	800acfc <_printf_common+0xa4>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	6922      	ldr	r2, [r4, #16]
 800acc2:	f003 0306 	and.w	r3, r3, #6
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	bf02      	ittt	eq
 800acca:	68e5      	ldreq	r5, [r4, #12]
 800accc:	6833      	ldreq	r3, [r6, #0]
 800acce:	1aed      	subeq	r5, r5, r3
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	bf0c      	ite	eq
 800acd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acd8:	2500      	movne	r5, #0
 800acda:	4293      	cmp	r3, r2
 800acdc:	bfc4      	itt	gt
 800acde:	1a9b      	subgt	r3, r3, r2
 800ace0:	18ed      	addgt	r5, r5, r3
 800ace2:	2600      	movs	r6, #0
 800ace4:	341a      	adds	r4, #26
 800ace6:	42b5      	cmp	r5, r6
 800ace8:	d11a      	bne.n	800ad20 <_printf_common+0xc8>
 800acea:	2000      	movs	r0, #0
 800acec:	e008      	b.n	800ad00 <_printf_common+0xa8>
 800acee:	2301      	movs	r3, #1
 800acf0:	4652      	mov	r2, sl
 800acf2:	4641      	mov	r1, r8
 800acf4:	4638      	mov	r0, r7
 800acf6:	47c8      	blx	r9
 800acf8:	3001      	adds	r0, #1
 800acfa:	d103      	bne.n	800ad04 <_printf_common+0xac>
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad04:	3501      	adds	r5, #1
 800ad06:	e7c6      	b.n	800ac96 <_printf_common+0x3e>
 800ad08:	18e1      	adds	r1, r4, r3
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	2030      	movs	r0, #48	@ 0x30
 800ad0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad12:	4422      	add	r2, r4
 800ad14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	e7c7      	b.n	800acb0 <_printf_common+0x58>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4622      	mov	r2, r4
 800ad24:	4641      	mov	r1, r8
 800ad26:	4638      	mov	r0, r7
 800ad28:	47c8      	blx	r9
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d0e6      	beq.n	800acfc <_printf_common+0xa4>
 800ad2e:	3601      	adds	r6, #1
 800ad30:	e7d9      	b.n	800ace6 <_printf_common+0x8e>
	...

0800ad34 <_printf_i>:
 800ad34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	7e0f      	ldrb	r7, [r1, #24]
 800ad3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad3c:	2f78      	cmp	r7, #120	@ 0x78
 800ad3e:	4691      	mov	r9, r2
 800ad40:	4680      	mov	r8, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	469a      	mov	sl, r3
 800ad46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad4a:	d807      	bhi.n	800ad5c <_printf_i+0x28>
 800ad4c:	2f62      	cmp	r7, #98	@ 0x62
 800ad4e:	d80a      	bhi.n	800ad66 <_printf_i+0x32>
 800ad50:	2f00      	cmp	r7, #0
 800ad52:	f000 80d2 	beq.w	800aefa <_printf_i+0x1c6>
 800ad56:	2f58      	cmp	r7, #88	@ 0x58
 800ad58:	f000 80b9 	beq.w	800aece <_printf_i+0x19a>
 800ad5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad64:	e03a      	b.n	800addc <_printf_i+0xa8>
 800ad66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad6a:	2b15      	cmp	r3, #21
 800ad6c:	d8f6      	bhi.n	800ad5c <_printf_i+0x28>
 800ad6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ad74 <_printf_i+0x40>)
 800ad70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad74:	0800adcd 	.word	0x0800adcd
 800ad78:	0800ade1 	.word	0x0800ade1
 800ad7c:	0800ad5d 	.word	0x0800ad5d
 800ad80:	0800ad5d 	.word	0x0800ad5d
 800ad84:	0800ad5d 	.word	0x0800ad5d
 800ad88:	0800ad5d 	.word	0x0800ad5d
 800ad8c:	0800ade1 	.word	0x0800ade1
 800ad90:	0800ad5d 	.word	0x0800ad5d
 800ad94:	0800ad5d 	.word	0x0800ad5d
 800ad98:	0800ad5d 	.word	0x0800ad5d
 800ad9c:	0800ad5d 	.word	0x0800ad5d
 800ada0:	0800aee1 	.word	0x0800aee1
 800ada4:	0800ae0b 	.word	0x0800ae0b
 800ada8:	0800ae9b 	.word	0x0800ae9b
 800adac:	0800ad5d 	.word	0x0800ad5d
 800adb0:	0800ad5d 	.word	0x0800ad5d
 800adb4:	0800af03 	.word	0x0800af03
 800adb8:	0800ad5d 	.word	0x0800ad5d
 800adbc:	0800ae0b 	.word	0x0800ae0b
 800adc0:	0800ad5d 	.word	0x0800ad5d
 800adc4:	0800ad5d 	.word	0x0800ad5d
 800adc8:	0800aea3 	.word	0x0800aea3
 800adcc:	6833      	ldr	r3, [r6, #0]
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6032      	str	r2, [r6, #0]
 800add4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800add8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800addc:	2301      	movs	r3, #1
 800adde:	e09d      	b.n	800af1c <_printf_i+0x1e8>
 800ade0:	6833      	ldr	r3, [r6, #0]
 800ade2:	6820      	ldr	r0, [r4, #0]
 800ade4:	1d19      	adds	r1, r3, #4
 800ade6:	6031      	str	r1, [r6, #0]
 800ade8:	0606      	lsls	r6, r0, #24
 800adea:	d501      	bpl.n	800adf0 <_printf_i+0xbc>
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	e003      	b.n	800adf8 <_printf_i+0xc4>
 800adf0:	0645      	lsls	r5, r0, #25
 800adf2:	d5fb      	bpl.n	800adec <_printf_i+0xb8>
 800adf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	da03      	bge.n	800ae04 <_printf_i+0xd0>
 800adfc:	232d      	movs	r3, #45	@ 0x2d
 800adfe:	426d      	negs	r5, r5
 800ae00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae04:	4859      	ldr	r0, [pc, #356]	@ (800af6c <_printf_i+0x238>)
 800ae06:	230a      	movs	r3, #10
 800ae08:	e011      	b.n	800ae2e <_printf_i+0xfa>
 800ae0a:	6821      	ldr	r1, [r4, #0]
 800ae0c:	6833      	ldr	r3, [r6, #0]
 800ae0e:	0608      	lsls	r0, r1, #24
 800ae10:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae14:	d402      	bmi.n	800ae1c <_printf_i+0xe8>
 800ae16:	0649      	lsls	r1, r1, #25
 800ae18:	bf48      	it	mi
 800ae1a:	b2ad      	uxthmi	r5, r5
 800ae1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae1e:	4853      	ldr	r0, [pc, #332]	@ (800af6c <_printf_i+0x238>)
 800ae20:	6033      	str	r3, [r6, #0]
 800ae22:	bf14      	ite	ne
 800ae24:	230a      	movne	r3, #10
 800ae26:	2308      	moveq	r3, #8
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae2e:	6866      	ldr	r6, [r4, #4]
 800ae30:	60a6      	str	r6, [r4, #8]
 800ae32:	2e00      	cmp	r6, #0
 800ae34:	bfa2      	ittt	ge
 800ae36:	6821      	ldrge	r1, [r4, #0]
 800ae38:	f021 0104 	bicge.w	r1, r1, #4
 800ae3c:	6021      	strge	r1, [r4, #0]
 800ae3e:	b90d      	cbnz	r5, 800ae44 <_printf_i+0x110>
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	d04b      	beq.n	800aedc <_printf_i+0x1a8>
 800ae44:	4616      	mov	r6, r2
 800ae46:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae4a:	fb03 5711 	mls	r7, r3, r1, r5
 800ae4e:	5dc7      	ldrb	r7, [r0, r7]
 800ae50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae54:	462f      	mov	r7, r5
 800ae56:	42bb      	cmp	r3, r7
 800ae58:	460d      	mov	r5, r1
 800ae5a:	d9f4      	bls.n	800ae46 <_printf_i+0x112>
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d10b      	bne.n	800ae78 <_printf_i+0x144>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	07df      	lsls	r7, r3, #31
 800ae64:	d508      	bpl.n	800ae78 <_printf_i+0x144>
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	6861      	ldr	r1, [r4, #4]
 800ae6a:	4299      	cmp	r1, r3
 800ae6c:	bfde      	ittt	le
 800ae6e:	2330      	movle	r3, #48	@ 0x30
 800ae70:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae74:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae78:	1b92      	subs	r2, r2, r6
 800ae7a:	6122      	str	r2, [r4, #16]
 800ae7c:	f8cd a000 	str.w	sl, [sp]
 800ae80:	464b      	mov	r3, r9
 800ae82:	aa03      	add	r2, sp, #12
 800ae84:	4621      	mov	r1, r4
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff fee6 	bl	800ac58 <_printf_common>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d14a      	bne.n	800af26 <_printf_i+0x1f2>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	b004      	add	sp, #16
 800ae96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	f043 0320 	orr.w	r3, r3, #32
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	4833      	ldr	r0, [pc, #204]	@ (800af70 <_printf_i+0x23c>)
 800aea4:	2778      	movs	r7, #120	@ 0x78
 800aea6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	6831      	ldr	r1, [r6, #0]
 800aeae:	061f      	lsls	r7, r3, #24
 800aeb0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aeb4:	d402      	bmi.n	800aebc <_printf_i+0x188>
 800aeb6:	065f      	lsls	r7, r3, #25
 800aeb8:	bf48      	it	mi
 800aeba:	b2ad      	uxthmi	r5, r5
 800aebc:	6031      	str	r1, [r6, #0]
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	bf44      	itt	mi
 800aec2:	f043 0320 	orrmi.w	r3, r3, #32
 800aec6:	6023      	strmi	r3, [r4, #0]
 800aec8:	b11d      	cbz	r5, 800aed2 <_printf_i+0x19e>
 800aeca:	2310      	movs	r3, #16
 800aecc:	e7ac      	b.n	800ae28 <_printf_i+0xf4>
 800aece:	4827      	ldr	r0, [pc, #156]	@ (800af6c <_printf_i+0x238>)
 800aed0:	e7e9      	b.n	800aea6 <_printf_i+0x172>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	f023 0320 	bic.w	r3, r3, #32
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	e7f6      	b.n	800aeca <_printf_i+0x196>
 800aedc:	4616      	mov	r6, r2
 800aede:	e7bd      	b.n	800ae5c <_printf_i+0x128>
 800aee0:	6833      	ldr	r3, [r6, #0]
 800aee2:	6825      	ldr	r5, [r4, #0]
 800aee4:	6961      	ldr	r1, [r4, #20]
 800aee6:	1d18      	adds	r0, r3, #4
 800aee8:	6030      	str	r0, [r6, #0]
 800aeea:	062e      	lsls	r6, r5, #24
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	d501      	bpl.n	800aef4 <_printf_i+0x1c0>
 800aef0:	6019      	str	r1, [r3, #0]
 800aef2:	e002      	b.n	800aefa <_printf_i+0x1c6>
 800aef4:	0668      	lsls	r0, r5, #25
 800aef6:	d5fb      	bpl.n	800aef0 <_printf_i+0x1bc>
 800aef8:	8019      	strh	r1, [r3, #0]
 800aefa:	2300      	movs	r3, #0
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	4616      	mov	r6, r2
 800af00:	e7bc      	b.n	800ae7c <_printf_i+0x148>
 800af02:	6833      	ldr	r3, [r6, #0]
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	6032      	str	r2, [r6, #0]
 800af08:	681e      	ldr	r6, [r3, #0]
 800af0a:	6862      	ldr	r2, [r4, #4]
 800af0c:	2100      	movs	r1, #0
 800af0e:	4630      	mov	r0, r6
 800af10:	f7f5 f95e 	bl	80001d0 <memchr>
 800af14:	b108      	cbz	r0, 800af1a <_printf_i+0x1e6>
 800af16:	1b80      	subs	r0, r0, r6
 800af18:	6060      	str	r0, [r4, #4]
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	2300      	movs	r3, #0
 800af20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af24:	e7aa      	b.n	800ae7c <_printf_i+0x148>
 800af26:	6923      	ldr	r3, [r4, #16]
 800af28:	4632      	mov	r2, r6
 800af2a:	4649      	mov	r1, r9
 800af2c:	4640      	mov	r0, r8
 800af2e:	47d0      	blx	sl
 800af30:	3001      	adds	r0, #1
 800af32:	d0ad      	beq.n	800ae90 <_printf_i+0x15c>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	079b      	lsls	r3, r3, #30
 800af38:	d413      	bmi.n	800af62 <_printf_i+0x22e>
 800af3a:	68e0      	ldr	r0, [r4, #12]
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	4298      	cmp	r0, r3
 800af40:	bfb8      	it	lt
 800af42:	4618      	movlt	r0, r3
 800af44:	e7a6      	b.n	800ae94 <_printf_i+0x160>
 800af46:	2301      	movs	r3, #1
 800af48:	4632      	mov	r2, r6
 800af4a:	4649      	mov	r1, r9
 800af4c:	4640      	mov	r0, r8
 800af4e:	47d0      	blx	sl
 800af50:	3001      	adds	r0, #1
 800af52:	d09d      	beq.n	800ae90 <_printf_i+0x15c>
 800af54:	3501      	adds	r5, #1
 800af56:	68e3      	ldr	r3, [r4, #12]
 800af58:	9903      	ldr	r1, [sp, #12]
 800af5a:	1a5b      	subs	r3, r3, r1
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	dcf2      	bgt.n	800af46 <_printf_i+0x212>
 800af60:	e7eb      	b.n	800af3a <_printf_i+0x206>
 800af62:	2500      	movs	r5, #0
 800af64:	f104 0619 	add.w	r6, r4, #25
 800af68:	e7f5      	b.n	800af56 <_printf_i+0x222>
 800af6a:	bf00      	nop
 800af6c:	0800c9a5 	.word	0x0800c9a5
 800af70:	0800c9b6 	.word	0x0800c9b6

0800af74 <__sflush_r>:
 800af74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7c:	0716      	lsls	r6, r2, #28
 800af7e:	4605      	mov	r5, r0
 800af80:	460c      	mov	r4, r1
 800af82:	d454      	bmi.n	800b02e <__sflush_r+0xba>
 800af84:	684b      	ldr	r3, [r1, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	dc02      	bgt.n	800af90 <__sflush_r+0x1c>
 800af8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	dd48      	ble.n	800b022 <__sflush_r+0xae>
 800af90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af92:	2e00      	cmp	r6, #0
 800af94:	d045      	beq.n	800b022 <__sflush_r+0xae>
 800af96:	2300      	movs	r3, #0
 800af98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af9c:	682f      	ldr	r7, [r5, #0]
 800af9e:	6a21      	ldr	r1, [r4, #32]
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	d030      	beq.n	800b006 <__sflush_r+0x92>
 800afa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	0759      	lsls	r1, r3, #29
 800afaa:	d505      	bpl.n	800afb8 <__sflush_r+0x44>
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afb2:	b10b      	cbz	r3, 800afb8 <__sflush_r+0x44>
 800afb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afb6:	1ad2      	subs	r2, r2, r3
 800afb8:	2300      	movs	r3, #0
 800afba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afbc:	6a21      	ldr	r1, [r4, #32]
 800afbe:	4628      	mov	r0, r5
 800afc0:	47b0      	blx	r6
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	d106      	bne.n	800afd6 <__sflush_r+0x62>
 800afc8:	6829      	ldr	r1, [r5, #0]
 800afca:	291d      	cmp	r1, #29
 800afcc:	d82b      	bhi.n	800b026 <__sflush_r+0xb2>
 800afce:	4a2a      	ldr	r2, [pc, #168]	@ (800b078 <__sflush_r+0x104>)
 800afd0:	410a      	asrs	r2, r1
 800afd2:	07d6      	lsls	r6, r2, #31
 800afd4:	d427      	bmi.n	800b026 <__sflush_r+0xb2>
 800afd6:	2200      	movs	r2, #0
 800afd8:	6062      	str	r2, [r4, #4]
 800afda:	04d9      	lsls	r1, r3, #19
 800afdc:	6922      	ldr	r2, [r4, #16]
 800afde:	6022      	str	r2, [r4, #0]
 800afe0:	d504      	bpl.n	800afec <__sflush_r+0x78>
 800afe2:	1c42      	adds	r2, r0, #1
 800afe4:	d101      	bne.n	800afea <__sflush_r+0x76>
 800afe6:	682b      	ldr	r3, [r5, #0]
 800afe8:	b903      	cbnz	r3, 800afec <__sflush_r+0x78>
 800afea:	6560      	str	r0, [r4, #84]	@ 0x54
 800afec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afee:	602f      	str	r7, [r5, #0]
 800aff0:	b1b9      	cbz	r1, 800b022 <__sflush_r+0xae>
 800aff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aff6:	4299      	cmp	r1, r3
 800aff8:	d002      	beq.n	800b000 <__sflush_r+0x8c>
 800affa:	4628      	mov	r0, r5
 800affc:	f7ff fbf2 	bl	800a7e4 <_free_r>
 800b000:	2300      	movs	r3, #0
 800b002:	6363      	str	r3, [r4, #52]	@ 0x34
 800b004:	e00d      	b.n	800b022 <__sflush_r+0xae>
 800b006:	2301      	movs	r3, #1
 800b008:	4628      	mov	r0, r5
 800b00a:	47b0      	blx	r6
 800b00c:	4602      	mov	r2, r0
 800b00e:	1c50      	adds	r0, r2, #1
 800b010:	d1c9      	bne.n	800afa6 <__sflush_r+0x32>
 800b012:	682b      	ldr	r3, [r5, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0c6      	beq.n	800afa6 <__sflush_r+0x32>
 800b018:	2b1d      	cmp	r3, #29
 800b01a:	d001      	beq.n	800b020 <__sflush_r+0xac>
 800b01c:	2b16      	cmp	r3, #22
 800b01e:	d11e      	bne.n	800b05e <__sflush_r+0xea>
 800b020:	602f      	str	r7, [r5, #0]
 800b022:	2000      	movs	r0, #0
 800b024:	e022      	b.n	800b06c <__sflush_r+0xf8>
 800b026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b02a:	b21b      	sxth	r3, r3
 800b02c:	e01b      	b.n	800b066 <__sflush_r+0xf2>
 800b02e:	690f      	ldr	r7, [r1, #16]
 800b030:	2f00      	cmp	r7, #0
 800b032:	d0f6      	beq.n	800b022 <__sflush_r+0xae>
 800b034:	0793      	lsls	r3, r2, #30
 800b036:	680e      	ldr	r6, [r1, #0]
 800b038:	bf08      	it	eq
 800b03a:	694b      	ldreq	r3, [r1, #20]
 800b03c:	600f      	str	r7, [r1, #0]
 800b03e:	bf18      	it	ne
 800b040:	2300      	movne	r3, #0
 800b042:	eba6 0807 	sub.w	r8, r6, r7
 800b046:	608b      	str	r3, [r1, #8]
 800b048:	f1b8 0f00 	cmp.w	r8, #0
 800b04c:	dde9      	ble.n	800b022 <__sflush_r+0xae>
 800b04e:	6a21      	ldr	r1, [r4, #32]
 800b050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b052:	4643      	mov	r3, r8
 800b054:	463a      	mov	r2, r7
 800b056:	4628      	mov	r0, r5
 800b058:	47b0      	blx	r6
 800b05a:	2800      	cmp	r0, #0
 800b05c:	dc08      	bgt.n	800b070 <__sflush_r+0xfc>
 800b05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b070:	4407      	add	r7, r0
 800b072:	eba8 0800 	sub.w	r8, r8, r0
 800b076:	e7e7      	b.n	800b048 <__sflush_r+0xd4>
 800b078:	dfbffffe 	.word	0xdfbffffe

0800b07c <_fflush_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	690b      	ldr	r3, [r1, #16]
 800b080:	4605      	mov	r5, r0
 800b082:	460c      	mov	r4, r1
 800b084:	b913      	cbnz	r3, 800b08c <_fflush_r+0x10>
 800b086:	2500      	movs	r5, #0
 800b088:	4628      	mov	r0, r5
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	b118      	cbz	r0, 800b096 <_fflush_r+0x1a>
 800b08e:	6a03      	ldr	r3, [r0, #32]
 800b090:	b90b      	cbnz	r3, 800b096 <_fflush_r+0x1a>
 800b092:	f7ff f99f 	bl	800a3d4 <__sinit>
 800b096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0f3      	beq.n	800b086 <_fflush_r+0xa>
 800b09e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0a0:	07d0      	lsls	r0, r2, #31
 800b0a2:	d404      	bmi.n	800b0ae <_fflush_r+0x32>
 800b0a4:	0599      	lsls	r1, r3, #22
 800b0a6:	d402      	bmi.n	800b0ae <_fflush_r+0x32>
 800b0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0aa:	f7ff fb8a 	bl	800a7c2 <__retarget_lock_acquire_recursive>
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	f7ff ff5f 	bl	800af74 <__sflush_r>
 800b0b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0b8:	07da      	lsls	r2, r3, #31
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	d4e4      	bmi.n	800b088 <_fflush_r+0xc>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	059b      	lsls	r3, r3, #22
 800b0c2:	d4e1      	bmi.n	800b088 <_fflush_r+0xc>
 800b0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0c6:	f7ff fb7d 	bl	800a7c4 <__retarget_lock_release_recursive>
 800b0ca:	e7dd      	b.n	800b088 <_fflush_r+0xc>

0800b0cc <__swhatbuf_r>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	b096      	sub	sp, #88	@ 0x58
 800b0d8:	4615      	mov	r5, r2
 800b0da:	461e      	mov	r6, r3
 800b0dc:	da0d      	bge.n	800b0fa <__swhatbuf_r+0x2e>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0e4:	f04f 0100 	mov.w	r1, #0
 800b0e8:	bf14      	ite	ne
 800b0ea:	2340      	movne	r3, #64	@ 0x40
 800b0ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	6031      	str	r1, [r6, #0]
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	b016      	add	sp, #88	@ 0x58
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
 800b0fa:	466a      	mov	r2, sp
 800b0fc:	f000 f848 	bl	800b190 <_fstat_r>
 800b100:	2800      	cmp	r0, #0
 800b102:	dbec      	blt.n	800b0de <__swhatbuf_r+0x12>
 800b104:	9901      	ldr	r1, [sp, #4]
 800b106:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b10a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b10e:	4259      	negs	r1, r3
 800b110:	4159      	adcs	r1, r3
 800b112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b116:	e7eb      	b.n	800b0f0 <__swhatbuf_r+0x24>

0800b118 <__smakebuf_r>:
 800b118:	898b      	ldrh	r3, [r1, #12]
 800b11a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b11c:	079d      	lsls	r5, r3, #30
 800b11e:	4606      	mov	r6, r0
 800b120:	460c      	mov	r4, r1
 800b122:	d507      	bpl.n	800b134 <__smakebuf_r+0x1c>
 800b124:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	6123      	str	r3, [r4, #16]
 800b12c:	2301      	movs	r3, #1
 800b12e:	6163      	str	r3, [r4, #20]
 800b130:	b003      	add	sp, #12
 800b132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b134:	ab01      	add	r3, sp, #4
 800b136:	466a      	mov	r2, sp
 800b138:	f7ff ffc8 	bl	800b0cc <__swhatbuf_r>
 800b13c:	9f00      	ldr	r7, [sp, #0]
 800b13e:	4605      	mov	r5, r0
 800b140:	4639      	mov	r1, r7
 800b142:	4630      	mov	r0, r6
 800b144:	f7ff fbba 	bl	800a8bc <_malloc_r>
 800b148:	b948      	cbnz	r0, 800b15e <__smakebuf_r+0x46>
 800b14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b14e:	059a      	lsls	r2, r3, #22
 800b150:	d4ee      	bmi.n	800b130 <__smakebuf_r+0x18>
 800b152:	f023 0303 	bic.w	r3, r3, #3
 800b156:	f043 0302 	orr.w	r3, r3, #2
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	e7e2      	b.n	800b124 <__smakebuf_r+0xc>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	6020      	str	r0, [r4, #0]
 800b162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b16e:	b15b      	cbz	r3, 800b188 <__smakebuf_r+0x70>
 800b170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b174:	4630      	mov	r0, r6
 800b176:	f000 f81d 	bl	800b1b4 <_isatty_r>
 800b17a:	b128      	cbz	r0, 800b188 <__smakebuf_r+0x70>
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	f023 0303 	bic.w	r3, r3, #3
 800b182:	f043 0301 	orr.w	r3, r3, #1
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	431d      	orrs	r5, r3
 800b18c:	81a5      	strh	r5, [r4, #12]
 800b18e:	e7cf      	b.n	800b130 <__smakebuf_r+0x18>

0800b190 <_fstat_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d07      	ldr	r5, [pc, #28]	@ (800b1b0 <_fstat_r+0x20>)
 800b194:	2300      	movs	r3, #0
 800b196:	4604      	mov	r4, r0
 800b198:	4608      	mov	r0, r1
 800b19a:	4611      	mov	r1, r2
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	f7f7 fc72 	bl	8002a86 <_fstat>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	d102      	bne.n	800b1ac <_fstat_r+0x1c>
 800b1a6:	682b      	ldr	r3, [r5, #0]
 800b1a8:	b103      	cbz	r3, 800b1ac <_fstat_r+0x1c>
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	bd38      	pop	{r3, r4, r5, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20002b24 	.word	0x20002b24

0800b1b4 <_isatty_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d06      	ldr	r5, [pc, #24]	@ (800b1d0 <_isatty_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f7 fc71 	bl	8002aa6 <_isatty>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_isatty_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_isatty_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20002b24 	.word	0x20002b24

0800b1d4 <_sbrk_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d06      	ldr	r5, [pc, #24]	@ (800b1f0 <_sbrk_r+0x1c>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	f7f7 fc7a 	bl	8002ad8 <_sbrk>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_sbrk_r+0x1a>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_sbrk_r+0x1a>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20002b24 	.word	0x20002b24

0800b1f4 <pow>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	ed2d 8b02 	vpush	{d8}
 800b1fa:	eeb0 8a40 	vmov.f32	s16, s0
 800b1fe:	eef0 8a60 	vmov.f32	s17, s1
 800b202:	ec55 4b11 	vmov	r4, r5, d1
 800b206:	f000 f8db 	bl	800b3c0 <__ieee754_pow>
 800b20a:	4622      	mov	r2, r4
 800b20c:	462b      	mov	r3, r5
 800b20e:	4620      	mov	r0, r4
 800b210:	4629      	mov	r1, r5
 800b212:	ec57 6b10 	vmov	r6, r7, d0
 800b216:	f7f5 fc81 	bl	8000b1c <__aeabi_dcmpun>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d13b      	bne.n	800b296 <pow+0xa2>
 800b21e:	ec51 0b18 	vmov	r0, r1, d8
 800b222:	2200      	movs	r2, #0
 800b224:	2300      	movs	r3, #0
 800b226:	f7f5 fc47 	bl	8000ab8 <__aeabi_dcmpeq>
 800b22a:	b1b8      	cbz	r0, 800b25c <pow+0x68>
 800b22c:	2200      	movs	r2, #0
 800b22e:	2300      	movs	r3, #0
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 fc40 	bl	8000ab8 <__aeabi_dcmpeq>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d146      	bne.n	800b2ca <pow+0xd6>
 800b23c:	ec45 4b10 	vmov	d0, r4, r5
 800b240:	f000 f8a6 	bl	800b390 <finite>
 800b244:	b338      	cbz	r0, 800b296 <pow+0xa2>
 800b246:	2200      	movs	r2, #0
 800b248:	2300      	movs	r3, #0
 800b24a:	4620      	mov	r0, r4
 800b24c:	4629      	mov	r1, r5
 800b24e:	f7f5 fc3d 	bl	8000acc <__aeabi_dcmplt>
 800b252:	b300      	cbz	r0, 800b296 <pow+0xa2>
 800b254:	f7ff fa8a 	bl	800a76c <__errno>
 800b258:	2322      	movs	r3, #34	@ 0x22
 800b25a:	e01b      	b.n	800b294 <pow+0xa0>
 800b25c:	ec47 6b10 	vmov	d0, r6, r7
 800b260:	f000 f896 	bl	800b390 <finite>
 800b264:	b9e0      	cbnz	r0, 800b2a0 <pow+0xac>
 800b266:	eeb0 0a48 	vmov.f32	s0, s16
 800b26a:	eef0 0a68 	vmov.f32	s1, s17
 800b26e:	f000 f88f 	bl	800b390 <finite>
 800b272:	b1a8      	cbz	r0, 800b2a0 <pow+0xac>
 800b274:	ec45 4b10 	vmov	d0, r4, r5
 800b278:	f000 f88a 	bl	800b390 <finite>
 800b27c:	b180      	cbz	r0, 800b2a0 <pow+0xac>
 800b27e:	4632      	mov	r2, r6
 800b280:	463b      	mov	r3, r7
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f5 fc49 	bl	8000b1c <__aeabi_dcmpun>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0e2      	beq.n	800b254 <pow+0x60>
 800b28e:	f7ff fa6d 	bl	800a76c <__errno>
 800b292:	2321      	movs	r3, #33	@ 0x21
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	ecbd 8b02 	vpop	{d8}
 800b29a:	ec47 6b10 	vmov	d0, r6, r7
 800b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f5 fc06 	bl	8000ab8 <__aeabi_dcmpeq>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d0f2      	beq.n	800b296 <pow+0xa2>
 800b2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800b2b4:	eef0 0a68 	vmov.f32	s1, s17
 800b2b8:	f000 f86a 	bl	800b390 <finite>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d0ea      	beq.n	800b296 <pow+0xa2>
 800b2c0:	ec45 4b10 	vmov	d0, r4, r5
 800b2c4:	f000 f864 	bl	800b390 <finite>
 800b2c8:	e7c3      	b.n	800b252 <pow+0x5e>
 800b2ca:	4f01      	ldr	r7, [pc, #4]	@ (800b2d0 <pow+0xdc>)
 800b2cc:	2600      	movs	r6, #0
 800b2ce:	e7e2      	b.n	800b296 <pow+0xa2>
 800b2d0:	3ff00000 	.word	0x3ff00000

0800b2d4 <powf>:
 800b2d4:	b508      	push	{r3, lr}
 800b2d6:	ed2d 8b04 	vpush	{d8-d9}
 800b2da:	eeb0 8a60 	vmov.f32	s16, s1
 800b2de:	eeb0 9a40 	vmov.f32	s18, s0
 800b2e2:	f000 fdb9 	bl	800be58 <__ieee754_powf>
 800b2e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ee:	eef0 8a40 	vmov.f32	s17, s0
 800b2f2:	d63e      	bvs.n	800b372 <powf+0x9e>
 800b2f4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fc:	d112      	bne.n	800b324 <powf+0x50>
 800b2fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b306:	d039      	beq.n	800b37c <powf+0xa8>
 800b308:	eeb0 0a48 	vmov.f32	s0, s16
 800b30c:	f000 f84b 	bl	800b3a6 <finitef>
 800b310:	b378      	cbz	r0, 800b372 <powf+0x9e>
 800b312:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31a:	d52a      	bpl.n	800b372 <powf+0x9e>
 800b31c:	f7ff fa26 	bl	800a76c <__errno>
 800b320:	2322      	movs	r3, #34	@ 0x22
 800b322:	e014      	b.n	800b34e <powf+0x7a>
 800b324:	f000 f83f 	bl	800b3a6 <finitef>
 800b328:	b998      	cbnz	r0, 800b352 <powf+0x7e>
 800b32a:	eeb0 0a49 	vmov.f32	s0, s18
 800b32e:	f000 f83a 	bl	800b3a6 <finitef>
 800b332:	b170      	cbz	r0, 800b352 <powf+0x7e>
 800b334:	eeb0 0a48 	vmov.f32	s0, s16
 800b338:	f000 f835 	bl	800b3a6 <finitef>
 800b33c:	b148      	cbz	r0, 800b352 <powf+0x7e>
 800b33e:	eef4 8a68 	vcmp.f32	s17, s17
 800b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b346:	d7e9      	bvc.n	800b31c <powf+0x48>
 800b348:	f7ff fa10 	bl	800a76c <__errno>
 800b34c:	2321      	movs	r3, #33	@ 0x21
 800b34e:	6003      	str	r3, [r0, #0]
 800b350:	e00f      	b.n	800b372 <powf+0x9e>
 800b352:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35a:	d10a      	bne.n	800b372 <powf+0x9e>
 800b35c:	eeb0 0a49 	vmov.f32	s0, s18
 800b360:	f000 f821 	bl	800b3a6 <finitef>
 800b364:	b128      	cbz	r0, 800b372 <powf+0x9e>
 800b366:	eeb0 0a48 	vmov.f32	s0, s16
 800b36a:	f000 f81c 	bl	800b3a6 <finitef>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d1d4      	bne.n	800b31c <powf+0x48>
 800b372:	eeb0 0a68 	vmov.f32	s0, s17
 800b376:	ecbd 8b04 	vpop	{d8-d9}
 800b37a:	bd08      	pop	{r3, pc}
 800b37c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b380:	e7f7      	b.n	800b372 <powf+0x9e>

0800b382 <fabsf>:
 800b382:	ee10 3a10 	vmov	r3, s0
 800b386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b38a:	ee00 3a10 	vmov	s0, r3
 800b38e:	4770      	bx	lr

0800b390 <finite>:
 800b390:	b082      	sub	sp, #8
 800b392:	ed8d 0b00 	vstr	d0, [sp]
 800b396:	9801      	ldr	r0, [sp, #4]
 800b398:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b39c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b3a0:	0fc0      	lsrs	r0, r0, #31
 800b3a2:	b002      	add	sp, #8
 800b3a4:	4770      	bx	lr

0800b3a6 <finitef>:
 800b3a6:	ee10 3a10 	vmov	r3, s0
 800b3aa:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b3ae:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b3b2:	bfac      	ite	ge
 800b3b4:	2000      	movge	r0, #0
 800b3b6:	2001      	movlt	r0, #1
 800b3b8:	4770      	bx	lr
 800b3ba:	0000      	movs	r0, r0
 800b3bc:	0000      	movs	r0, r0
	...

0800b3c0 <__ieee754_pow>:
 800b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	b091      	sub	sp, #68	@ 0x44
 800b3c6:	ed8d 1b00 	vstr	d1, [sp]
 800b3ca:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b3ce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b3d2:	ea5a 0001 	orrs.w	r0, sl, r1
 800b3d6:	ec57 6b10 	vmov	r6, r7, d0
 800b3da:	d113      	bne.n	800b404 <__ieee754_pow+0x44>
 800b3dc:	19b3      	adds	r3, r6, r6
 800b3de:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b3e2:	4152      	adcs	r2, r2
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	4b98      	ldr	r3, [pc, #608]	@ (800b648 <__ieee754_pow+0x288>)
 800b3e8:	4193      	sbcs	r3, r2
 800b3ea:	f080 84ea 	bcs.w	800bdc2 <__ieee754_pow+0xa02>
 800b3ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f4 ff41 	bl	800027c <__adddf3>
 800b3fa:	ec41 0b10 	vmov	d0, r0, r1
 800b3fe:	b011      	add	sp, #68	@ 0x44
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b404:	4a91      	ldr	r2, [pc, #580]	@ (800b64c <__ieee754_pow+0x28c>)
 800b406:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b40a:	4590      	cmp	r8, r2
 800b40c:	463d      	mov	r5, r7
 800b40e:	4633      	mov	r3, r6
 800b410:	d806      	bhi.n	800b420 <__ieee754_pow+0x60>
 800b412:	d101      	bne.n	800b418 <__ieee754_pow+0x58>
 800b414:	2e00      	cmp	r6, #0
 800b416:	d1ea      	bne.n	800b3ee <__ieee754_pow+0x2e>
 800b418:	4592      	cmp	sl, r2
 800b41a:	d801      	bhi.n	800b420 <__ieee754_pow+0x60>
 800b41c:	d10e      	bne.n	800b43c <__ieee754_pow+0x7c>
 800b41e:	b169      	cbz	r1, 800b43c <__ieee754_pow+0x7c>
 800b420:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b424:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b428:	431d      	orrs	r5, r3
 800b42a:	d1e0      	bne.n	800b3ee <__ieee754_pow+0x2e>
 800b42c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b430:	18db      	adds	r3, r3, r3
 800b432:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b436:	4152      	adcs	r2, r2
 800b438:	429d      	cmp	r5, r3
 800b43a:	e7d4      	b.n	800b3e6 <__ieee754_pow+0x26>
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	46c3      	mov	fp, r8
 800b440:	da3a      	bge.n	800b4b8 <__ieee754_pow+0xf8>
 800b442:	4a83      	ldr	r2, [pc, #524]	@ (800b650 <__ieee754_pow+0x290>)
 800b444:	4592      	cmp	sl, r2
 800b446:	d84d      	bhi.n	800b4e4 <__ieee754_pow+0x124>
 800b448:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b44c:	4592      	cmp	sl, r2
 800b44e:	f240 84c7 	bls.w	800bde0 <__ieee754_pow+0xa20>
 800b452:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b456:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b45a:	2a14      	cmp	r2, #20
 800b45c:	dd0f      	ble.n	800b47e <__ieee754_pow+0xbe>
 800b45e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b462:	fa21 f402 	lsr.w	r4, r1, r2
 800b466:	fa04 f202 	lsl.w	r2, r4, r2
 800b46a:	428a      	cmp	r2, r1
 800b46c:	f040 84b8 	bne.w	800bde0 <__ieee754_pow+0xa20>
 800b470:	f004 0401 	and.w	r4, r4, #1
 800b474:	f1c4 0402 	rsb	r4, r4, #2
 800b478:	2900      	cmp	r1, #0
 800b47a:	d158      	bne.n	800b52e <__ieee754_pow+0x16e>
 800b47c:	e00e      	b.n	800b49c <__ieee754_pow+0xdc>
 800b47e:	2900      	cmp	r1, #0
 800b480:	d154      	bne.n	800b52c <__ieee754_pow+0x16c>
 800b482:	f1c2 0214 	rsb	r2, r2, #20
 800b486:	fa4a f402 	asr.w	r4, sl, r2
 800b48a:	fa04 f202 	lsl.w	r2, r4, r2
 800b48e:	4552      	cmp	r2, sl
 800b490:	f040 84a3 	bne.w	800bdda <__ieee754_pow+0xa1a>
 800b494:	f004 0401 	and.w	r4, r4, #1
 800b498:	f1c4 0402 	rsb	r4, r4, #2
 800b49c:	4a6d      	ldr	r2, [pc, #436]	@ (800b654 <__ieee754_pow+0x294>)
 800b49e:	4592      	cmp	sl, r2
 800b4a0:	d12e      	bne.n	800b500 <__ieee754_pow+0x140>
 800b4a2:	f1b9 0f00 	cmp.w	r9, #0
 800b4a6:	f280 8494 	bge.w	800bdd2 <__ieee754_pow+0xa12>
 800b4aa:	496a      	ldr	r1, [pc, #424]	@ (800b654 <__ieee754_pow+0x294>)
 800b4ac:	4632      	mov	r2, r6
 800b4ae:	463b      	mov	r3, r7
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f7f5 f9c3 	bl	800083c <__aeabi_ddiv>
 800b4b6:	e7a0      	b.n	800b3fa <__ieee754_pow+0x3a>
 800b4b8:	2400      	movs	r4, #0
 800b4ba:	bbc1      	cbnz	r1, 800b52e <__ieee754_pow+0x16e>
 800b4bc:	4a63      	ldr	r2, [pc, #396]	@ (800b64c <__ieee754_pow+0x28c>)
 800b4be:	4592      	cmp	sl, r2
 800b4c0:	d1ec      	bne.n	800b49c <__ieee754_pow+0xdc>
 800b4c2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b4c6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	f000 8479 	beq.w	800bdc2 <__ieee754_pow+0xa02>
 800b4d0:	4b61      	ldr	r3, [pc, #388]	@ (800b658 <__ieee754_pow+0x298>)
 800b4d2:	4598      	cmp	r8, r3
 800b4d4:	d908      	bls.n	800b4e8 <__ieee754_pow+0x128>
 800b4d6:	f1b9 0f00 	cmp.w	r9, #0
 800b4da:	f2c0 8476 	blt.w	800bdca <__ieee754_pow+0xa0a>
 800b4de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4e2:	e78a      	b.n	800b3fa <__ieee754_pow+0x3a>
 800b4e4:	2402      	movs	r4, #2
 800b4e6:	e7e8      	b.n	800b4ba <__ieee754_pow+0xfa>
 800b4e8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ec:	f04f 0000 	mov.w	r0, #0
 800b4f0:	f04f 0100 	mov.w	r1, #0
 800b4f4:	da81      	bge.n	800b3fa <__ieee754_pow+0x3a>
 800b4f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b4fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b4fe:	e77c      	b.n	800b3fa <__ieee754_pow+0x3a>
 800b500:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b504:	d106      	bne.n	800b514 <__ieee754_pow+0x154>
 800b506:	4632      	mov	r2, r6
 800b508:	463b      	mov	r3, r7
 800b50a:	4630      	mov	r0, r6
 800b50c:	4639      	mov	r1, r7
 800b50e:	f7f5 f86b 	bl	80005e8 <__aeabi_dmul>
 800b512:	e772      	b.n	800b3fa <__ieee754_pow+0x3a>
 800b514:	4a51      	ldr	r2, [pc, #324]	@ (800b65c <__ieee754_pow+0x29c>)
 800b516:	4591      	cmp	r9, r2
 800b518:	d109      	bne.n	800b52e <__ieee754_pow+0x16e>
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	db07      	blt.n	800b52e <__ieee754_pow+0x16e>
 800b51e:	ec47 6b10 	vmov	d0, r6, r7
 800b522:	b011      	add	sp, #68	@ 0x44
 800b524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	f001 b8ae 	b.w	800c688 <__ieee754_sqrt>
 800b52c:	2400      	movs	r4, #0
 800b52e:	ec47 6b10 	vmov	d0, r6, r7
 800b532:	9302      	str	r3, [sp, #8]
 800b534:	f000 fc88 	bl	800be48 <fabs>
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	ec51 0b10 	vmov	r0, r1, d0
 800b53e:	bb53      	cbnz	r3, 800b596 <__ieee754_pow+0x1d6>
 800b540:	4b44      	ldr	r3, [pc, #272]	@ (800b654 <__ieee754_pow+0x294>)
 800b542:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b546:	429a      	cmp	r2, r3
 800b548:	d002      	beq.n	800b550 <__ieee754_pow+0x190>
 800b54a:	f1b8 0f00 	cmp.w	r8, #0
 800b54e:	d122      	bne.n	800b596 <__ieee754_pow+0x1d6>
 800b550:	f1b9 0f00 	cmp.w	r9, #0
 800b554:	da05      	bge.n	800b562 <__ieee754_pow+0x1a2>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	2000      	movs	r0, #0
 800b55c:	493d      	ldr	r1, [pc, #244]	@ (800b654 <__ieee754_pow+0x294>)
 800b55e:	f7f5 f96d 	bl	800083c <__aeabi_ddiv>
 800b562:	2d00      	cmp	r5, #0
 800b564:	f6bf af49 	bge.w	800b3fa <__ieee754_pow+0x3a>
 800b568:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b56c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b570:	ea58 0804 	orrs.w	r8, r8, r4
 800b574:	d108      	bne.n	800b588 <__ieee754_pow+0x1c8>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4610      	mov	r0, r2
 800b57c:	4619      	mov	r1, r3
 800b57e:	f7f4 fe7b 	bl	8000278 <__aeabi_dsub>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	e794      	b.n	800b4b2 <__ieee754_pow+0xf2>
 800b588:	2c01      	cmp	r4, #1
 800b58a:	f47f af36 	bne.w	800b3fa <__ieee754_pow+0x3a>
 800b58e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b592:	4619      	mov	r1, r3
 800b594:	e731      	b.n	800b3fa <__ieee754_pow+0x3a>
 800b596:	0feb      	lsrs	r3, r5, #31
 800b598:	3b01      	subs	r3, #1
 800b59a:	ea53 0204 	orrs.w	r2, r3, r4
 800b59e:	d102      	bne.n	800b5a6 <__ieee754_pow+0x1e6>
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	e7e9      	b.n	800b57a <__ieee754_pow+0x1ba>
 800b5a6:	3c01      	subs	r4, #1
 800b5a8:	431c      	orrs	r4, r3
 800b5aa:	d016      	beq.n	800b5da <__ieee754_pow+0x21a>
 800b5ac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b638 <__ieee754_pow+0x278>
 800b5b0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b5b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5b8:	f240 8112 	bls.w	800b7e0 <__ieee754_pow+0x420>
 800b5bc:	4b28      	ldr	r3, [pc, #160]	@ (800b660 <__ieee754_pow+0x2a0>)
 800b5be:	459a      	cmp	sl, r3
 800b5c0:	4b25      	ldr	r3, [pc, #148]	@ (800b658 <__ieee754_pow+0x298>)
 800b5c2:	d916      	bls.n	800b5f2 <__ieee754_pow+0x232>
 800b5c4:	4598      	cmp	r8, r3
 800b5c6:	d80b      	bhi.n	800b5e0 <__ieee754_pow+0x220>
 800b5c8:	f1b9 0f00 	cmp.w	r9, #0
 800b5cc:	da0b      	bge.n	800b5e6 <__ieee754_pow+0x226>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	b011      	add	sp, #68	@ 0x44
 800b5d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d6:	f000 bfc3 	b.w	800c560 <__math_oflow>
 800b5da:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b640 <__ieee754_pow+0x280>
 800b5de:	e7e7      	b.n	800b5b0 <__ieee754_pow+0x1f0>
 800b5e0:	f1b9 0f00 	cmp.w	r9, #0
 800b5e4:	dcf3      	bgt.n	800b5ce <__ieee754_pow+0x20e>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	b011      	add	sp, #68	@ 0x44
 800b5ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ee:	f000 bfaf 	b.w	800c550 <__math_uflow>
 800b5f2:	4598      	cmp	r8, r3
 800b5f4:	d20c      	bcs.n	800b610 <__ieee754_pow+0x250>
 800b5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f7f5 fa65 	bl	8000acc <__aeabi_dcmplt>
 800b602:	3800      	subs	r0, #0
 800b604:	bf18      	it	ne
 800b606:	2001      	movne	r0, #1
 800b608:	f1b9 0f00 	cmp.w	r9, #0
 800b60c:	daec      	bge.n	800b5e8 <__ieee754_pow+0x228>
 800b60e:	e7df      	b.n	800b5d0 <__ieee754_pow+0x210>
 800b610:	4b10      	ldr	r3, [pc, #64]	@ (800b654 <__ieee754_pow+0x294>)
 800b612:	4598      	cmp	r8, r3
 800b614:	f04f 0200 	mov.w	r2, #0
 800b618:	d924      	bls.n	800b664 <__ieee754_pow+0x2a4>
 800b61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b61e:	2300      	movs	r3, #0
 800b620:	f7f5 fa54 	bl	8000acc <__aeabi_dcmplt>
 800b624:	3800      	subs	r0, #0
 800b626:	bf18      	it	ne
 800b628:	2001      	movne	r0, #1
 800b62a:	f1b9 0f00 	cmp.w	r9, #0
 800b62e:	dccf      	bgt.n	800b5d0 <__ieee754_pow+0x210>
 800b630:	e7da      	b.n	800b5e8 <__ieee754_pow+0x228>
 800b632:	bf00      	nop
 800b634:	f3af 8000 	nop.w
 800b638:	00000000 	.word	0x00000000
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	00000000 	.word	0x00000000
 800b644:	bff00000 	.word	0xbff00000
 800b648:	fff00000 	.word	0xfff00000
 800b64c:	7ff00000 	.word	0x7ff00000
 800b650:	433fffff 	.word	0x433fffff
 800b654:	3ff00000 	.word	0x3ff00000
 800b658:	3fefffff 	.word	0x3fefffff
 800b65c:	3fe00000 	.word	0x3fe00000
 800b660:	43f00000 	.word	0x43f00000
 800b664:	4b5a      	ldr	r3, [pc, #360]	@ (800b7d0 <__ieee754_pow+0x410>)
 800b666:	f7f4 fe07 	bl	8000278 <__aeabi_dsub>
 800b66a:	a351      	add	r3, pc, #324	@ (adr r3, 800b7b0 <__ieee754_pow+0x3f0>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
 800b674:	f7f4 ffb8 	bl	80005e8 <__aeabi_dmul>
 800b678:	a34f      	add	r3, pc, #316	@ (adr r3, 800b7b8 <__ieee754_pow+0x3f8>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	4606      	mov	r6, r0
 800b680:	460f      	mov	r7, r1
 800b682:	4620      	mov	r0, r4
 800b684:	4629      	mov	r1, r5
 800b686:	f7f4 ffaf 	bl	80005e8 <__aeabi_dmul>
 800b68a:	4b52      	ldr	r3, [pc, #328]	@ (800b7d4 <__ieee754_pow+0x414>)
 800b68c:	4682      	mov	sl, r0
 800b68e:	468b      	mov	fp, r1
 800b690:	2200      	movs	r2, #0
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 ffa7 	bl	80005e8 <__aeabi_dmul>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	a148      	add	r1, pc, #288	@ (adr r1, 800b7c0 <__ieee754_pow+0x400>)
 800b6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6a4:	f7f4 fde8 	bl	8000278 <__aeabi_dsub>
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f7f4 ff9c 	bl	80005e8 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	4948      	ldr	r1, [pc, #288]	@ (800b7d8 <__ieee754_pow+0x418>)
 800b6b8:	f7f4 fdde 	bl	8000278 <__aeabi_dsub>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4680      	mov	r8, r0
 800b6c0:	4689      	mov	r9, r1
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	f7f4 ff8e 	bl	80005e8 <__aeabi_dmul>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	f7f4 ff88 	bl	80005e8 <__aeabi_dmul>
 800b6d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b7c8 <__ieee754_pow+0x408>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 ff83 	bl	80005e8 <__aeabi_dmul>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	4659      	mov	r1, fp
 800b6ea:	f7f4 fdc5 	bl	8000278 <__aeabi_dsub>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4689      	mov	r9, r1
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	4639      	mov	r1, r7
 800b6fa:	f7f4 fdbf 	bl	800027c <__adddf3>
 800b6fe:	2400      	movs	r4, #0
 800b700:	4632      	mov	r2, r6
 800b702:	463b      	mov	r3, r7
 800b704:	4620      	mov	r0, r4
 800b706:	460d      	mov	r5, r1
 800b708:	f7f4 fdb6 	bl	8000278 <__aeabi_dsub>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4640      	mov	r0, r8
 800b712:	4649      	mov	r1, r9
 800b714:	f7f4 fdb0 	bl	8000278 <__aeabi_dsub>
 800b718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b71c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b720:	2300      	movs	r3, #0
 800b722:	9304      	str	r3, [sp, #16]
 800b724:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b728:	4606      	mov	r6, r0
 800b72a:	460f      	mov	r7, r1
 800b72c:	4652      	mov	r2, sl
 800b72e:	465b      	mov	r3, fp
 800b730:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b734:	f7f4 fda0 	bl	8000278 <__aeabi_dsub>
 800b738:	4622      	mov	r2, r4
 800b73a:	462b      	mov	r3, r5
 800b73c:	f7f4 ff54 	bl	80005e8 <__aeabi_dmul>
 800b740:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b744:	4680      	mov	r8, r0
 800b746:	4689      	mov	r9, r1
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f4 ff4c 	bl	80005e8 <__aeabi_dmul>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4640      	mov	r0, r8
 800b756:	4649      	mov	r1, r9
 800b758:	f7f4 fd90 	bl	800027c <__adddf3>
 800b75c:	4652      	mov	r2, sl
 800b75e:	465b      	mov	r3, fp
 800b760:	4606      	mov	r6, r0
 800b762:	460f      	mov	r7, r1
 800b764:	4620      	mov	r0, r4
 800b766:	4629      	mov	r1, r5
 800b768:	f7f4 ff3e 	bl	80005e8 <__aeabi_dmul>
 800b76c:	460b      	mov	r3, r1
 800b76e:	4602      	mov	r2, r0
 800b770:	4680      	mov	r8, r0
 800b772:	4689      	mov	r9, r1
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f7f4 fd80 	bl	800027c <__adddf3>
 800b77c:	4b17      	ldr	r3, [pc, #92]	@ (800b7dc <__ieee754_pow+0x41c>)
 800b77e:	4299      	cmp	r1, r3
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	468a      	mov	sl, r1
 800b786:	468b      	mov	fp, r1
 800b788:	f340 82ef 	ble.w	800bd6a <__ieee754_pow+0x9aa>
 800b78c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b790:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b794:	4303      	orrs	r3, r0
 800b796:	f000 81e8 	beq.w	800bb6a <__ieee754_pow+0x7aa>
 800b79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f7f5 f993 	bl	8000acc <__aeabi_dcmplt>
 800b7a6:	3800      	subs	r0, #0
 800b7a8:	bf18      	it	ne
 800b7aa:	2001      	movne	r0, #1
 800b7ac:	e710      	b.n	800b5d0 <__ieee754_pow+0x210>
 800b7ae:	bf00      	nop
 800b7b0:	60000000 	.word	0x60000000
 800b7b4:	3ff71547 	.word	0x3ff71547
 800b7b8:	f85ddf44 	.word	0xf85ddf44
 800b7bc:	3e54ae0b 	.word	0x3e54ae0b
 800b7c0:	55555555 	.word	0x55555555
 800b7c4:	3fd55555 	.word	0x3fd55555
 800b7c8:	652b82fe 	.word	0x652b82fe
 800b7cc:	3ff71547 	.word	0x3ff71547
 800b7d0:	3ff00000 	.word	0x3ff00000
 800b7d4:	3fd00000 	.word	0x3fd00000
 800b7d8:	3fe00000 	.word	0x3fe00000
 800b7dc:	408fffff 	.word	0x408fffff
 800b7e0:	4bd5      	ldr	r3, [pc, #852]	@ (800bb38 <__ieee754_pow+0x778>)
 800b7e2:	402b      	ands	r3, r5
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	b92b      	cbnz	r3, 800b7f4 <__ieee754_pow+0x434>
 800b7e8:	4bd4      	ldr	r3, [pc, #848]	@ (800bb3c <__ieee754_pow+0x77c>)
 800b7ea:	f7f4 fefd 	bl	80005e8 <__aeabi_dmul>
 800b7ee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b7f2:	468b      	mov	fp, r1
 800b7f4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b7f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b7fc:	4413      	add	r3, r2
 800b7fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b800:	4bcf      	ldr	r3, [pc, #828]	@ (800bb40 <__ieee754_pow+0x780>)
 800b802:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b806:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b80a:	459b      	cmp	fp, r3
 800b80c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b810:	dd08      	ble.n	800b824 <__ieee754_pow+0x464>
 800b812:	4bcc      	ldr	r3, [pc, #816]	@ (800bb44 <__ieee754_pow+0x784>)
 800b814:	459b      	cmp	fp, r3
 800b816:	f340 81a5 	ble.w	800bb64 <__ieee754_pow+0x7a4>
 800b81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b81c:	3301      	adds	r3, #1
 800b81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b820:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b824:	f04f 0a00 	mov.w	sl, #0
 800b828:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b82c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b82e:	4bc6      	ldr	r3, [pc, #792]	@ (800bb48 <__ieee754_pow+0x788>)
 800b830:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b834:	ed93 7b00 	vldr	d7, [r3]
 800b838:	4629      	mov	r1, r5
 800b83a:	ec53 2b17 	vmov	r2, r3, d7
 800b83e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b842:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b846:	f7f4 fd17 	bl	8000278 <__aeabi_dsub>
 800b84a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b856:	f7f4 fd11 	bl	800027c <__adddf3>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	2000      	movs	r0, #0
 800b860:	49ba      	ldr	r1, [pc, #744]	@ (800bb4c <__ieee754_pow+0x78c>)
 800b862:	f7f4 ffeb 	bl	800083c <__aeabi_ddiv>
 800b866:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4630      	mov	r0, r6
 800b870:	4639      	mov	r1, r7
 800b872:	f7f4 feb9 	bl	80005e8 <__aeabi_dmul>
 800b876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b87a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b87e:	106d      	asrs	r5, r5, #1
 800b880:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b884:	f04f 0b00 	mov.w	fp, #0
 800b888:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b88c:	4661      	mov	r1, ip
 800b88e:	2200      	movs	r2, #0
 800b890:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b894:	4658      	mov	r0, fp
 800b896:	46e1      	mov	r9, ip
 800b898:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b89c:	4614      	mov	r4, r2
 800b89e:	461d      	mov	r5, r3
 800b8a0:	f7f4 fea2 	bl	80005e8 <__aeabi_dmul>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f4 fce4 	bl	8000278 <__aeabi_dsub>
 800b8b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f7f4 fcdc 	bl	8000278 <__aeabi_dsub>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8c8:	f7f4 fcd6 	bl	8000278 <__aeabi_dsub>
 800b8cc:	465a      	mov	r2, fp
 800b8ce:	464b      	mov	r3, r9
 800b8d0:	f7f4 fe8a 	bl	80005e8 <__aeabi_dmul>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4630      	mov	r0, r6
 800b8da:	4639      	mov	r1, r7
 800b8dc:	f7f4 fccc 	bl	8000278 <__aeabi_dsub>
 800b8e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b8e4:	f7f4 fe80 	bl	80005e8 <__aeabi_dmul>
 800b8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f7f4 fe78 	bl	80005e8 <__aeabi_dmul>
 800b8f8:	a37d      	add	r3, pc, #500	@ (adr r3, 800baf0 <__ieee754_pow+0x730>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	4604      	mov	r4, r0
 800b900:	460d      	mov	r5, r1
 800b902:	f7f4 fe71 	bl	80005e8 <__aeabi_dmul>
 800b906:	a37c      	add	r3, pc, #496	@ (adr r3, 800baf8 <__ieee754_pow+0x738>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fcb6 	bl	800027c <__adddf3>
 800b910:	4622      	mov	r2, r4
 800b912:	462b      	mov	r3, r5
 800b914:	f7f4 fe68 	bl	80005e8 <__aeabi_dmul>
 800b918:	a379      	add	r3, pc, #484	@ (adr r3, 800bb00 <__ieee754_pow+0x740>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fcad 	bl	800027c <__adddf3>
 800b922:	4622      	mov	r2, r4
 800b924:	462b      	mov	r3, r5
 800b926:	f7f4 fe5f 	bl	80005e8 <__aeabi_dmul>
 800b92a:	a377      	add	r3, pc, #476	@ (adr r3, 800bb08 <__ieee754_pow+0x748>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fca4 	bl	800027c <__adddf3>
 800b934:	4622      	mov	r2, r4
 800b936:	462b      	mov	r3, r5
 800b938:	f7f4 fe56 	bl	80005e8 <__aeabi_dmul>
 800b93c:	a374      	add	r3, pc, #464	@ (adr r3, 800bb10 <__ieee754_pow+0x750>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fc9b 	bl	800027c <__adddf3>
 800b946:	4622      	mov	r2, r4
 800b948:	462b      	mov	r3, r5
 800b94a:	f7f4 fe4d 	bl	80005e8 <__aeabi_dmul>
 800b94e:	a372      	add	r3, pc, #456	@ (adr r3, 800bb18 <__ieee754_pow+0x758>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fc92 	bl	800027c <__adddf3>
 800b958:	4622      	mov	r2, r4
 800b95a:	4606      	mov	r6, r0
 800b95c:	460f      	mov	r7, r1
 800b95e:	462b      	mov	r3, r5
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f4 fe40 	bl	80005e8 <__aeabi_dmul>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	f7f4 fe3a 	bl	80005e8 <__aeabi_dmul>
 800b974:	465a      	mov	r2, fp
 800b976:	4604      	mov	r4, r0
 800b978:	460d      	mov	r5, r1
 800b97a:	464b      	mov	r3, r9
 800b97c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b980:	f7f4 fc7c 	bl	800027c <__adddf3>
 800b984:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b988:	f7f4 fe2e 	bl	80005e8 <__aeabi_dmul>
 800b98c:	4622      	mov	r2, r4
 800b98e:	462b      	mov	r3, r5
 800b990:	f7f4 fc74 	bl	800027c <__adddf3>
 800b994:	465a      	mov	r2, fp
 800b996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b99a:	464b      	mov	r3, r9
 800b99c:	4658      	mov	r0, fp
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f7f4 fe22 	bl	80005e8 <__aeabi_dmul>
 800b9a4:	4b6a      	ldr	r3, [pc, #424]	@ (800bb50 <__ieee754_pow+0x790>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	460f      	mov	r7, r1
 800b9ac:	f7f4 fc66 	bl	800027c <__adddf3>
 800b9b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b9b4:	f7f4 fc62 	bl	800027c <__adddf3>
 800b9b8:	46d8      	mov	r8, fp
 800b9ba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b9be:	460d      	mov	r5, r1
 800b9c0:	465a      	mov	r2, fp
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b9cc:	f7f4 fe0c 	bl	80005e8 <__aeabi_dmul>
 800b9d0:	465c      	mov	r4, fp
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	4689      	mov	r9, r1
 800b9d6:	4b5e      	ldr	r3, [pc, #376]	@ (800bb50 <__ieee754_pow+0x790>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	f7f4 fc4b 	bl	8000278 <__aeabi_dsub>
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	463b      	mov	r3, r7
 800b9e6:	f7f4 fc47 	bl	8000278 <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9f2:	f7f4 fc41 	bl	8000278 <__aeabi_dsub>
 800b9f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9fa:	f7f4 fdf5 	bl	80005e8 <__aeabi_dmul>
 800b9fe:	4622      	mov	r2, r4
 800ba00:	4606      	mov	r6, r0
 800ba02:	460f      	mov	r7, r1
 800ba04:	462b      	mov	r3, r5
 800ba06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba0a:	f7f4 fded 	bl	80005e8 <__aeabi_dmul>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f4 fc31 	bl	800027c <__adddf3>
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	460f      	mov	r7, r1
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4640      	mov	r0, r8
 800ba24:	4649      	mov	r1, r9
 800ba26:	f7f4 fc29 	bl	800027c <__adddf3>
 800ba2a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ba2e:	a33c      	add	r3, pc, #240	@ (adr r3, 800bb20 <__ieee754_pow+0x760>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	4658      	mov	r0, fp
 800ba36:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ba3a:	460d      	mov	r5, r1
 800ba3c:	f7f4 fdd4 	bl	80005e8 <__aeabi_dmul>
 800ba40:	465c      	mov	r4, fp
 800ba42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba46:	4642      	mov	r2, r8
 800ba48:	464b      	mov	r3, r9
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f7f4 fc13 	bl	8000278 <__aeabi_dsub>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4630      	mov	r0, r6
 800ba58:	4639      	mov	r1, r7
 800ba5a:	f7f4 fc0d 	bl	8000278 <__aeabi_dsub>
 800ba5e:	a332      	add	r3, pc, #200	@ (adr r3, 800bb28 <__ieee754_pow+0x768>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	f7f4 fdc0 	bl	80005e8 <__aeabi_dmul>
 800ba68:	a331      	add	r3, pc, #196	@ (adr r3, 800bb30 <__ieee754_pow+0x770>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	4620      	mov	r0, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	f7f4 fdb7 	bl	80005e8 <__aeabi_dmul>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4630      	mov	r0, r6
 800ba80:	4639      	mov	r1, r7
 800ba82:	f7f4 fbfb 	bl	800027c <__adddf3>
 800ba86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba88:	4b32      	ldr	r3, [pc, #200]	@ (800bb54 <__ieee754_pow+0x794>)
 800ba8a:	4413      	add	r3, r2
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fbf4 	bl	800027c <__adddf3>
 800ba94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba9a:	f7f4 fd3b 	bl	8000514 <__aeabi_i2d>
 800ba9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800baa0:	4b2d      	ldr	r3, [pc, #180]	@ (800bb58 <__ieee754_pow+0x798>)
 800baa2:	4413      	add	r3, r2
 800baa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baa8:	4606      	mov	r6, r0
 800baaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800baae:	460f      	mov	r7, r1
 800bab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bab4:	f7f4 fbe2 	bl	800027c <__adddf3>
 800bab8:	4642      	mov	r2, r8
 800baba:	464b      	mov	r3, r9
 800babc:	f7f4 fbde 	bl	800027c <__adddf3>
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	f7f4 fbda 	bl	800027c <__adddf3>
 800bac8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bacc:	4632      	mov	r2, r6
 800bace:	463b      	mov	r3, r7
 800bad0:	4658      	mov	r0, fp
 800bad2:	460d      	mov	r5, r1
 800bad4:	f7f4 fbd0 	bl	8000278 <__aeabi_dsub>
 800bad8:	4642      	mov	r2, r8
 800bada:	464b      	mov	r3, r9
 800badc:	f7f4 fbcc 	bl	8000278 <__aeabi_dsub>
 800bae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bae4:	f7f4 fbc8 	bl	8000278 <__aeabi_dsub>
 800bae8:	465c      	mov	r4, fp
 800baea:	4602      	mov	r2, r0
 800baec:	e036      	b.n	800bb5c <__ieee754_pow+0x79c>
 800baee:	bf00      	nop
 800baf0:	4a454eef 	.word	0x4a454eef
 800baf4:	3fca7e28 	.word	0x3fca7e28
 800baf8:	93c9db65 	.word	0x93c9db65
 800bafc:	3fcd864a 	.word	0x3fcd864a
 800bb00:	a91d4101 	.word	0xa91d4101
 800bb04:	3fd17460 	.word	0x3fd17460
 800bb08:	518f264d 	.word	0x518f264d
 800bb0c:	3fd55555 	.word	0x3fd55555
 800bb10:	db6fabff 	.word	0xdb6fabff
 800bb14:	3fdb6db6 	.word	0x3fdb6db6
 800bb18:	33333303 	.word	0x33333303
 800bb1c:	3fe33333 	.word	0x3fe33333
 800bb20:	e0000000 	.word	0xe0000000
 800bb24:	3feec709 	.word	0x3feec709
 800bb28:	dc3a03fd 	.word	0xdc3a03fd
 800bb2c:	3feec709 	.word	0x3feec709
 800bb30:	145b01f5 	.word	0x145b01f5
 800bb34:	be3e2fe0 	.word	0xbe3e2fe0
 800bb38:	7ff00000 	.word	0x7ff00000
 800bb3c:	43400000 	.word	0x43400000
 800bb40:	0003988e 	.word	0x0003988e
 800bb44:	000bb679 	.word	0x000bb679
 800bb48:	0800c9e8 	.word	0x0800c9e8
 800bb4c:	3ff00000 	.word	0x3ff00000
 800bb50:	40080000 	.word	0x40080000
 800bb54:	0800c9c8 	.word	0x0800c9c8
 800bb58:	0800c9d8 	.word	0x0800c9d8
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb62:	e5d7      	b.n	800b714 <__ieee754_pow+0x354>
 800bb64:	f04f 0a01 	mov.w	sl, #1
 800bb68:	e65e      	b.n	800b828 <__ieee754_pow+0x468>
 800bb6a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800be3c <__ieee754_pow+0xa7c>)
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fb82 	bl	800027c <__adddf3>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb7e:	464b      	mov	r3, r9
 800bb80:	4620      	mov	r0, r4
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7f4 fb78 	bl	8000278 <__aeabi_dsub>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb90:	f7f4 ffba 	bl	8000b08 <__aeabi_dcmpgt>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f47f ae00 	bne.w	800b79a <__ieee754_pow+0x3da>
 800bb9a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800bb9e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bba2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800bba6:	fa43 fa0a 	asr.w	sl, r3, sl
 800bbaa:	44da      	add	sl, fp
 800bbac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bbb0:	489d      	ldr	r0, [pc, #628]	@ (800be28 <__ieee754_pow+0xa68>)
 800bbb2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bbb6:	4108      	asrs	r0, r1
 800bbb8:	ea00 030a 	and.w	r3, r0, sl
 800bbbc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bbc0:	f1c1 0114 	rsb	r1, r1, #20
 800bbc4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800bbc8:	fa4a fa01 	asr.w	sl, sl, r1
 800bbcc:	f1bb 0f00 	cmp.w	fp, #0
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	f04f 0200 	mov.w	r2, #0
 800bbd8:	bfb8      	it	lt
 800bbda:	f1ca 0a00 	rsblt	sl, sl, #0
 800bbde:	f7f4 fb4b 	bl	8000278 <__aeabi_dsub>
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	4689      	mov	r9, r1
 800bbe6:	4632      	mov	r2, r6
 800bbe8:	463b      	mov	r3, r7
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fb45 	bl	800027c <__adddf3>
 800bbf2:	2400      	movs	r4, #0
 800bbf4:	a37c      	add	r3, pc, #496	@ (adr r3, 800bde8 <__ieee754_pow+0xa28>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	f7f4 fcf3 	bl	80005e8 <__aeabi_dmul>
 800bc02:	4642      	mov	r2, r8
 800bc04:	e9cd 0100 	strd	r0, r1, [sp]
 800bc08:	464b      	mov	r3, r9
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	f7f4 fb33 	bl	8000278 <__aeabi_dsub>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	4630      	mov	r0, r6
 800bc18:	4639      	mov	r1, r7
 800bc1a:	f7f4 fb2d 	bl	8000278 <__aeabi_dsub>
 800bc1e:	a374      	add	r3, pc, #464	@ (adr r3, 800bdf0 <__ieee754_pow+0xa30>)
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f7f4 fce0 	bl	80005e8 <__aeabi_dmul>
 800bc28:	a373      	add	r3, pc, #460	@ (adr r3, 800bdf8 <__ieee754_pow+0xa38>)
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	4680      	mov	r8, r0
 800bc30:	4689      	mov	r9, r1
 800bc32:	4620      	mov	r0, r4
 800bc34:	4629      	mov	r1, r5
 800bc36:	f7f4 fcd7 	bl	80005e8 <__aeabi_dmul>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fb1b 	bl	800027c <__adddf3>
 800bc46:	4604      	mov	r4, r0
 800bc48:	460d      	mov	r5, r1
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc52:	f7f4 fb13 	bl	800027c <__adddf3>
 800bc56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4689      	mov	r9, r1
 800bc5e:	f7f4 fb0b 	bl	8000278 <__aeabi_dsub>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 fb05 	bl	8000278 <__aeabi_dsub>
 800bc6e:	4642      	mov	r2, r8
 800bc70:	4606      	mov	r6, r0
 800bc72:	460f      	mov	r7, r1
 800bc74:	464b      	mov	r3, r9
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	f7f4 fcb5 	bl	80005e8 <__aeabi_dmul>
 800bc7e:	a360      	add	r3, pc, #384	@ (adr r3, 800be00 <__ieee754_pow+0xa40>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	4604      	mov	r4, r0
 800bc86:	460d      	mov	r5, r1
 800bc88:	f7f4 fcae 	bl	80005e8 <__aeabi_dmul>
 800bc8c:	a35e      	add	r3, pc, #376	@ (adr r3, 800be08 <__ieee754_pow+0xa48>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f7f4 faf1 	bl	8000278 <__aeabi_dsub>
 800bc96:	4622      	mov	r2, r4
 800bc98:	462b      	mov	r3, r5
 800bc9a:	f7f4 fca5 	bl	80005e8 <__aeabi_dmul>
 800bc9e:	a35c      	add	r3, pc, #368	@ (adr r3, 800be10 <__ieee754_pow+0xa50>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 faea 	bl	800027c <__adddf3>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	f7f4 fc9c 	bl	80005e8 <__aeabi_dmul>
 800bcb0:	a359      	add	r3, pc, #356	@ (adr r3, 800be18 <__ieee754_pow+0xa58>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 fadf 	bl	8000278 <__aeabi_dsub>
 800bcba:	4622      	mov	r2, r4
 800bcbc:	462b      	mov	r3, r5
 800bcbe:	f7f4 fc93 	bl	80005e8 <__aeabi_dmul>
 800bcc2:	a357      	add	r3, pc, #348	@ (adr r3, 800be20 <__ieee754_pow+0xa60>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	f7f4 fad8 	bl	800027c <__adddf3>
 800bccc:	4622      	mov	r2, r4
 800bcce:	462b      	mov	r3, r5
 800bcd0:	f7f4 fc8a 	bl	80005e8 <__aeabi_dmul>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4640      	mov	r0, r8
 800bcda:	4649      	mov	r1, r9
 800bcdc:	f7f4 facc 	bl	8000278 <__aeabi_dsub>
 800bce0:	4604      	mov	r4, r0
 800bce2:	460d      	mov	r5, r1
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	4640      	mov	r0, r8
 800bcea:	4649      	mov	r1, r9
 800bcec:	f7f4 fc7c 	bl	80005e8 <__aeabi_dmul>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	e9cd 0100 	strd	r0, r1, [sp]
 800bcf6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7f4 fabb 	bl	8000278 <__aeabi_dsub>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd0a:	f7f4 fd97 	bl	800083c <__aeabi_ddiv>
 800bd0e:	4632      	mov	r2, r6
 800bd10:	4604      	mov	r4, r0
 800bd12:	460d      	mov	r5, r1
 800bd14:	463b      	mov	r3, r7
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fc65 	bl	80005e8 <__aeabi_dmul>
 800bd1e:	4632      	mov	r2, r6
 800bd20:	463b      	mov	r3, r7
 800bd22:	f7f4 faab 	bl	800027c <__adddf3>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f7f4 faa3 	bl	8000278 <__aeabi_dsub>
 800bd32:	4642      	mov	r2, r8
 800bd34:	464b      	mov	r3, r9
 800bd36:	f7f4 fa9f 	bl	8000278 <__aeabi_dsub>
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	493b      	ldr	r1, [pc, #236]	@ (800be2c <__ieee754_pow+0xa6c>)
 800bd40:	2000      	movs	r0, #0
 800bd42:	f7f4 fa99 	bl	8000278 <__aeabi_dsub>
 800bd46:	ec41 0b10 	vmov	d0, r0, r1
 800bd4a:	ee10 3a90 	vmov	r3, s1
 800bd4e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bd52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd56:	da30      	bge.n	800bdba <__ieee754_pow+0x9fa>
 800bd58:	4650      	mov	r0, sl
 800bd5a:	f000 fb4d 	bl	800c3f8 <scalbn>
 800bd5e:	ec51 0b10 	vmov	r0, r1, d0
 800bd62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd66:	f7ff bbd2 	b.w	800b50e <__ieee754_pow+0x14e>
 800bd6a:	4c31      	ldr	r4, [pc, #196]	@ (800be30 <__ieee754_pow+0xa70>)
 800bd6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	d91a      	bls.n	800bdaa <__ieee754_pow+0x9ea>
 800bd74:	4b2f      	ldr	r3, [pc, #188]	@ (800be34 <__ieee754_pow+0xa74>)
 800bd76:	440b      	add	r3, r1
 800bd78:	4303      	orrs	r3, r0
 800bd7a:	d009      	beq.n	800bd90 <__ieee754_pow+0x9d0>
 800bd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd80:	2200      	movs	r2, #0
 800bd82:	2300      	movs	r3, #0
 800bd84:	f7f4 fea2 	bl	8000acc <__aeabi_dcmplt>
 800bd88:	3800      	subs	r0, #0
 800bd8a:	bf18      	it	ne
 800bd8c:	2001      	movne	r0, #1
 800bd8e:	e42b      	b.n	800b5e8 <__ieee754_pow+0x228>
 800bd90:	4642      	mov	r2, r8
 800bd92:	464b      	mov	r3, r9
 800bd94:	f7f4 fa70 	bl	8000278 <__aeabi_dsub>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	f7f4 feaa 	bl	8000af4 <__aeabi_dcmpge>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1eb      	bne.n	800bd7c <__ieee754_pow+0x9bc>
 800bda4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800be44 <__ieee754_pow+0xa84>
 800bda8:	e6f7      	b.n	800bb9a <__ieee754_pow+0x7da>
 800bdaa:	469a      	mov	sl, r3
 800bdac:	4b22      	ldr	r3, [pc, #136]	@ (800be38 <__ieee754_pow+0xa78>)
 800bdae:	459a      	cmp	sl, r3
 800bdb0:	f63f aef3 	bhi.w	800bb9a <__ieee754_pow+0x7da>
 800bdb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bdb8:	e715      	b.n	800bbe6 <__ieee754_pow+0x826>
 800bdba:	ec51 0b10 	vmov	r0, r1, d0
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	e7cf      	b.n	800bd62 <__ieee754_pow+0x9a2>
 800bdc2:	491a      	ldr	r1, [pc, #104]	@ (800be2c <__ieee754_pow+0xa6c>)
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f7ff bb18 	b.w	800b3fa <__ieee754_pow+0x3a>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	2100      	movs	r1, #0
 800bdce:	f7ff bb14 	b.w	800b3fa <__ieee754_pow+0x3a>
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7ff bb10 	b.w	800b3fa <__ieee754_pow+0x3a>
 800bdda:	460c      	mov	r4, r1
 800bddc:	f7ff bb5e 	b.w	800b49c <__ieee754_pow+0xdc>
 800bde0:	2400      	movs	r4, #0
 800bde2:	f7ff bb49 	b.w	800b478 <__ieee754_pow+0xb8>
 800bde6:	bf00      	nop
 800bde8:	00000000 	.word	0x00000000
 800bdec:	3fe62e43 	.word	0x3fe62e43
 800bdf0:	fefa39ef 	.word	0xfefa39ef
 800bdf4:	3fe62e42 	.word	0x3fe62e42
 800bdf8:	0ca86c39 	.word	0x0ca86c39
 800bdfc:	be205c61 	.word	0xbe205c61
 800be00:	72bea4d0 	.word	0x72bea4d0
 800be04:	3e663769 	.word	0x3e663769
 800be08:	c5d26bf1 	.word	0xc5d26bf1
 800be0c:	3ebbbd41 	.word	0x3ebbbd41
 800be10:	af25de2c 	.word	0xaf25de2c
 800be14:	3f11566a 	.word	0x3f11566a
 800be18:	16bebd93 	.word	0x16bebd93
 800be1c:	3f66c16c 	.word	0x3f66c16c
 800be20:	5555553e 	.word	0x5555553e
 800be24:	3fc55555 	.word	0x3fc55555
 800be28:	fff00000 	.word	0xfff00000
 800be2c:	3ff00000 	.word	0x3ff00000
 800be30:	4090cbff 	.word	0x4090cbff
 800be34:	3f6f3400 	.word	0x3f6f3400
 800be38:	3fe00000 	.word	0x3fe00000
 800be3c:	652b82fe 	.word	0x652b82fe
 800be40:	3c971547 	.word	0x3c971547
 800be44:	4090cc00 	.word	0x4090cc00

0800be48 <fabs>:
 800be48:	ec51 0b10 	vmov	r0, r1, d0
 800be4c:	4602      	mov	r2, r0
 800be4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800be52:	ec43 2b10 	vmov	d0, r2, r3
 800be56:	4770      	bx	lr

0800be58 <__ieee754_powf>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	ee10 4a90 	vmov	r4, s1
 800be60:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800be64:	ed2d 8b02 	vpush	{d8}
 800be68:	ee10 6a10 	vmov	r6, s0
 800be6c:	eeb0 8a40 	vmov.f32	s16, s0
 800be70:	eef0 8a60 	vmov.f32	s17, s1
 800be74:	d10c      	bne.n	800be90 <__ieee754_powf+0x38>
 800be76:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800be7a:	0076      	lsls	r6, r6, #1
 800be7c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800be80:	f240 829c 	bls.w	800c3bc <__ieee754_powf+0x564>
 800be84:	ee38 0a28 	vadd.f32	s0, s16, s17
 800be88:	ecbd 8b02 	vpop	{d8}
 800be8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be90:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800be94:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800be98:	d802      	bhi.n	800bea0 <__ieee754_powf+0x48>
 800be9a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800be9e:	d908      	bls.n	800beb2 <__ieee754_powf+0x5a>
 800bea0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bea4:	d1ee      	bne.n	800be84 <__ieee754_powf+0x2c>
 800bea6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800beaa:	0064      	lsls	r4, r4, #1
 800beac:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800beb0:	e7e6      	b.n	800be80 <__ieee754_powf+0x28>
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	da1e      	bge.n	800bef4 <__ieee754_powf+0x9c>
 800beb6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800beba:	d22b      	bcs.n	800bf14 <__ieee754_powf+0xbc>
 800bebc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bec0:	d332      	bcc.n	800bf28 <__ieee754_powf+0xd0>
 800bec2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800bec6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800beca:	fa49 f503 	asr.w	r5, r9, r3
 800bece:	fa05 f303 	lsl.w	r3, r5, r3
 800bed2:	454b      	cmp	r3, r9
 800bed4:	d126      	bne.n	800bf24 <__ieee754_powf+0xcc>
 800bed6:	f005 0501 	and.w	r5, r5, #1
 800beda:	f1c5 0502 	rsb	r5, r5, #2
 800bede:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bee2:	d122      	bne.n	800bf2a <__ieee754_powf+0xd2>
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	f280 826f 	bge.w	800c3c8 <__ieee754_powf+0x570>
 800beea:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800beee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bef2:	e7c9      	b.n	800be88 <__ieee754_powf+0x30>
 800bef4:	2500      	movs	r5, #0
 800bef6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800befa:	d1f0      	bne.n	800bede <__ieee754_powf+0x86>
 800befc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800bf00:	f000 825c 	beq.w	800c3bc <__ieee754_powf+0x564>
 800bf04:	d908      	bls.n	800bf18 <__ieee754_powf+0xc0>
 800bf06:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c268 <__ieee754_powf+0x410>
 800bf0a:	2c00      	cmp	r4, #0
 800bf0c:	bfa8      	it	ge
 800bf0e:	eeb0 0a68 	vmovge.f32	s0, s17
 800bf12:	e7b9      	b.n	800be88 <__ieee754_powf+0x30>
 800bf14:	2502      	movs	r5, #2
 800bf16:	e7ee      	b.n	800bef6 <__ieee754_powf+0x9e>
 800bf18:	2c00      	cmp	r4, #0
 800bf1a:	f280 8252 	bge.w	800c3c2 <__ieee754_powf+0x56a>
 800bf1e:	eeb1 0a68 	vneg.f32	s0, s17
 800bf22:	e7b1      	b.n	800be88 <__ieee754_powf+0x30>
 800bf24:	2500      	movs	r5, #0
 800bf26:	e7da      	b.n	800bede <__ieee754_powf+0x86>
 800bf28:	2500      	movs	r5, #0
 800bf2a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bf2e:	d102      	bne.n	800bf36 <__ieee754_powf+0xde>
 800bf30:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bf34:	e7a8      	b.n	800be88 <__ieee754_powf+0x30>
 800bf36:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800bf3a:	d109      	bne.n	800bf50 <__ieee754_powf+0xf8>
 800bf3c:	2e00      	cmp	r6, #0
 800bf3e:	db07      	blt.n	800bf50 <__ieee754_powf+0xf8>
 800bf40:	eeb0 0a48 	vmov.f32	s0, s16
 800bf44:	ecbd 8b02 	vpop	{d8}
 800bf48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	f000 bc76 	b.w	800c83c <__ieee754_sqrtf>
 800bf50:	eeb0 0a48 	vmov.f32	s0, s16
 800bf54:	f7ff fa15 	bl	800b382 <fabsf>
 800bf58:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bf5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bf60:	4647      	mov	r7, r8
 800bf62:	d002      	beq.n	800bf6a <__ieee754_powf+0x112>
 800bf64:	f1b8 0f00 	cmp.w	r8, #0
 800bf68:	d117      	bne.n	800bf9a <__ieee754_powf+0x142>
 800bf6a:	2c00      	cmp	r4, #0
 800bf6c:	bfbc      	itt	lt
 800bf6e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800bf72:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bf76:	2e00      	cmp	r6, #0
 800bf78:	da86      	bge.n	800be88 <__ieee754_powf+0x30>
 800bf7a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bf7e:	ea58 0805 	orrs.w	r8, r8, r5
 800bf82:	d104      	bne.n	800bf8e <__ieee754_powf+0x136>
 800bf84:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bf88:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bf8c:	e77c      	b.n	800be88 <__ieee754_powf+0x30>
 800bf8e:	2d01      	cmp	r5, #1
 800bf90:	f47f af7a 	bne.w	800be88 <__ieee754_powf+0x30>
 800bf94:	eeb1 0a40 	vneg.f32	s0, s0
 800bf98:	e776      	b.n	800be88 <__ieee754_powf+0x30>
 800bf9a:	0ff0      	lsrs	r0, r6, #31
 800bf9c:	3801      	subs	r0, #1
 800bf9e:	ea55 0300 	orrs.w	r3, r5, r0
 800bfa2:	d104      	bne.n	800bfae <__ieee754_powf+0x156>
 800bfa4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bfa8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bfac:	e76c      	b.n	800be88 <__ieee754_powf+0x30>
 800bfae:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800bfb2:	d973      	bls.n	800c09c <__ieee754_powf+0x244>
 800bfb4:	4bad      	ldr	r3, [pc, #692]	@ (800c26c <__ieee754_powf+0x414>)
 800bfb6:	4598      	cmp	r8, r3
 800bfb8:	d808      	bhi.n	800bfcc <__ieee754_powf+0x174>
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	da0b      	bge.n	800bfd6 <__ieee754_powf+0x17e>
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	ecbd 8b02 	vpop	{d8}
 800bfc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc8:	f000 bb58 	b.w	800c67c <__math_oflowf>
 800bfcc:	4ba8      	ldr	r3, [pc, #672]	@ (800c270 <__ieee754_powf+0x418>)
 800bfce:	4598      	cmp	r8, r3
 800bfd0:	d908      	bls.n	800bfe4 <__ieee754_powf+0x18c>
 800bfd2:	2c00      	cmp	r4, #0
 800bfd4:	dcf3      	bgt.n	800bfbe <__ieee754_powf+0x166>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	ecbd 8b02 	vpop	{d8}
 800bfdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe0:	f000 bb46 	b.w	800c670 <__math_uflowf>
 800bfe4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bfe8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bfec:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c274 <__ieee754_powf+0x41c>
 800bff0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bff4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bff8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bffc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c000:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c004:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c008:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c278 <__ieee754_powf+0x420>
 800c00c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c010:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c27c <__ieee754_powf+0x424>
 800c014:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c018:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c280 <__ieee754_powf+0x428>
 800c01c:	eef0 6a67 	vmov.f32	s13, s15
 800c020:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c024:	ee16 3a90 	vmov	r3, s13
 800c028:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c02c:	f023 030f 	bic.w	r3, r3, #15
 800c030:	ee06 3a90 	vmov	s13, r3
 800c034:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c038:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c03c:	3d01      	subs	r5, #1
 800c03e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c042:	4305      	orrs	r5, r0
 800c044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c048:	f024 040f 	bic.w	r4, r4, #15
 800c04c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c050:	bf18      	it	ne
 800c052:	eeb0 8a47 	vmovne.f32	s16, s14
 800c056:	ee07 4a10 	vmov	s14, r4
 800c05a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c05e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c06a:	ee07 4a10 	vmov	s14, r4
 800c06e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c072:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c076:	ee17 1a10 	vmov	r1, s14
 800c07a:	2900      	cmp	r1, #0
 800c07c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c080:	f340 80dd 	ble.w	800c23e <__ieee754_powf+0x3e6>
 800c084:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c088:	f240 80ca 	bls.w	800c220 <__ieee754_powf+0x3c8>
 800c08c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c094:	bf4c      	ite	mi
 800c096:	2001      	movmi	r0, #1
 800c098:	2000      	movpl	r0, #0
 800c09a:	e791      	b.n	800bfc0 <__ieee754_powf+0x168>
 800c09c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c0a0:	bf01      	itttt	eq
 800c0a2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c284 <__ieee754_powf+0x42c>
 800c0a6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c0aa:	f06f 0317 	mvneq.w	r3, #23
 800c0ae:	ee17 7a90 	vmoveq	r7, s15
 800c0b2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c0b6:	bf18      	it	ne
 800c0b8:	2300      	movne	r3, #0
 800c0ba:	3a7f      	subs	r2, #127	@ 0x7f
 800c0bc:	441a      	add	r2, r3
 800c0be:	4b72      	ldr	r3, [pc, #456]	@ (800c288 <__ieee754_powf+0x430>)
 800c0c0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c0c4:	429f      	cmp	r7, r3
 800c0c6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c0ca:	dd06      	ble.n	800c0da <__ieee754_powf+0x282>
 800c0cc:	4b6f      	ldr	r3, [pc, #444]	@ (800c28c <__ieee754_powf+0x434>)
 800c0ce:	429f      	cmp	r7, r3
 800c0d0:	f340 80a4 	ble.w	800c21c <__ieee754_powf+0x3c4>
 800c0d4:	3201      	adds	r2, #1
 800c0d6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c0da:	2600      	movs	r6, #0
 800c0dc:	4b6c      	ldr	r3, [pc, #432]	@ (800c290 <__ieee754_powf+0x438>)
 800c0de:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c0e2:	ee07 1a10 	vmov	s14, r1
 800c0e6:	edd3 5a00 	vldr	s11, [r3]
 800c0ea:	4b6a      	ldr	r3, [pc, #424]	@ (800c294 <__ieee754_powf+0x43c>)
 800c0ec:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c0f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0f4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c0f8:	1049      	asrs	r1, r1, #1
 800c0fa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c0fe:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c102:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c106:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c10a:	ee07 1a90 	vmov	s15, r1
 800c10e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c112:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c116:	ee15 7a10 	vmov	r7, s10
 800c11a:	401f      	ands	r7, r3
 800c11c:	ee06 7a90 	vmov	s13, r7
 800c120:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c124:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c128:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c12c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c130:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c298 <__ieee754_powf+0x440>
 800c134:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c29c <__ieee754_powf+0x444>
 800c138:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c13c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c2a0 <__ieee754_powf+0x448>
 800c140:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c144:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c274 <__ieee754_powf+0x41c>
 800c148:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c14c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c2a4 <__ieee754_powf+0x44c>
 800c150:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c154:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c2a8 <__ieee754_powf+0x450>
 800c158:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c15c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c160:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c164:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c168:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c16c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c170:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c174:	eef0 5a67 	vmov.f32	s11, s15
 800c178:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c17c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c180:	ee15 1a90 	vmov	r1, s11
 800c184:	4019      	ands	r1, r3
 800c186:	ee05 1a90 	vmov	s11, r1
 800c18a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c18e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c192:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c196:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c19a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c19e:	eeb0 6a67 	vmov.f32	s12, s15
 800c1a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c1a6:	ee16 1a10 	vmov	r1, s12
 800c1aa:	4019      	ands	r1, r3
 800c1ac:	ee06 1a10 	vmov	s12, r1
 800c1b0:	eeb0 7a46 	vmov.f32	s14, s12
 800c1b4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c1b8:	493c      	ldr	r1, [pc, #240]	@ (800c2ac <__ieee754_powf+0x454>)
 800c1ba:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c1be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1c2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c2b0 <__ieee754_powf+0x458>
 800c1c6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c2b4 <__ieee754_powf+0x45c>
 800c1ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c2b8 <__ieee754_powf+0x460>
 800c1d2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1d6:	ed91 7a00 	vldr	s14, [r1]
 800c1da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1de:	ee07 2a10 	vmov	s14, r2
 800c1e2:	eef0 6a67 	vmov.f32	s13, s15
 800c1e6:	4a35      	ldr	r2, [pc, #212]	@ (800c2bc <__ieee754_powf+0x464>)
 800c1e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c1ec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c1f0:	ed92 5a00 	vldr	s10, [r2]
 800c1f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c1fc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c200:	ee16 2a90 	vmov	r2, s13
 800c204:	4013      	ands	r3, r2
 800c206:	ee06 3a90 	vmov	s13, r3
 800c20a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c20e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c212:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c21a:	e70f      	b.n	800c03c <__ieee754_powf+0x1e4>
 800c21c:	2601      	movs	r6, #1
 800c21e:	e75d      	b.n	800c0dc <__ieee754_powf+0x284>
 800c220:	d152      	bne.n	800c2c8 <__ieee754_powf+0x470>
 800c222:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c2c0 <__ieee754_powf+0x468>
 800c226:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c22a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c22e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	f73f af29 	bgt.w	800c08c <__ieee754_powf+0x234>
 800c23a:	2386      	movs	r3, #134	@ 0x86
 800c23c:	e048      	b.n	800c2d0 <__ieee754_powf+0x478>
 800c23e:	4a21      	ldr	r2, [pc, #132]	@ (800c2c4 <__ieee754_powf+0x46c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d907      	bls.n	800c254 <__ieee754_powf+0x3fc>
 800c244:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24c:	bf4c      	ite	mi
 800c24e:	2001      	movmi	r0, #1
 800c250:	2000      	movpl	r0, #0
 800c252:	e6c1      	b.n	800bfd8 <__ieee754_powf+0x180>
 800c254:	d138      	bne.n	800c2c8 <__ieee754_powf+0x470>
 800c256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c25a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c262:	dbea      	blt.n	800c23a <__ieee754_powf+0x3e2>
 800c264:	e7ee      	b.n	800c244 <__ieee754_powf+0x3ec>
 800c266:	bf00      	nop
 800c268:	00000000 	.word	0x00000000
 800c26c:	3f7ffff3 	.word	0x3f7ffff3
 800c270:	3f800007 	.word	0x3f800007
 800c274:	3eaaaaab 	.word	0x3eaaaaab
 800c278:	3fb8aa3b 	.word	0x3fb8aa3b
 800c27c:	36eca570 	.word	0x36eca570
 800c280:	3fb8aa00 	.word	0x3fb8aa00
 800c284:	4b800000 	.word	0x4b800000
 800c288:	001cc471 	.word	0x001cc471
 800c28c:	005db3d6 	.word	0x005db3d6
 800c290:	0800ca08 	.word	0x0800ca08
 800c294:	fffff000 	.word	0xfffff000
 800c298:	3e6c3255 	.word	0x3e6c3255
 800c29c:	3e53f142 	.word	0x3e53f142
 800c2a0:	3e8ba305 	.word	0x3e8ba305
 800c2a4:	3edb6db7 	.word	0x3edb6db7
 800c2a8:	3f19999a 	.word	0x3f19999a
 800c2ac:	0800c9f8 	.word	0x0800c9f8
 800c2b0:	3f76384f 	.word	0x3f76384f
 800c2b4:	3f763800 	.word	0x3f763800
 800c2b8:	369dc3a0 	.word	0x369dc3a0
 800c2bc:	0800ca00 	.word	0x0800ca00
 800c2c0:	3338aa3c 	.word	0x3338aa3c
 800c2c4:	43160000 	.word	0x43160000
 800c2c8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c2cc:	d971      	bls.n	800c3b2 <__ieee754_powf+0x55a>
 800c2ce:	15db      	asrs	r3, r3, #23
 800c2d0:	3b7e      	subs	r3, #126	@ 0x7e
 800c2d2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c2d6:	4118      	asrs	r0, r3
 800c2d8:	4408      	add	r0, r1
 800c2da:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c2de:	4a3c      	ldr	r2, [pc, #240]	@ (800c3d0 <__ieee754_powf+0x578>)
 800c2e0:	3b7f      	subs	r3, #127	@ 0x7f
 800c2e2:	411a      	asrs	r2, r3
 800c2e4:	4002      	ands	r2, r0
 800c2e6:	ee07 2a10 	vmov	s14, r2
 800c2ea:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c2ee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c2f2:	f1c3 0317 	rsb	r3, r3, #23
 800c2f6:	4118      	asrs	r0, r3
 800c2f8:	2900      	cmp	r1, #0
 800c2fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2fe:	bfb8      	it	lt
 800c300:	4240      	neglt	r0, r0
 800c302:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c306:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c3d4 <__ieee754_powf+0x57c>
 800c30a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c3d8 <__ieee754_powf+0x580>
 800c30e:	ee17 3a10 	vmov	r3, s14
 800c312:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c316:	f023 030f 	bic.w	r3, r3, #15
 800c31a:	ee07 3a10 	vmov	s14, r3
 800c31e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c322:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c326:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c32a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c3dc <__ieee754_powf+0x584>
 800c32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c332:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c336:	eef0 6a67 	vmov.f32	s13, s15
 800c33a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c33e:	eef0 5a66 	vmov.f32	s11, s13
 800c342:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c346:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c34a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c34e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c3e0 <__ieee754_powf+0x588>
 800c352:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c3e4 <__ieee754_powf+0x58c>
 800c356:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c35a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c3e8 <__ieee754_powf+0x590>
 800c35e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c362:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c3ec <__ieee754_powf+0x594>
 800c366:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c36a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c3f0 <__ieee754_powf+0x598>
 800c36e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c372:	eeb0 6a66 	vmov.f32	s12, s13
 800c376:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c37a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c37e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c382:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c386:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c38a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c396:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c39a:	ee10 3a10 	vmov	r3, s0
 800c39e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c3a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3a6:	da06      	bge.n	800c3b6 <__ieee754_powf+0x55e>
 800c3a8:	f000 f8e2 	bl	800c570 <scalbnf>
 800c3ac:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c3b0:	e56a      	b.n	800be88 <__ieee754_powf+0x30>
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	e7a5      	b.n	800c302 <__ieee754_powf+0x4aa>
 800c3b6:	ee00 3a10 	vmov	s0, r3
 800c3ba:	e7f7      	b.n	800c3ac <__ieee754_powf+0x554>
 800c3bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c3c0:	e562      	b.n	800be88 <__ieee754_powf+0x30>
 800c3c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c3f4 <__ieee754_powf+0x59c>
 800c3c6:	e55f      	b.n	800be88 <__ieee754_powf+0x30>
 800c3c8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3cc:	e55c      	b.n	800be88 <__ieee754_powf+0x30>
 800c3ce:	bf00      	nop
 800c3d0:	ff800000 	.word	0xff800000
 800c3d4:	3f317218 	.word	0x3f317218
 800c3d8:	3f317200 	.word	0x3f317200
 800c3dc:	35bfbe8c 	.word	0x35bfbe8c
 800c3e0:	b5ddea0e 	.word	0xb5ddea0e
 800c3e4:	3331bb4c 	.word	0x3331bb4c
 800c3e8:	388ab355 	.word	0x388ab355
 800c3ec:	bb360b61 	.word	0xbb360b61
 800c3f0:	3e2aaaab 	.word	0x3e2aaaab
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <scalbn>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	ec55 4b10 	vmov	r4, r5, d0
 800c3fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c402:	4606      	mov	r6, r0
 800c404:	462b      	mov	r3, r5
 800c406:	b991      	cbnz	r1, 800c42e <scalbn+0x36>
 800c408:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c40c:	4323      	orrs	r3, r4
 800c40e:	d03d      	beq.n	800c48c <scalbn+0x94>
 800c410:	4b35      	ldr	r3, [pc, #212]	@ (800c4e8 <scalbn+0xf0>)
 800c412:	4620      	mov	r0, r4
 800c414:	4629      	mov	r1, r5
 800c416:	2200      	movs	r2, #0
 800c418:	f7f4 f8e6 	bl	80005e8 <__aeabi_dmul>
 800c41c:	4b33      	ldr	r3, [pc, #204]	@ (800c4ec <scalbn+0xf4>)
 800c41e:	429e      	cmp	r6, r3
 800c420:	4604      	mov	r4, r0
 800c422:	460d      	mov	r5, r1
 800c424:	da0f      	bge.n	800c446 <scalbn+0x4e>
 800c426:	a328      	add	r3, pc, #160	@ (adr r3, 800c4c8 <scalbn+0xd0>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	e01e      	b.n	800c46c <scalbn+0x74>
 800c42e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c432:	4291      	cmp	r1, r2
 800c434:	d10b      	bne.n	800c44e <scalbn+0x56>
 800c436:	4622      	mov	r2, r4
 800c438:	4620      	mov	r0, r4
 800c43a:	4629      	mov	r1, r5
 800c43c:	f7f3 ff1e 	bl	800027c <__adddf3>
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	e022      	b.n	800c48c <scalbn+0x94>
 800c446:	460b      	mov	r3, r1
 800c448:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c44c:	3936      	subs	r1, #54	@ 0x36
 800c44e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c452:	4296      	cmp	r6, r2
 800c454:	dd0d      	ble.n	800c472 <scalbn+0x7a>
 800c456:	2d00      	cmp	r5, #0
 800c458:	a11d      	add	r1, pc, #116	@ (adr r1, 800c4d0 <scalbn+0xd8>)
 800c45a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c45e:	da02      	bge.n	800c466 <scalbn+0x6e>
 800c460:	a11d      	add	r1, pc, #116	@ (adr r1, 800c4d8 <scalbn+0xe0>)
 800c462:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c466:	a31a      	add	r3, pc, #104	@ (adr r3, 800c4d0 <scalbn+0xd8>)
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f7f4 f8bc 	bl	80005e8 <__aeabi_dmul>
 800c470:	e7e6      	b.n	800c440 <scalbn+0x48>
 800c472:	1872      	adds	r2, r6, r1
 800c474:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c478:	428a      	cmp	r2, r1
 800c47a:	dcec      	bgt.n	800c456 <scalbn+0x5e>
 800c47c:	2a00      	cmp	r2, #0
 800c47e:	dd08      	ble.n	800c492 <scalbn+0x9a>
 800c480:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c484:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c488:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c48c:	ec45 4b10 	vmov	d0, r4, r5
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c496:	da08      	bge.n	800c4aa <scalbn+0xb2>
 800c498:	2d00      	cmp	r5, #0
 800c49a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c4c8 <scalbn+0xd0>)
 800c49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a0:	dac1      	bge.n	800c426 <scalbn+0x2e>
 800c4a2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c4e0 <scalbn+0xe8>)
 800c4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a8:	e7bd      	b.n	800c426 <scalbn+0x2e>
 800c4aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4ae:	3236      	adds	r2, #54	@ 0x36
 800c4b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c4b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <scalbn+0xf8>)
 800c4bc:	4629      	mov	r1, r5
 800c4be:	2200      	movs	r2, #0
 800c4c0:	e7d4      	b.n	800c46c <scalbn+0x74>
 800c4c2:	bf00      	nop
 800c4c4:	f3af 8000 	nop.w
 800c4c8:	c2f8f359 	.word	0xc2f8f359
 800c4cc:	01a56e1f 	.word	0x01a56e1f
 800c4d0:	8800759c 	.word	0x8800759c
 800c4d4:	7e37e43c 	.word	0x7e37e43c
 800c4d8:	8800759c 	.word	0x8800759c
 800c4dc:	fe37e43c 	.word	0xfe37e43c
 800c4e0:	c2f8f359 	.word	0xc2f8f359
 800c4e4:	81a56e1f 	.word	0x81a56e1f
 800c4e8:	43500000 	.word	0x43500000
 800c4ec:	ffff3cb0 	.word	0xffff3cb0
 800c4f0:	3c900000 	.word	0x3c900000

0800c4f4 <with_errno>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	ed2d 8b02 	vpush	{d8}
 800c4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c4fe:	eef0 8a60 	vmov.f32	s17, s1
 800c502:	4604      	mov	r4, r0
 800c504:	f7fe f932 	bl	800a76c <__errno>
 800c508:	eeb0 0a48 	vmov.f32	s0, s16
 800c50c:	eef0 0a68 	vmov.f32	s1, s17
 800c510:	ecbd 8b02 	vpop	{d8}
 800c514:	6004      	str	r4, [r0, #0]
 800c516:	bd10      	pop	{r4, pc}

0800c518 <xflow>:
 800c518:	4603      	mov	r3, r0
 800c51a:	b507      	push	{r0, r1, r2, lr}
 800c51c:	ec51 0b10 	vmov	r0, r1, d0
 800c520:	b183      	cbz	r3, 800c544 <xflow+0x2c>
 800c522:	4602      	mov	r2, r0
 800c524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c528:	e9cd 2300 	strd	r2, r3, [sp]
 800c52c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c530:	f7f4 f85a 	bl	80005e8 <__aeabi_dmul>
 800c534:	ec41 0b10 	vmov	d0, r0, r1
 800c538:	2022      	movs	r0, #34	@ 0x22
 800c53a:	b003      	add	sp, #12
 800c53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c540:	f7ff bfd8 	b.w	800c4f4 <with_errno>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	e7ee      	b.n	800c528 <xflow+0x10>
 800c54a:	0000      	movs	r0, r0
 800c54c:	0000      	movs	r0, r0
	...

0800c550 <__math_uflow>:
 800c550:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c558 <__math_uflow+0x8>
 800c554:	f7ff bfe0 	b.w	800c518 <xflow>
 800c558:	00000000 	.word	0x00000000
 800c55c:	10000000 	.word	0x10000000

0800c560 <__math_oflow>:
 800c560:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c568 <__math_oflow+0x8>
 800c564:	f7ff bfd8 	b.w	800c518 <xflow>
 800c568:	00000000 	.word	0x00000000
 800c56c:	70000000 	.word	0x70000000

0800c570 <scalbnf>:
 800c570:	ee10 3a10 	vmov	r3, s0
 800c574:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c578:	d02b      	beq.n	800c5d2 <scalbnf+0x62>
 800c57a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c57e:	d302      	bcc.n	800c586 <scalbnf+0x16>
 800c580:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c584:	4770      	bx	lr
 800c586:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c58a:	d123      	bne.n	800c5d4 <scalbnf+0x64>
 800c58c:	4b24      	ldr	r3, [pc, #144]	@ (800c620 <scalbnf+0xb0>)
 800c58e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c624 <scalbnf+0xb4>
 800c592:	4298      	cmp	r0, r3
 800c594:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c598:	db17      	blt.n	800c5ca <scalbnf+0x5a>
 800c59a:	ee10 3a10 	vmov	r3, s0
 800c59e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c5a2:	3a19      	subs	r2, #25
 800c5a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c5a8:	4288      	cmp	r0, r1
 800c5aa:	dd15      	ble.n	800c5d8 <scalbnf+0x68>
 800c5ac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c628 <scalbnf+0xb8>
 800c5b0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c62c <scalbnf+0xbc>
 800c5b4:	ee10 3a10 	vmov	r3, s0
 800c5b8:	eeb0 7a67 	vmov.f32	s14, s15
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bfb8      	it	lt
 800c5c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800c5c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c5c8:	4770      	bx	lr
 800c5ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c630 <scalbnf+0xc0>
 800c5ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c5d2:	4770      	bx	lr
 800c5d4:	0dd2      	lsrs	r2, r2, #23
 800c5d6:	e7e5      	b.n	800c5a4 <scalbnf+0x34>
 800c5d8:	4410      	add	r0, r2
 800c5da:	28fe      	cmp	r0, #254	@ 0xfe
 800c5dc:	dce6      	bgt.n	800c5ac <scalbnf+0x3c>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	dd06      	ble.n	800c5f0 <scalbnf+0x80>
 800c5e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c5e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c5ea:	ee00 3a10 	vmov	s0, r3
 800c5ee:	4770      	bx	lr
 800c5f0:	f110 0f16 	cmn.w	r0, #22
 800c5f4:	da09      	bge.n	800c60a <scalbnf+0x9a>
 800c5f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c630 <scalbnf+0xc0>
 800c5fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c634 <scalbnf+0xc4>
 800c5fe:	ee10 3a10 	vmov	r3, s0
 800c602:	eeb0 7a67 	vmov.f32	s14, s15
 800c606:	2b00      	cmp	r3, #0
 800c608:	e7d9      	b.n	800c5be <scalbnf+0x4e>
 800c60a:	3019      	adds	r0, #25
 800c60c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c610:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c614:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c638 <scalbnf+0xc8>
 800c618:	ee07 3a90 	vmov	s15, r3
 800c61c:	e7d7      	b.n	800c5ce <scalbnf+0x5e>
 800c61e:	bf00      	nop
 800c620:	ffff3cb0 	.word	0xffff3cb0
 800c624:	4c000000 	.word	0x4c000000
 800c628:	7149f2ca 	.word	0x7149f2ca
 800c62c:	f149f2ca 	.word	0xf149f2ca
 800c630:	0da24260 	.word	0x0da24260
 800c634:	8da24260 	.word	0x8da24260
 800c638:	33000000 	.word	0x33000000

0800c63c <with_errnof>:
 800c63c:	b510      	push	{r4, lr}
 800c63e:	ed2d 8b02 	vpush	{d8}
 800c642:	eeb0 8a40 	vmov.f32	s16, s0
 800c646:	4604      	mov	r4, r0
 800c648:	f7fe f890 	bl	800a76c <__errno>
 800c64c:	eeb0 0a48 	vmov.f32	s0, s16
 800c650:	ecbd 8b02 	vpop	{d8}
 800c654:	6004      	str	r4, [r0, #0]
 800c656:	bd10      	pop	{r4, pc}

0800c658 <xflowf>:
 800c658:	b130      	cbz	r0, 800c668 <xflowf+0x10>
 800c65a:	eef1 7a40 	vneg.f32	s15, s0
 800c65e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c662:	2022      	movs	r0, #34	@ 0x22
 800c664:	f7ff bfea 	b.w	800c63c <with_errnof>
 800c668:	eef0 7a40 	vmov.f32	s15, s0
 800c66c:	e7f7      	b.n	800c65e <xflowf+0x6>
	...

0800c670 <__math_uflowf>:
 800c670:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c678 <__math_uflowf+0x8>
 800c674:	f7ff bff0 	b.w	800c658 <xflowf>
 800c678:	10000000 	.word	0x10000000

0800c67c <__math_oflowf>:
 800c67c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c684 <__math_oflowf+0x8>
 800c680:	f7ff bfea 	b.w	800c658 <xflowf>
 800c684:	70000000 	.word	0x70000000

0800c688 <__ieee754_sqrt>:
 800c688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	4a68      	ldr	r2, [pc, #416]	@ (800c830 <__ieee754_sqrt+0x1a8>)
 800c68e:	ec55 4b10 	vmov	r4, r5, d0
 800c692:	43aa      	bics	r2, r5
 800c694:	462b      	mov	r3, r5
 800c696:	4621      	mov	r1, r4
 800c698:	d110      	bne.n	800c6bc <__ieee754_sqrt+0x34>
 800c69a:	4622      	mov	r2, r4
 800c69c:	4620      	mov	r0, r4
 800c69e:	4629      	mov	r1, r5
 800c6a0:	f7f3 ffa2 	bl	80005e8 <__aeabi_dmul>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	f7f3 fde6 	bl	800027c <__adddf3>
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	460d      	mov	r5, r1
 800c6b4:	ec45 4b10 	vmov	d0, r4, r5
 800c6b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6bc:	2d00      	cmp	r5, #0
 800c6be:	dc0e      	bgt.n	800c6de <__ieee754_sqrt+0x56>
 800c6c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c6c4:	4322      	orrs	r2, r4
 800c6c6:	d0f5      	beq.n	800c6b4 <__ieee754_sqrt+0x2c>
 800c6c8:	b19d      	cbz	r5, 800c6f2 <__ieee754_sqrt+0x6a>
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f7f3 fdd2 	bl	8000278 <__aeabi_dsub>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	f7f4 f8b0 	bl	800083c <__aeabi_ddiv>
 800c6dc:	e7e8      	b.n	800c6b0 <__ieee754_sqrt+0x28>
 800c6de:	152a      	asrs	r2, r5, #20
 800c6e0:	d115      	bne.n	800c70e <__ieee754_sqrt+0x86>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e009      	b.n	800c6fa <__ieee754_sqrt+0x72>
 800c6e6:	0acb      	lsrs	r3, r1, #11
 800c6e8:	3a15      	subs	r2, #21
 800c6ea:	0549      	lsls	r1, r1, #21
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0fa      	beq.n	800c6e6 <__ieee754_sqrt+0x5e>
 800c6f0:	e7f7      	b.n	800c6e2 <__ieee754_sqrt+0x5a>
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	e7fa      	b.n	800c6ec <__ieee754_sqrt+0x64>
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	02dc      	lsls	r4, r3, #11
 800c6fc:	d5fb      	bpl.n	800c6f6 <__ieee754_sqrt+0x6e>
 800c6fe:	1e44      	subs	r4, r0, #1
 800c700:	1b12      	subs	r2, r2, r4
 800c702:	f1c0 0420 	rsb	r4, r0, #32
 800c706:	fa21 f404 	lsr.w	r4, r1, r4
 800c70a:	4323      	orrs	r3, r4
 800c70c:	4081      	lsls	r1, r0
 800c70e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c712:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c71a:	07d2      	lsls	r2, r2, #31
 800c71c:	bf5c      	itt	pl
 800c71e:	005b      	lslpl	r3, r3, #1
 800c720:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c724:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c728:	bf58      	it	pl
 800c72a:	0049      	lslpl	r1, r1, #1
 800c72c:	2600      	movs	r6, #0
 800c72e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c732:	106d      	asrs	r5, r5, #1
 800c734:	0049      	lsls	r1, r1, #1
 800c736:	2016      	movs	r0, #22
 800c738:	4632      	mov	r2, r6
 800c73a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c73e:	1917      	adds	r7, r2, r4
 800c740:	429f      	cmp	r7, r3
 800c742:	bfde      	ittt	le
 800c744:	193a      	addle	r2, r7, r4
 800c746:	1bdb      	suble	r3, r3, r7
 800c748:	1936      	addle	r6, r6, r4
 800c74a:	0fcf      	lsrs	r7, r1, #31
 800c74c:	3801      	subs	r0, #1
 800c74e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c752:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c756:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c75a:	d1f0      	bne.n	800c73e <__ieee754_sqrt+0xb6>
 800c75c:	4604      	mov	r4, r0
 800c75e:	2720      	movs	r7, #32
 800c760:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c764:	429a      	cmp	r2, r3
 800c766:	eb00 0e0c 	add.w	lr, r0, ip
 800c76a:	db02      	blt.n	800c772 <__ieee754_sqrt+0xea>
 800c76c:	d113      	bne.n	800c796 <__ieee754_sqrt+0x10e>
 800c76e:	458e      	cmp	lr, r1
 800c770:	d811      	bhi.n	800c796 <__ieee754_sqrt+0x10e>
 800c772:	f1be 0f00 	cmp.w	lr, #0
 800c776:	eb0e 000c 	add.w	r0, lr, ip
 800c77a:	da42      	bge.n	800c802 <__ieee754_sqrt+0x17a>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	db40      	blt.n	800c802 <__ieee754_sqrt+0x17a>
 800c780:	f102 0801 	add.w	r8, r2, #1
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	458e      	cmp	lr, r1
 800c788:	bf88      	it	hi
 800c78a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c78e:	eba1 010e 	sub.w	r1, r1, lr
 800c792:	4464      	add	r4, ip
 800c794:	4642      	mov	r2, r8
 800c796:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c79a:	3f01      	subs	r7, #1
 800c79c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c7a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c7a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c7a8:	d1dc      	bne.n	800c764 <__ieee754_sqrt+0xdc>
 800c7aa:	4319      	orrs	r1, r3
 800c7ac:	d01b      	beq.n	800c7e6 <__ieee754_sqrt+0x15e>
 800c7ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c834 <__ieee754_sqrt+0x1ac>
 800c7b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c838 <__ieee754_sqrt+0x1b0>
 800c7b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800c7ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7be:	f7f3 fd5b 	bl	8000278 <__aeabi_dsub>
 800c7c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	4649      	mov	r1, r9
 800c7ce:	f7f4 f987 	bl	8000ae0 <__aeabi_dcmple>
 800c7d2:	b140      	cbz	r0, 800c7e6 <__ieee754_sqrt+0x15e>
 800c7d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c7d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c7dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7e0:	d111      	bne.n	800c806 <__ieee754_sqrt+0x17e>
 800c7e2:	3601      	adds	r6, #1
 800c7e4:	463c      	mov	r4, r7
 800c7e6:	1072      	asrs	r2, r6, #1
 800c7e8:	0863      	lsrs	r3, r4, #1
 800c7ea:	07f1      	lsls	r1, r6, #31
 800c7ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c7f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c7f4:	bf48      	it	mi
 800c7f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c7fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c7fe:	4618      	mov	r0, r3
 800c800:	e756      	b.n	800c6b0 <__ieee754_sqrt+0x28>
 800c802:	4690      	mov	r8, r2
 800c804:	e7be      	b.n	800c784 <__ieee754_sqrt+0xfc>
 800c806:	f7f3 fd39 	bl	800027c <__adddf3>
 800c80a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	4640      	mov	r0, r8
 800c814:	4649      	mov	r1, r9
 800c816:	f7f4 f959 	bl	8000acc <__aeabi_dcmplt>
 800c81a:	b120      	cbz	r0, 800c826 <__ieee754_sqrt+0x19e>
 800c81c:	1ca0      	adds	r0, r4, #2
 800c81e:	bf08      	it	eq
 800c820:	3601      	addeq	r6, #1
 800c822:	3402      	adds	r4, #2
 800c824:	e7df      	b.n	800c7e6 <__ieee754_sqrt+0x15e>
 800c826:	1c63      	adds	r3, r4, #1
 800c828:	f023 0401 	bic.w	r4, r3, #1
 800c82c:	e7db      	b.n	800c7e6 <__ieee754_sqrt+0x15e>
 800c82e:	bf00      	nop
 800c830:	7ff00000 	.word	0x7ff00000
 800c834:	20000198 	.word	0x20000198
 800c838:	20000190 	.word	0x20000190

0800c83c <__ieee754_sqrtf>:
 800c83c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c840:	4770      	bx	lr
	...

0800c844 <_init>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	bf00      	nop
 800c848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84a:	bc08      	pop	{r3}
 800c84c:	469e      	mov	lr, r3
 800c84e:	4770      	bx	lr

0800c850 <_fini>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr
